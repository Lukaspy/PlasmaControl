
PlasmaDriver_NucleoH723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013744  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd8  08013a18  08013a18  00014a18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080146f0  080146f0  000156f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080146f8  080146f8  000156f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080146fc  080146fc  000156fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  24000000  08014700  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000210  08014910  00016210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000270  08014970  00016270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eec  240002d0  080149d0  000162d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240011bc  080149d0  000171bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000162d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023f68  00000000  00000000  000162fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b26  00000000  00000000  0003a266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b78  00000000  00000000  0003dd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001577  00000000  00000000  0003f908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003804c  00000000  00000000  00040e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022302  00000000  00000000  00078ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016e053  00000000  00000000  0009b1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00209220  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087d4  00000000  00000000  00209264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00211a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d0 	.word	0x240002d0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080139fc 	.word	0x080139fc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d4 	.word	0x240002d4
 800030c:	080139fc 	.word	0x080139fc

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <writeConfigFlash>:
// Prototypes
void measureVoltagesTemperaturesADC3(void);

// Write configuration to flash
static uint32_t writeConfigFlash(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
	uint32_t faultySector;	//Contains error code for faulty sector
	uint32_t error_code = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]

	// Unlock Flash
	HAL_FLASH_Unlock();
 80006ba:	f009 fd5b 	bl	800a174 <HAL_FLASH_Unlock>

	// Erase flash sector 7
	if (HAL_FLASHEx_Erase(&sFlashErase, &faultySector) == HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4815      	ldr	r0, [pc, #84]	@ (8000718 <writeConfigFlash+0x68>)
 80006c4:	f009 fdf2 	bl	800a2ac <HAL_FLASHEx_Erase>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d119      	bne.n	8000702 <writeConfigFlash+0x52>
	{
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	e012      	b.n	80006fa <writeConfigFlash+0x4a>
		{
			// Program one flash word (8*4 bytes)
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, FLASH_SECTOR7_START_ADDR + offset, ((uint32_t) &sFlashConfig) + offset) != HAL_OK)
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <writeConfigFlash+0x6c>)
 80006d8:	4413      	add	r3, r2
 80006da:	4911      	ldr	r1, [pc, #68]	@ (8000720 <writeConfigFlash+0x70>)
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	440a      	add	r2, r1
 80006e0:	4619      	mov	r1, r3
 80006e2:	2001      	movs	r0, #1
 80006e4:	f009 fcd8 	bl	800a098 <HAL_FLASH_Program>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <writeConfigFlash+0x44>
			{
				// Error during flash write
				error_code = HAL_FLASH_GetError();
 80006ee:	f009 fd7b 	bl	800a1e8 <HAL_FLASH_GetError>
 80006f2:	60f8      	str	r0, [r7, #12]
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	3320      	adds	r3, #32
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0e9      	beq.n	80006d4 <writeConfigFlash+0x24>
 8000700:	e002      	b.n	8000708 <writeConfigFlash+0x58>
			}
		}
	}
	else
	{
		error_code = HAL_FLASH_GetError();
 8000702:	f009 fd71 	bl	800a1e8 <HAL_FLASH_GetError>
 8000706:	60f8      	str	r0, [r7, #12]
	}

	  // Lock Flash
	  HAL_FLASH_Lock();
 8000708:	f009 fd56 	bl	800a1b8 <HAL_FLASH_Lock>

	  return error_code;
 800070c:	68fb      	ldr	r3, [r7, #12]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	24000024 	.word	0x24000024
 800071c:	080e0000 	.word	0x080e0000
 8000720:	24000a40 	.word	0x24000a40

08000724 <readConfigFlash>:

// Read configuration from flash
static void readConfigFlash(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	// Read configuration from flash
	memcpy(&sFlashConfig, (void *) FLASH_SECTOR7_START_ADDR, sizeof(sFlashConfig));
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <readConfigFlash+0x18>)
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <readConfigFlash+0x1c>)
 800072e:	701a      	strb	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	080e0000 	.word	0x080e0000
 8000740:	24000a40 	.word	0x24000a40

08000744 <printCR>:

// Print CR
static void printCR(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t *) "\n\r", 2, 1000);
 8000748:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800074c:	2202      	movs	r2, #2
 800074e:	4903      	ldr	r1, [pc, #12]	@ (800075c <printCR+0x18>)
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <printCR+0x1c>)
 8000752:	f00e ffc2 	bl	800f6da <HAL_UART_Transmit>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	08013a18 	.word	0x08013a18
 8000760:	24000e30 	.word	0x24000e30

08000764 <printString>:

// Print string on UART3
static void printString(char *str)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 1000);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff fe1f 	bl	80003b0 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	b29a      	uxth	r2, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	4803      	ldr	r0, [pc, #12]	@ (800078c <printString+0x28>)
 800077e:	f00e ffac 	bl	800f6da <HAL_UART_Transmit>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000e30 	.word	0x24000e30

08000790 <printConfigFlash>:

// Print configuration on UART3
static void printConfigFlash(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	printString("\n\rCurrent configuration:");
 8000794:	480e      	ldr	r0, [pc, #56]	@ (80007d0 <printConfigFlash+0x40>)
 8000796:	f7ff ffe5 	bl	8000764 <printString>
	printString("\n\r  Mode = ");
 800079a:	480e      	ldr	r0, [pc, #56]	@ (80007d4 <printConfigFlash+0x44>)
 800079c:	f7ff ffe2 	bl	8000764 <printString>
	if (sFlashConfig.mode == TEST_MODE)
 80007a0:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <printConfigFlash+0x48>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d103      	bne.n	80007b0 <printConfigFlash+0x20>
		printString("TEST");
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <printConfigFlash+0x4c>)
 80007aa:	f7ff ffdb 	bl	8000764 <printString>
 80007ae:	e00a      	b.n	80007c6 <printConfigFlash+0x36>
	else if (sFlashConfig.mode == RUN_MODE)
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <printConfigFlash+0x48>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <printConfigFlash+0x30>
		printString("RUN");
 80007b8:	4809      	ldr	r0, [pc, #36]	@ (80007e0 <printConfigFlash+0x50>)
 80007ba:	f7ff ffd3 	bl	8000764 <printString>
 80007be:	e002      	b.n	80007c6 <printConfigFlash+0x36>
	else
		printString("UNKNOWN");
 80007c0:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <printConfigFlash+0x54>)
 80007c2:	f7ff ffcf 	bl	8000764 <printString>
	printCR();
 80007c6:	f7ff ffbd 	bl	8000744 <printCR>
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	08013a1c 	.word	0x08013a1c
 80007d4:	08013a38 	.word	0x08013a38
 80007d8:	24000a40 	.word	0x24000a40
 80007dc:	08013a44 	.word	0x08013a44
 80007e0:	08013a4c 	.word	0x08013a4c
 80007e4:	08013a50 	.word	0x08013a50

080007e8 <printNumber>:

// Print 16bit unsigned integer on UART3
static void printNumber(const char *text, uint16_t number, uint8_t CR)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09e      	sub	sp, #120	@ 0x78
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
 80007f4:	4613      	mov	r3, r2
 80007f6:	707b      	strb	r3, [r7, #1]
	char s_output[100];
	char s_number[7];
	strcpy(s_output, text);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	f011 f919 	bl	8011a36 <strcpy>
	itoa(number, s_number, 10);
 8000804:	887b      	ldrh	r3, [r7, #2]
 8000806:	f107 010c 	add.w	r1, r7, #12
 800080a:	220a      	movs	r2, #10
 800080c:	4618      	mov	r0, r3
 800080e:	f010 fa61 	bl	8010cd4 <itoa>
	strcat(s_output, s_number);
 8000812:	f107 020c 	add.w	r2, r7, #12
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f011 f884 	bl	801192a <strcat>
	if (CR)
 8000822:	787b      	ldrb	r3, [r7, #1]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00e      	beq.n	8000846 <printNumber+0x5e>
	{
		strcat(s_output, "\n\r");
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fdbf 	bl	80003b0 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4413      	add	r3, r2
 800083c:	4a0b      	ldr	r2, [pc, #44]	@ (800086c <printNumber+0x84>)
 800083e:	8811      	ldrh	r1, [r2, #0]
 8000840:	7892      	ldrb	r2, [r2, #2]
 8000842:	8019      	strh	r1, [r3, #0]
 8000844:	709a      	strb	r2, [r3, #2]
	}
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fdb0 	bl	80003b0 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	f107 0114 	add.w	r1, r7, #20
 8000858:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <printNumber+0x88>)
 800085e:	f00e ff3c 	bl	800f6da <HAL_UART_Transmit>
}
 8000862:	bf00      	nop
 8000864:	3778      	adds	r7, #120	@ 0x78
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	08013a18 	.word	0x08013a18
 8000870:	24000e30 	.word	0x24000e30

08000874 <printHALErrorStatus>:

// Print HAL error status on UART3
static void	printHALErrorStatus(HAL_StatusTypeDef HALresp, const char *text)
{
 8000874:	b5b0      	push	{r4, r5, r7, lr}
 8000876:	b09c      	sub	sp, #112	@ 0x70
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
	char s_output[100];

	switch (HALresp)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b03      	cmp	r3, #3
 8000884:	d828      	bhi.n	80008d8 <printHALErrorStatus+0x64>
 8000886:	a201      	add	r2, pc, #4	@ (adr r2, 800088c <printHALErrorStatus+0x18>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	080008d9 	.word	0x080008d9
 8000890:	0800089d 	.word	0x0800089d
 8000894:	080008b1 	.word	0x080008b1
 8000898:	080008c5 	.word	0x080008c5
	{
		case HAL_ERROR:
			strcpy(s_output, "** HAL ERROR **: ");
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4a15      	ldr	r2, [pc, #84]	@ (80008f8 <printHALErrorStatus+0x84>)
 80008a2:	461c      	mov	r4, r3
 80008a4:	4615      	mov	r5, r2
 80008a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008aa:	682b      	ldr	r3, [r5, #0]
 80008ac:	8023      	strh	r3, [r4, #0]
		break;
 80008ae:	e013      	b.n	80008d8 <printHALErrorStatus+0x64>

		case HAL_BUSY:
			strcpy(s_output, "** HAL BUSY **: ");
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4a11      	ldr	r2, [pc, #68]	@ (80008fc <printHALErrorStatus+0x88>)
 80008b6:	461c      	mov	r4, r3
 80008b8:	4615      	mov	r5, r2
 80008ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008be:	682b      	ldr	r3, [r5, #0]
 80008c0:	7023      	strb	r3, [r4, #0]
		break;
 80008c2:	e009      	b.n	80008d8 <printHALErrorStatus+0x64>

		case HAL_TIMEOUT:
			strcpy(s_output, "** HAL TIMEOUT **: ");
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000900 <printHALErrorStatus+0x8c>)
 80008ca:	461c      	mov	r4, r3
 80008cc:	4615      	mov	r5, r2
 80008ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d2:	682b      	ldr	r3, [r5, #0]
 80008d4:	6023      	str	r3, [r4, #0]
		break;
 80008d6:	bf00      	nop

		case HAL_OK:
		break;
	}
	strcat(s_output, text);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	6839      	ldr	r1, [r7, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f011 f823 	bl	801192a <strcat>
	printString(s_output);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff3b 	bl	8000764 <printString>
}
 80008ee:	bf00      	nop
 80008f0:	3770      	adds	r7, #112	@ 0x70
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bdb0      	pop	{r4, r5, r7, pc}
 80008f6:	bf00      	nop
 80008f8:	08013a58 	.word	0x08013a58
 80008fc:	08013a6c 	.word	0x08013a6c
 8000900:	08013a80 	.word	0x08013a80

08000904 <stopHbridge>:

void stopHbridge(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

	//Stop TIMER 1 PWM & interrupts
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);  //This will stop channel PWM1
 8000918:	2100      	movs	r1, #0
 800091a:	480f      	ldr	r0, [pc, #60]	@ (8000958 <stopHbridge+0x54>)
 800091c:	f00d fc88 	bl	800e230 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //This will stop channel PWM1N
 8000920:	2100      	movs	r1, #0
 8000922:	480d      	ldr	r0, [pc, #52]	@ (8000958 <stopHbridge+0x54>)
 8000924:	f00e fcca 	bl	800f2bc <HAL_TIMEx_PWMN_Stop>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, TIM1_CH1N_Pin|TIM1_CH1_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800092e:	480b      	ldr	r0, [pc, #44]	@ (800095c <stopHbridge+0x58>)
 8000930:	f009 ff50 	bl	800a7d4 <HAL_GPIO_WritePin>
	/*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8000934:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000938:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4804      	ldr	r0, [pc, #16]	@ (800095c <stopHbridge+0x58>)
 800094c:	f009 fd82 	bl	800a454 <HAL_GPIO_Init>

}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	24000ec4 	.word	0x24000ec4
 800095c:	58021000 	.word	0x58021000

08000960 <printHbridgeData>:

// Print H-bridge data on UART3
static void printHbridgeData(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09c      	sub	sp, #112	@ 0x70
 8000964:	af02      	add	r7, sp, #8
	char s_output[100];
	sprintf(s_output, "\n\rH-bridge 1=On 0=Off: %u, Frequency: %u (Hz), Dead time: %u (%%)\n\r", sHbridge.on, sHbridge.frequency, sHbridge.deadtime);
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <printHbridgeData+0x44>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <printHbridgeData+0x44>)
 800096e:	885b      	ldrh	r3, [r3, #2]
 8000970:	4619      	mov	r1, r3
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <printHbridgeData+0x44>)
 8000974:	889b      	ldrh	r3, [r3, #4]
 8000976:	1d38      	adds	r0, r7, #4
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	460b      	mov	r3, r1
 800097c:	490a      	ldr	r1, [pc, #40]	@ (80009a8 <printHbridgeData+0x48>)
 800097e:	f010 ff69 	bl	8011854 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fd13 	bl	80003b0 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b29a      	uxth	r2, r3
 800098e:	1d39      	adds	r1, r7, #4
 8000990:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <printHbridgeData+0x4c>)
 8000996:	f00e fea0 	bl	800f6da <HAL_UART_Transmit>
}
 800099a:	bf00      	nop
 800099c:	3768      	adds	r7, #104	@ 0x68
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2400001c 	.word	0x2400001c
 80009a8:	08013a94 	.word	0x08013a94
 80009ac:	24000e30 	.word	0x24000e30

080009b0 <programHbridge>:



// Program TIMER 1 controlling the H-bridge
static void programHbridge()
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0a6      	sub	sp, #152	@ 0x98
 80009b4:	af00      	add	r7, sp, #0
	uint8_t DT, DTG;
	float tDTS = 1E6/((float) TIMER_BASE_CLOCK);  //Minimum step in usec
 80009b6:	4b90      	ldr	r3, [pc, #576]	@ (8000bf8 <programHbridge+0x248>)
 80009b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	// TIMER 1 has already been initialized using HAL.
	// Program the H-bridge TIMER 1 - Clock TIMER_BASE_CLOCK

	// Calculate the period and duty cycle based on the frequency requested.
	timARR_f = ((float) TIMER_BASE_CLOCK) / ((float) sHbridge.frequency);
 80009bc:	4b8f      	ldr	r3, [pc, #572]	@ (8000bfc <programHbridge+0x24c>)
 80009be:	885b      	ldrh	r3, [r3, #2]
 80009c0:	ee07 3a90 	vmov	s15, r3
 80009c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009c8:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8000c00 <programHbridge+0x250>
 80009cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009d0:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	timARR = (uint32_t) (timARR_f + 0.5);							// Set period counter
 80009d4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80009d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009dc:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80009e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009e8:	ee17 3a90 	vmov	r3, s15
 80009ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	timCCR1 = timARR / 2;  											// 50% duty cycle
 80009f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80009f4:	085b      	lsrs	r3, r3, #1
 80009f6:	67fb      	str	r3, [r7, #124]	@ 0x7c

	// Print out the set frequency
	if (debug == 1)
 80009f8:	4b82      	ldr	r3, [pc, #520]	@ (8000c04 <programHbridge+0x254>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d105      	bne.n	8000a0c <programHbridge+0x5c>
	{
		value_int = ((uint32_t) TIMER_BASE_CLOCK) / timARR;
 8000a00:	4a81      	ldr	r2, [pc, #516]	@ (8000c08 <programHbridge+0x258>)
 8000a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	67bb      	str	r3, [r7, #120]	@ 0x78
	//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
	//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
	//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec

	// Calculate dead time in usec
	req_dtime_us = (((float) sHbridge.deadtime))*(10000./(float) sHbridge.frequency);
 8000a0c:	4b7b      	ldr	r3, [pc, #492]	@ (8000bfc <programHbridge+0x24c>)
 8000a0e:	889b      	ldrh	r3, [r3, #4]
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a18:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a1c:	4b77      	ldr	r3, [pc, #476]	@ (8000bfc <programHbridge+0x24c>)
 8000a1e:	885b      	ldrh	r3, [r3, #2]
 8000a20:	ee07 3a90 	vmov	s15, r3
 8000a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a28:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a2c:	ed9f 4b70 	vldr	d4, [pc, #448]	@ 8000bf0 <programHbridge+0x240>
 8000a30:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000a34:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a3c:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
		printString(s_output);
	}
*/

	// Minimum allowed dead time is 1 usec.
	if (req_dtime_us < 1.0)
 8000a40:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8000a44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a50:	d503      	bpl.n	8000a5a <programHbridge+0xaa>
		req_dtime_us = 1.0;
 8000a52:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000a56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	if (req_dtime_us <= 127*tDTS) //3.6946
 8000a5a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000a5e:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8000c0c <programHbridge+0x25c>
 8000a62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a66:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a72:	d81e      	bhi.n	8000ab2 <programHbridge+0x102>
	{
		DT = (uint8_t) (req_dtime_us/tDTS + 0.5);
 8000a74:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000a78:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a84:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000a88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a90:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a94:	793b      	ldrb	r3, [r7, #4]
 8000a96:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 127)
 8000a9a:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	da02      	bge.n	8000aa8 <programHbridge+0xf8>
			DT = 127;
 8000aa2:	237f      	movs	r3, #127	@ 0x7f
 8000aa4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT;
 8000aa8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000aac:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000ab0:	e0bb      	b.n	8000c2a <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 127*2*tDTS) //7.3890
 8000ab2:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ab6:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8000c10 <programHbridge+0x260>
 8000aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000abe:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000ac2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aca:	d825      	bhi.n	8000b18 <programHbridge+0x168>
	{
		DT = (uint8_t) ((req_dtime_us/(2*tDTS)) - 64 + 0.5);
 8000acc:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ad0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000ad4:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000adc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8000c14 <programHbridge+0x264>
 8000ae0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ae4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ae8:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000aec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000af0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000af4:	edc7 7a01 	vstr	s15, [r7, #4]
 8000af8:	793b      	ldrb	r3, [r7, #4]
 8000afa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 63)
 8000afe:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b02:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b04:	d902      	bls.n	8000b0c <programHbridge+0x15c>
			DT = 63;
 8000b06:	233f      	movs	r3, #63	@ 0x3f
 8000b08:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0x80;
 8000b0c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b10:	3b80      	subs	r3, #128	@ 0x80
 8000b12:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b16:	e088      	b.n	8000c2a <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 63*8*tDTS) //14.662
 8000b18:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b1c:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8000c18 <programHbridge+0x268>
 8000b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b24:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b30:	d827      	bhi.n	8000b82 <programHbridge+0x1d2>
	{
		DT = (uint8_t) ((req_dtime_us/(8*tDTS)) - 32 + 0.5);
 8000b32:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b36:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000b3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b3e:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b46:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8000c1c <programHbridge+0x26c>
 8000b4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b52:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b5e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b62:	793b      	ldrb	r3, [r7, #4]
 8000b64:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000b68:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b6c:	2b1f      	cmp	r3, #31
 8000b6e:	d902      	bls.n	8000b76 <programHbridge+0x1c6>
			DT = 31;
 8000b70:	231f      	movs	r3, #31
 8000b72:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xC0;
 8000b76:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b7a:	3b40      	subs	r3, #64	@ 0x40
 8000b7c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b80:	e053      	b.n	8000c2a <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 63*16*tDTS) //29.324
 8000b82:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b86:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000c20 <programHbridge+0x270>
 8000b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b8e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000b92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b9a:	d843      	bhi.n	8000c24 <programHbridge+0x274>
	{
		DT = (uint8_t) ((req_dtime_us/(16*tDTS)) - 32 + 0.5);
 8000b9c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ba0:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000ba4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ba8:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bb0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000c1c <programHbridge+0x26c>
 8000bb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bbc:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000bc0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bc4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bc8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000bcc:	793b      	ldrb	r3, [r7, #4]
 8000bce:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000bd2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000bd6:	2b1f      	cmp	r3, #31
 8000bd8:	d902      	bls.n	8000be0 <programHbridge+0x230>
			DT = 31;
 8000bda:	231f      	movs	r3, #31
 8000bdc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xE0;
 8000be0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000be4:	3b20      	subs	r3, #32
 8000be6:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000bea:	e01e      	b.n	8000c2a <programHbridge+0x27a>
 8000bec:	f3af 8000 	nop.w
 8000bf0:	00000000 	.word	0x00000000
 8000bf4:	40c38800 	.word	0x40c38800
 8000bf8:	3cee500f 	.word	0x3cee500f
 8000bfc:	2400001c 	.word	0x2400001c
 8000c00:	4c032156 	.word	0x4c032156
 8000c04:	24000000 	.word	0x24000000
 8000c08:	020c8558 	.word	0x020c8558
 8000c0c:	42fe0000 	.word	0x42fe0000
 8000c10:	437e0000 	.word	0x437e0000
 8000c14:	42800000 	.word	0x42800000
 8000c18:	43fc0000 	.word	0x43fc0000
 8000c1c:	42000000 	.word	0x42000000
 8000c20:	447c0000 	.word	0x447c0000
	}
	else
		DTG = 255;
 8000c24:	23ff      	movs	r3, #255	@ 0xff
 8000c26:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

	uint32_t temp = TIM1->BDTR & 0xFFFFFF00;		//Mask out DTG
 8000c2a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d64 <programHbridge+0x3b4>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000c32:	677b      	str	r3, [r7, #116]	@ 0x74
	timBDTR = temp | DTG;							//Add new DTG
 8000c34:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c38:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	673b      	str	r3, [r7, #112]	@ 0x70

	//Change timer1 settings
	htim1.Init.Period = timARR;   // Updating internal structure for timer
 8000c3e:	4a4a      	ldr	r2, [pc, #296]	@ (8000d68 <programHbridge+0x3b8>)
 8000c40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c44:	60d3      	str	r3, [r2, #12]
	TIM1->ARR = timARR;			  // Update period
 8000c46:	4a47      	ldr	r2, [pc, #284]	@ (8000d64 <programHbridge+0x3b4>)
 8000c48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM1->CCR1 = timCCR1;		  // Update duty cycle
 8000c4e:	4a45      	ldr	r2, [pc, #276]	@ (8000d64 <programHbridge+0x3b4>)
 8000c50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c52:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->BDTR = timBDTR;	      // Update dead time
 8000c54:	4a43      	ldr	r2, [pc, #268]	@ (8000d64 <programHbridge+0x3b4>)
 8000c56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000c58:	6453      	str	r3, [r2, #68]	@ 0x44

	if (debug == 1) {
 8000c5a:	4b44      	ldr	r3, [pc, #272]	@ (8000d6c <programHbridge+0x3bc>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d160      	bne.n	8000d24 <programHbridge+0x374>
		//sprintf(s_output, "ARR %lu CCR1 %lu BDTR %lu", timARR, timCCR1, timBDTR & 0xFF);
		//printString(s_output);

		float calcDT = 0;
 8000c62:	f04f 0300 	mov.w	r3, #0
 8000c66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		//  DTG[7:5] = 0xx => DT = DTG[7:0] x tDTG with tDTG = tDTS.			 max 127*tDTS   		: 0.0000 usec - 3.6946 usec
		if ((DTG & 0x80) == 0) {
 8000c6a:	f997 3096 	ldrsb.w	r3, [r7, #150]	@ 0x96
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0b      	blt.n	8000c8a <programHbridge+0x2da>
			calcDT = DTG*tDTS;
 8000c72:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c76:	ee07 3a90 	vmov	s15, r3
 8000c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c7e:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
		if ((DTG & 0xC0) == 0x80) {
 8000c8a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000c92:	2b80      	cmp	r3, #128	@ 0x80
 8000c94:	d10f      	bne.n	8000cb6 <programHbridge+0x306>
			calcDT = (64 + (DTG & 0x3F))*2*tDTS;
 8000c96:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c9e:	3340      	adds	r3, #64	@ 0x40
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000caa:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb2:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
		if ((DTG & 0xE0) == 0xC0) {
 8000cb6:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cba:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000cbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8000cc0:	d10f      	bne.n	8000ce2 <programHbridge+0x332>
			calcDT = (32 + (DTG & 0x1F))*8*tDTS;
 8000cc2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cc6:	f003 031f 	and.w	r3, r3, #31
 8000cca:	3320      	adds	r3, #32
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cde:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec
		if ((DTG & 0xE0) == 0xE0) {
 8000ce2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000ce6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000cea:	2be0      	cmp	r3, #224	@ 0xe0
 8000cec:	d10f      	bne.n	8000d0e <programHbridge+0x35e>
			calcDT = (32 + (DTG & 0x1F))*16*tDTS;
 8000cee:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cf2:	f003 031f 	and.w	r3, r3, #31
 8000cf6:	3320      	adds	r3, #32
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	ee07 3a90 	vmov	s15, r3
 8000cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d02:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d0a:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		value_int = (uint32_t) 1000*calcDT;
 8000d0e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000d12:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000d70 <programHbridge+0x3c0>
 8000d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d1e:	ee17 3a90 	vmov	r3, s15
 8000d22:	67bb      	str	r3, [r7, #120]	@ 0x78
		//sprintf(s_output, "\n\rSet dead time: %lu (ns)\n\r", value_int);
		//printString(s_output);
	}

	//Start driving the H-bridge
	if (sHbridge.on && (TIM_CHANNEL_STATE_GET(&htim1, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_READY))
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <programHbridge+0x3c4>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d010      	beq.n	8000d4e <programHbridge+0x39e>
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <programHbridge+0x3b8>)
 8000d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d10a      	bne.n	8000d4e <programHbridge+0x39e>
	{
		HAL_TIM_MspPostInit(&htim1);	//Setup GPIO for timer alternate function
 8000d38:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <programHbridge+0x3b8>)
 8000d3a:	f003 f82f 	bl	8003d9c <HAL_TIM_MspPostInit>
		//Start TIMER 1 PWM & interrupts
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  //This will start channel PWM1
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4809      	ldr	r0, [pc, #36]	@ (8000d68 <programHbridge+0x3b8>)
 8000d42:	f00d f959 	bl	800dff8 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); //This will start channel PWM1N
 8000d46:	2100      	movs	r1, #0
 8000d48:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <programHbridge+0x3b8>)
 8000d4a:	f00e f9e7 	bl	800f11c <HAL_TIMEx_PWMN_Start>
	}

	//Stop driving the H-bridge
	if (!sHbridge.on)
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <programHbridge+0x3c4>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <programHbridge+0x3aa>
	{
		stopHbridge();
 8000d56:	f7ff fdd5 	bl	8000904 <stopHbridge>
	}

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);

}
 8000d5a:	bf00      	nop
 8000d5c:	3798      	adds	r7, #152	@ 0x98
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40010000 	.word	0x40010000
 8000d68:	24000ec4 	.word	0x24000ec4
 8000d6c:	24000000 	.word	0x24000000
 8000d70:	447a0000 	.word	0x447a0000
 8000d74:	2400001c 	.word	0x2400001c

08000d78 <convertADC12data>:
#define ADC1_VplaL1			4	//Plasma voltage L1
#define ADC2_VplaL2			5	//Plasma voltage L2

//Convert ADC1 & ADC2 data to voltages and current
float convertADC12data(uint32_t item, char **text)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
	float result = 0;
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
* 3.3           *   (ADCData/65536.0)       *    1000
*   ^                   ^       ^                  ^
*   |                   |       |                  |
 * full scale V      Raw Data   Max ADC Value    Convert to mV
 */
	switch (item % (2*ADC12_NO_CHANNELS)) {
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	4b99      	ldr	r3, [pc, #612]	@ (8000ff0 <convertADC12data+0x278>)
 8000d8c:	fba3 2301 	umull	r2, r3, r3, r1
 8000d90:	089a      	lsrs	r2, r3, #2
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	1aca      	subs	r2, r1, r3
 8000d9c:	2a05      	cmp	r2, #5
 8000d9e:	f200 80f4 	bhi.w	8000f8a <convertADC12data+0x212>
 8000da2:	a301      	add	r3, pc, #4	@ (adr r3, 8000da8 <convertADC12data+0x30>)
 8000da4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000da8:	08000dc1 	.word	0x08000dc1
 8000dac:	08000de5 	.word	0x08000de5
 8000db0:	08000e51 	.word	0x08000e51
 8000db4:	08000e8b 	.word	0x08000e8b
 8000db8:	08000ec5 	.word	0x08000ec5
 8000dbc:	08000f2f 	.word	0x08000f2f
		case ADC1_TIM1_CH1:
			result = sADC.adc12_data[item];
 8000dc0:	4a8c      	ldr	r2, [pc, #560]	@ (8000ff4 <convertADC12data+0x27c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc8:	ee07 3a90 	vmov	s15, r3
 8000dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dd0:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 80cc 	beq.w	8000f74 <convertADC12data+0x1fc>
				*text ="ADC1_TIM1_CH1";
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	4a86      	ldr	r2, [pc, #536]	@ (8000ff8 <convertADC12data+0x280>)
 8000de0:	601a      	str	r2, [r3, #0]
			break;
 8000de2:	e0c7      	b.n	8000f74 <convertADC12data+0x1fc>

		case ADC2_Is:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000de4:	4a83      	ldr	r2, [pc, #524]	@ (8000ff4 <convertADC12data+0x27c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000df8:	ed9f 5b69 	vldr	d5, [pc, #420]	@ 8000fa0 <convertADC12data+0x228>
 8000dfc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e00:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8000fa8 <convertADC12data+0x230>
 8000e04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e08:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8000fb0 <convertADC12data+0x238>
 8000e0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e14:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  2000*(V - 1.585714)/3.594286; //V;
 8000e18:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e20:	ed9f 6b65 	vldr	d6, [pc, #404]	@ 8000fb8 <convertADC12data+0x240>
 8000e24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e28:	ed9f 6b65 	vldr	d6, [pc, #404]	@ 8000fc0 <convertADC12data+0x248>
 8000e2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e30:	ed9f 5b65 	vldr	d5, [pc, #404]	@ 8000fc8 <convertADC12data+0x250>
 8000e34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e3c:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 8098 	beq.w	8000f78 <convertADC12data+0x200>
				*text ="ADC2_Is(mA)";
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	4a6c      	ldr	r2, [pc, #432]	@ (8000ffc <convertADC12data+0x284>)
 8000e4c:	601a      	str	r2, [r3, #0]
			break;
 8000e4e:	e093      	b.n	8000f78 <convertADC12data+0x200>

		case ADC1_VbriS1:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0); // 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000e50:	4a68      	ldr	r2, [pc, #416]	@ (8000ff4 <convertADC12data+0x27c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e60:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e64:	ed9f 5b4e 	vldr	d5, [pc, #312]	@ 8000fa0 <convertADC12data+0x228>
 8000e68:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e6c:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8000fd0 <convertADC12data+0x258>
 8000e70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e78:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d07c      	beq.n	8000f7c <convertADC12data+0x204>
				*text ="ADC1_VbriS1(mV)";
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	4a5e      	ldr	r2, [pc, #376]	@ (8001000 <convertADC12data+0x288>)
 8000e86:	601a      	str	r2, [r3, #0]
			break;
 8000e88:	e078      	b.n	8000f7c <convertADC12data+0x204>

		case ADC2_VbriS2:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0); //3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000e8a:	4a5a      	ldr	r2, [pc, #360]	@ (8000ff4 <convertADC12data+0x27c>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e92:	ee07 3a90 	vmov	s15, r3
 8000e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e9a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e9e:	ed9f 5b40 	vldr	d5, [pc, #256]	@ 8000fa0 <convertADC12data+0x228>
 8000ea2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ea6:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8000fd0 <convertADC12data+0x258>
 8000eaa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000eae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eb2:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d061      	beq.n	8000f80 <convertADC12data+0x208>
				*text ="ADC2_VbriS2(mV)";
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	4a51      	ldr	r2, [pc, #324]	@ (8001004 <convertADC12data+0x28c>)
 8000ec0:	601a      	str	r2, [r3, #0]
			break;
 8000ec2:	e05d      	b.n	8000f80 <convertADC12data+0x208>

		case ADC1_VplaL1:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000ec4:	4a4b      	ldr	r2, [pc, #300]	@ (8000ff4 <convertADC12data+0x27c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ed4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ed8:	ed9f 5b31 	vldr	d5, [pc, #196]	@ 8000fa0 <convertADC12data+0x228>
 8000edc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ee0:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8000fa8 <convertADC12data+0x230>
 8000ee4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ee8:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8000fb0 <convertADC12data+0x238>
 8000eec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ef0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ef4:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  1E6*(V-1.648348)/0.999; //V;//
 8000ef8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000efc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f00:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8000fd8 <convertADC12data+0x260>
 8000f04:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f08:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8000fe0 <convertADC12data+0x268>
 8000f0c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f10:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 8000fe8 <convertADC12data+0x270>
 8000f14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f18:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f1c:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d02e      	beq.n	8000f84 <convertADC12data+0x20c>
				*text ="ADC1_VplaL1(mV)";
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	4a37      	ldr	r2, [pc, #220]	@ (8001008 <convertADC12data+0x290>)
 8000f2a:	601a      	str	r2, [r3, #0]
			break;
 8000f2c:	e02a      	b.n	8000f84 <convertADC12data+0x20c>

		case ADC2_VplaL2:
			//V is the directly measured voltage from the ADC in mV
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000f2e:	4a31      	ldr	r2, [pc, #196]	@ (8000ff4 <convertADC12data+0x27c>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f3e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f42:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 8000fa0 <convertADC12data+0x228>
 8000f46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f4a:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8000fa8 <convertADC12data+0x230>
 8000f4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f52:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8000fb0 <convertADC12data+0x238>
 8000f56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f5a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f5e:	edc7 7a02 	vstr	s15, [r7, #8]
			//result is the True voltage at L2 (corrected for voltage divider)
			result =  V;//1E6*(V-1.648348)/0.999;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	60fb      	str	r3, [r7, #12]
			if (text)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00d      	beq.n	8000f88 <convertADC12data+0x210>
				*text ="ADC2_VplaL2(mV)";
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	4a27      	ldr	r2, [pc, #156]	@ (800100c <convertADC12data+0x294>)
 8000f70:	601a      	str	r2, [r3, #0]
			break;
 8000f72:	e009      	b.n	8000f88 <convertADC12data+0x210>
			break;
 8000f74:	bf00      	nop
 8000f76:	e008      	b.n	8000f8a <convertADC12data+0x212>
			break;
 8000f78:	bf00      	nop
 8000f7a:	e006      	b.n	8000f8a <convertADC12data+0x212>
			break;
 8000f7c:	bf00      	nop
 8000f7e:	e004      	b.n	8000f8a <convertADC12data+0x212>
			break;
 8000f80:	bf00      	nop
 8000f82:	e002      	b.n	8000f8a <convertADC12data+0x212>
			break;
 8000f84:	bf00      	nop
 8000f86:	e000      	b.n	8000f8a <convertADC12data+0x212>
			break;
 8000f88:	bf00      	nop
	}

	return(result);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	ee07 3a90 	vmov	s15, r3
}
 8000f90:	eeb0 0a67 	vmov.f32	s0, s15
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	00000000 	.word	0x00000000
 8000fa4:	40f00000 	.word	0x40f00000
 8000fa8:	66666666 	.word	0x66666666
 8000fac:	400a6666 	.word	0x400a6666
 8000fb0:	00000000 	.word	0x00000000
 8000fb4:	408f4000 	.word	0x408f4000
 8000fb8:	a4acf313 	.word	0xa4acf313
 8000fbc:	3ff95f15 	.word	0x3ff95f15
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	409f4000 	.word	0x409f4000
 8000fc8:	04b3c3e7 	.word	0x04b3c3e7
 8000fcc:	400cc119 	.word	0x400cc119
 8000fd0:	ffffffff 	.word	0xffffffff
 8000fd4:	4120e2a7 	.word	0x4120e2a7
 8000fd8:	2706d506 	.word	0x2706d506
 8000fdc:	3ffa5fa2 	.word	0x3ffa5fa2
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	412e8480 	.word	0x412e8480
 8000fe8:	d916872b 	.word	0xd916872b
 8000fec:	3feff7ce 	.word	0x3feff7ce
 8000ff0:	aaaaaaab 	.word	0xaaaaaaab
 8000ff4:	2400032c 	.word	0x2400032c
 8000ff8:	08013ad8 	.word	0x08013ad8
 8000ffc:	08013ae8 	.word	0x08013ae8
 8001000:	08013af4 	.word	0x08013af4
 8001004:	08013b04 	.word	0x08013b04
 8001008:	08013b14 	.word	0x08013b14
 800100c:	08013b24 	.word	0x08013b24

08001010 <printADC12data>:

//Print measured ADC1 and ADC2 data on UART3
void printADC12data(void)
{
 8001010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001012:	b0f7      	sub	sp, #476	@ 0x1dc
 8001014:	af10      	add	r7, sp, #64	@ 0x40
	char *p_text[2*ADC12_NO_CHANNELS];
	float result[2*ADC12_NO_CHANNELS];

	if (debug == 1)
 8001016:	4ba0      	ldr	r3, [pc, #640]	@ (8001298 <printADC12data+0x288>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	f040 8136 	bne.w	800128c <printADC12data+0x27c>
	{
		printCR();
 8001020:	f7ff fb90 	bl	8000744 <printCR>
		printNumber("No data: ", sADC.nADC12Read, 1);
 8001024:	4b9d      	ldr	r3, [pc, #628]	@ (800129c <printADC12data+0x28c>)
 8001026:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800102a:	b29b      	uxth	r3, r3
 800102c:	2201      	movs	r2, #1
 800102e:	4619      	mov	r1, r3
 8001030:	489b      	ldr	r0, [pc, #620]	@ (80012a0 <printADC12data+0x290>)
 8001032:	f7ff fbd9 	bl	80007e8 <printNumber>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800103c:	e119      	b.n	8001272 <printADC12data+0x262>
		{
			int ii = i % (2*ADC12_NO_CHANNELS);
 800103e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001042:	4b98      	ldr	r3, [pc, #608]	@ (80012a4 <printADC12data+0x294>)
 8001044:	fb83 3102 	smull	r3, r1, r3, r2
 8001048:	17d3      	asrs	r3, r2, #31
 800104a:	1ac9      	subs	r1, r1, r3
 800104c:	460b      	mov	r3, r1
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	440b      	add	r3, r1
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
			result[ii] = convertADC12data(i, &p_text[ii]);
 800105a:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 800105e:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 8001062:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fe84 	bl	8000d78 <convertADC12data>
 8001070:	eef0 7a40 	vmov.f32	s15, s0
 8001074:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800107e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001082:	4413      	add	r3, r2
 8001084:	3b38      	subs	r3, #56	@ 0x38
 8001086:	edc3 7a00 	vstr	s15, [r3]
			char text[300];
			if (ii == 5)
 800108a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800108e:	2b05      	cmp	r3, #5
 8001090:	f040 80ea 	bne.w	8001268 <printADC12data+0x258>
			{
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001094:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001098:	4a82      	ldr	r2, [pc, #520]	@ (80012a4 <printADC12data+0x294>)
 800109a:	fb82 1203 	smull	r1, r2, r2, r3
 800109e:	17db      	asrs	r3, r3, #31
 80010a0:	eba2 0c03 	sub.w	ip, r2, r3
						p_text[ii-5],                     sADC.adc12_data[i-5],
 80010a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010a8:	3b05      	subs	r3, #5
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80010b0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010b4:	4413      	add	r3, r2
 80010b6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80010ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
						p_text[ii-5],                     sADC.adc12_data[i-5],
 80010bc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80010c0:	3b05      	subs	r3, #5
 80010c2:	4a76      	ldr	r2, [pc, #472]	@ (800129c <printADC12data+0x28c>)
 80010c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 80010ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010ce:	3b04      	subs	r3, #4
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80010d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010da:	18d3      	adds	r3, r2, r3
 80010dc:	f853 5c20 	ldr.w	r5, [r3, #-32]
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 80010e0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010e4:	3b04      	subs	r3, #4
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80010ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010f0:	18d3      	adds	r3, r2, r3
 80010f2:	3b38      	subs	r3, #56	@ 0x38
 80010f4:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001100:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001104:	3b04      	subs	r3, #4
 8001106:	4a65      	ldr	r2, [pc, #404]	@ (800129c <printADC12data+0x28c>)
 8001108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800110c:	623b      	str	r3, [r7, #32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 800110e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001112:	3b03      	subs	r3, #3
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800111a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800111e:	18d3      	adds	r3, r2, r3
 8001120:	f853 6c20 	ldr.w	r6, [r3, #-32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 8001124:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001128:	3b03      	subs	r3, #3
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001130:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001134:	18d3      	adds	r3, r2, r3
 8001136:	3b38      	subs	r3, #56	@ 0x38
 8001138:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800113c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001140:	edc7 7a07 	vstr	s15, [r7, #28]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 8001144:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001148:	3b03      	subs	r3, #3
 800114a:	4a54      	ldr	r2, [pc, #336]	@ (800129c <printADC12data+0x28c>)
 800114c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001150:	61bb      	str	r3, [r7, #24]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 8001152:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001156:	3b02      	subs	r3, #2
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800115e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001162:	18d3      	adds	r3, r2, r3
 8001164:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001168:	617a      	str	r2, [r7, #20]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 800116a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800116e:	3b02      	subs	r3, #2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 8001176:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800117a:	18cb      	adds	r3, r1, r3
 800117c:	3b38      	subs	r3, #56	@ 0x38
 800117e:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001186:	edc7 7a04 	vstr	s15, [r7, #16]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 800118a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800118e:	3b02      	subs	r3, #2
 8001190:	4a42      	ldr	r2, [pc, #264]	@ (800129c <printADC12data+0x28c>)
 8001192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001196:	60fb      	str	r3, [r7, #12]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001198:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800119c:	3b01      	subs	r3, #1
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 80011a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a8:	18cb      	adds	r3, r1, r3
 80011aa:	f853 1c20 	ldr.w	r1, [r3, #-32]
 80011ae:	60b9      	str	r1, [r7, #8]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 80011b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011b4:	3b01      	subs	r3, #1
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 80011bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011c0:	18c3      	adds	r3, r0, r3
 80011c2:	3b38      	subs	r3, #56	@ 0x38
 80011c4:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011cc:	edc7 7a01 	vstr	s15, [r7, #4]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 80011d0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80011d4:	1e5a      	subs	r2, r3, #1
 80011d6:	4b31      	ldr	r3, [pc, #196]	@ (800129c <printADC12data+0x28c>)
 80011d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 80011e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011ec:	18c3      	adds	r3, r0, r3
 80011ee:	f853 1c20 	ldr.w	r1, [r3, #-32]
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 80011f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 80011fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001200:	18c3      	adds	r3, r0, r3
 8001202:	3b38      	subs	r3, #56	@ 0x38
 8001204:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120c:	ee17 4a90 	vmov	r4, s15
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 8001210:	4a22      	ldr	r2, [pc, #136]	@ (800129c <printADC12data+0x28c>)
 8001212:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800121a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800121e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001220:	940e      	str	r4, [sp, #56]	@ 0x38
 8001222:	910d      	str	r1, [sp, #52]	@ 0x34
 8001224:	683c      	ldr	r4, [r7, #0]
 8001226:	940c      	str	r4, [sp, #48]	@ 0x30
 8001228:	687c      	ldr	r4, [r7, #4]
 800122a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	910a      	str	r1, [sp, #40]	@ 0x28
 8001230:	68f9      	ldr	r1, [r7, #12]
 8001232:	9109      	str	r1, [sp, #36]	@ 0x24
 8001234:	6939      	ldr	r1, [r7, #16]
 8001236:	9108      	str	r1, [sp, #32]
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	9207      	str	r2, [sp, #28]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	9206      	str	r2, [sp, #24]
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	9205      	str	r2, [sp, #20]
 8001244:	9604      	str	r6, [sp, #16]
 8001246:	6a3a      	ldr	r2, [r7, #32]
 8001248:	9203      	str	r2, [sp, #12]
 800124a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800124c:	9202      	str	r2, [sp, #8]
 800124e:	9501      	str	r5, [sp, #4]
 8001250:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001252:	9200      	str	r2, [sp, #0]
 8001254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001256:	4662      	mov	r2, ip
 8001258:	4913      	ldr	r1, [pc, #76]	@ (80012a8 <printADC12data+0x298>)
 800125a:	f010 fafb 	bl	8011854 <siprintf>
				printString(text);
 800125e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fa7e 	bl	8000764 <printString>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 8001268:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800126c:	3301      	adds	r3, #1
 800126e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <printADC12data+0x28c>)
 8001274:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	461a      	mov	r2, r3
 8001282:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001286:	429a      	cmp	r2, r3
 8001288:	f63f aed9 	bhi.w	800103e <printADC12data+0x2e>
			}
		}
	}
}
 800128c:	bf00      	nop
 800128e:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 8001292:	46bd      	mov	sp, r7
 8001294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001296:	bf00      	nop
 8001298:	24000000 	.word	0x24000000
 800129c:	2400032c 	.word	0x2400032c
 80012a0:	08013b34 	.word	0x08013b34
 80012a4:	2aaaaaab 	.word	0x2aaaaaab
 80012a8:	08013b40 	.word	0x08013b40

080012ac <freqCorrection>:

//Calculate frequency correction
//Returns 1 if a valid frequency correction is calculated, otherwise 0
uint8_t freqCorrection(int16_t *freqCorr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08e      	sub	sp, #56	@ 0x38
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	int start_index=0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	637b      	str	r3, [r7, #52]	@ 0x34
	int stop_index=0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	@ 0x30
	int number_of_lows=0;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
	int lowDetected = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int highDetected = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	float min = 100000;
 80012c8:	4b54      	ldr	r3, [pc, #336]	@ (800141c <freqCorrection+0x170>)
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
	float max = -100000;
 80012cc:	4b54      	ldr	r3, [pc, #336]	@ (8001420 <freqCorrection+0x174>)
 80012ce:	623b      	str	r3, [r7, #32]
	float norm = 0;
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]

	//Find when MOSFET branch is on (start and stop time)
	//Find minimum and maximum value of bridge current
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	e041      	b.n	8001360 <freqCorrection+0xb4>
	{
		// Find minimum of bridge current
		float data = convertADC12data(i+ADC2_Is, NULL);
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	3301      	adds	r3, #1
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fd48 	bl	8000d78 <convertADC12data>
 80012e8:	ed87 0a02 	vstr	s0, [r7, #8]
		if (data < min)
 80012ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80012f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fc:	d501      	bpl.n	8001302 <freqCorrection+0x56>
		{
			min = data;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
			//HAL_UART_Transmit(huart3, min);
			//printCR();
		}
		// Find maximum
		if (data > max)
 8001302:	ed97 7a02 	vldr	s14, [r7, #8]
 8001306:	edd7 7a08 	vldr	s15, [r7, #32]
 800130a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	dd01      	ble.n	8001318 <freqCorrection+0x6c>
		{
			max = data;
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	623b      	str	r3, [r7, #32]
		}
		// Check for low
		if (!lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] < 500)
 8001318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10a      	bne.n	8001334 <freqCorrection+0x88>
 800131e:	4a41      	ldr	r2, [pc, #260]	@ (8001424 <freqCorrection+0x178>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001326:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800132a:	d203      	bcs.n	8001334 <freqCorrection+0x88>
		{
			//First low detected
			start_index = i; 		// Store index of first low detected
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	637b      	str	r3, [r7, #52]	@ 0x34
			lowDetected = 1;
 8001330:	2301      	movs	r3, #1
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		//Check for high
		if (!highDetected && lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] > 65000)
 8001334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10f      	bne.n	800135a <freqCorrection+0xae>
 800133a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00c      	beq.n	800135a <freqCorrection+0xae>
 8001340:	4a38      	ldr	r2, [pc, #224]	@ (8001424 <freqCorrection+0x178>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001348:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 800134c:	4293      	cmp	r3, r2
 800134e:	d904      	bls.n	800135a <freqCorrection+0xae>
		{
			//High after first low detected
			stop_index = i-6;		// Store index of last low
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	3b06      	subs	r3, #6
 8001354:	633b      	str	r3, [r7, #48]	@ 0x30
			highDetected = 1;
 8001356:	2301      	movs	r3, #1
 8001358:	62bb      	str	r3, [r7, #40]	@ 0x28
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	3306      	adds	r3, #6
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	4b30      	ldr	r3, [pc, #192]	@ (8001424 <freqCorrection+0x178>)
 8001362:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	461a      	mov	r2, r3
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	429a      	cmp	r2, r3
 8001374:	d8b2      	bhi.n	80012dc <freqCorrection+0x30>
		}
	}

	// Check maximum and minimum difference
	norm = max - min;
 8001376:	ed97 7a08 	vldr	s14, [r7, #32]
 800137a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800137e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001382:	edc7 7a07 	vstr	s15, [r7, #28]
	if (norm < 10)
 8001386:	edd7 7a07 	vldr	s15, [r7, #28]
 800138a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800138e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	d501      	bpl.n	800139c <freqCorrection+0xf0>
		norm = max;
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	61fb      	str	r3, [r7, #28]

	number_of_lows = (stop_index - start_index)/6 + 1;
 800139c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800139e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	4a21      	ldr	r2, [pc, #132]	@ (8001428 <freqCorrection+0x17c>)
 80013a4:	fb82 1203 	smull	r1, r2, r2, r3
 80013a8:	17db      	asrs	r3, r3, #31
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
	if (lowDetected && highDetected && (number_of_lows >= 5))
 80013b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d02c      	beq.n	8001410 <freqCorrection+0x164>
 80013b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d029      	beq.n	8001410 <freqCorrection+0x164>
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	dd26      	ble.n	8001410 <freqCorrection+0x164>
	{
		float upper = convertADC12data(start_index+ADC2_Is+6, NULL);
 80013c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013c4:	3307      	adds	r3, #7
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fcd5 	bl	8000d78 <convertADC12data>
 80013ce:	ed87 0a04 	vstr	s0, [r7, #16]
		float lower = convertADC12data(stop_index+ADC2_Is-6, NULL);
 80013d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013d4:	3b05      	subs	r3, #5
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fccd 	bl	8000d78 <convertADC12data>
 80013de:	ed87 0a03 	vstr	s0, [r7, #12]
		*freqCorr = (int16_t) 1000*(upper - lower)/norm;
 80013e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80013e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ee:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800142c <freqCorrection+0x180>
 80013f2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80013f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80013fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001402:	ee17 3a90 	vmov	r3, s15
 8001406:	b21a      	sxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	801a      	strh	r2, [r3, #0]
		return(1);
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <freqCorrection+0x166>
	}
	else
		return(0);
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3738      	adds	r7, #56	@ 0x38
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	47c35000 	.word	0x47c35000
 8001420:	c7c35000 	.word	0xc7c35000
 8001424:	2400032c 	.word	0x2400032c
 8001428:	2aaaaaab 	.word	0x2aaaaaab
 800142c:	447a0000 	.word	0x447a0000

08001430 <measureBridgePlasmaADC12>:


// Measure bridge current, plasma voltage, and bridge current using ADC1 and ADC2 for one period
// After the measurement is done the function doneMeasuringBridgePlasmaADC12 is called
void measureBridgePlasmaADC12(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	//Calculate number of reads needed for one period
	sADC.nADC12Read = 2 * ((uint32_t) ((1/(float) sHbridge.frequency)/ADC12_GROUP_READTIME));
 8001436:	4b26      	ldr	r3, [pc, #152]	@ (80014d0 <measureBridgePlasmaADC12+0xa0>)
 8001438:	885b      	ldrh	r3, [r3, #2]
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800144e:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 80014c8 <measureBridgePlasmaADC12+0x98>
 8001452:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001456:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800145a:	ee17 3a90 	vmov	r3, s15
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4a1c      	ldr	r2, [pc, #112]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001462:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708
	sADC.nADC12Read +=2; //Add to see the start of next period
 8001466:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001468:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800146c:	3302      	adds	r3, #2
 800146e:	4a19      	ldr	r2, [pc, #100]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001470:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708

	//Start ADC1 and ADC2 measurements
	if (sADC.nADC12Read <= ADC12_MAX_GROUP)
 8001474:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001476:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800147a:	2b64      	cmp	r3, #100	@ 0x64
 800147c:	d81a      	bhi.n	80014b4 <measureBridgePlasmaADC12+0x84>
	{
		//Calculate the number DMA transfers needed
		uint32_t noDMARequests = ADC12_NO_CHANNELS*sADC.nADC12Read;
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001480:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	607b      	str	r3, [r7, #4]

		// Start reading ADC1 and ADC2
		sADC.adc12_reading = 1;
 800148c:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 800148e:	2201      	movs	r2, #1
 8001490:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

		//This will start the ADC1 and ADC2 measurements when H-BRIDGE_B_CTRL (TIM1_CH1) goes from 0 to 1.
		//When the measurements are done doneMeasuringBridgePlasmaADC12 is called.
		HAL_StatusTypeDef HALresp = HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *) sADC.adc12_data, noDMARequests);
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	490f      	ldr	r1, [pc, #60]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001498:	480f      	ldr	r0, [pc, #60]	@ (80014d8 <measureBridgePlasmaADC12+0xa8>)
 800149a:	f005 fd05 	bl	8006ea8 <HAL_ADCEx_MultiModeStart_DMA>
 800149e:	4603      	mov	r3, r0
 80014a0:	70fb      	strb	r3, [r7, #3]
		if (HALresp != HAL_OK)
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d008      	beq.n	80014ba <measureBridgePlasmaADC12+0x8a>
		{
			printHALErrorStatus(HALresp, "measureBridgePlasmaADC12");
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	490c      	ldr	r1, [pc, #48]	@ (80014dc <measureBridgePlasmaADC12+0xac>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f9e1 	bl	8000874 <printHALErrorStatus>
	}
	else
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 80014b2:	e002      	b.n	80014ba <measureBridgePlasmaADC12+0x8a>
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");
 80014b4:	480a      	ldr	r0, [pc, #40]	@ (80014e0 <measureBridgePlasmaADC12+0xb0>)
 80014b6:	f7ff f955 	bl	8000764 <printString>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	f3af 8000 	nop.w
 80014c8:	a0b5ed8d 	.word	0xa0b5ed8d
 80014cc:	3eb0c6f7 	.word	0x3eb0c6f7
 80014d0:	2400001c 	.word	0x2400001c
 80014d4:	2400032c 	.word	0x2400032c
 80014d8:	24000a80 	.word	0x24000a80
 80014dc:	08013b98 	.word	0x08013b98
 80014e0:	08013bb4 	.word	0x08013bb4

080014e4 <doneMeasuringBridgePlasmaADC12>:

// Done measuring bridge current, plasma voltage, and bridge current
void doneMeasuringBridgePlasmaADC12(uint32_t errorCode)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	static uint32_t count = 0;

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	count++;
 80014ec:	4b22      	ldr	r3, [pc, #136]	@ (8001578 <doneMeasuringBridgePlasmaADC12+0x94>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	4a21      	ldr	r2, [pc, #132]	@ (8001578 <doneMeasuringBridgePlasmaADC12+0x94>)
 80014f4:	6013      	str	r3, [r2, #0]

	// Done reading ADC1 and ADC2
	sADC.adc12_reading = 0;
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <doneMeasuringBridgePlasmaADC12+0x98>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

	if (errorCode == HAL_ADC_ERROR_NONE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d128      	bne.n	8001556 <doneMeasuringBridgePlasmaADC12+0x72>
	{
		if (sFlashConfig.mode == RUN_MODE)
 8001504:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <doneMeasuringBridgePlasmaADC12+0x9c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d12b      	bne.n	8001564 <doneMeasuringBridgePlasmaADC12+0x80>

			//TODO Check plasma voltage VplaL1 and VplaL2 (To high? Not present?)
			//TODO Calculate plasma voltage Vrms, Vmax and Vmin

			//Adjust H-bridge frequency
			if (powerStatus == V500_ON)
 800150c:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <doneMeasuringBridgePlasmaADC12+0xa0>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d127      	bne.n	8001564 <doneMeasuringBridgePlasmaADC12+0x80>
			{
				//Adjust H-bridge frequency
				int16_t freqCorr = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	81fb      	strh	r3, [r7, #14]
				if (freqCorrection(&freqCorr))
 8001518:	f107 030e 	add.w	r3, r7, #14
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fec5 	bl	80012ac <freqCorrection>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <doneMeasuringBridgePlasmaADC12+0x56>
					sHbridge.frequency += freqCorr;
 8001528:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <doneMeasuringBridgePlasmaADC12+0xa4>)
 800152a:	885a      	ldrh	r2, [r3, #2]
 800152c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001530:	b29b      	uxth	r3, r3
 8001532:	4413      	add	r3, r2
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <doneMeasuringBridgePlasmaADC12+0xa4>)
 8001538:	805a      	strh	r2, [r3, #2]
				//TODO Adjust H-bridge dead time
				//sHbridge.deadtime = new setting;
				programHbridge();
 800153a:	f7ff fa39 	bl	80009b0 <programHbridge>
					HAL_Delay(1);	//Allow H-bridge to settle with new settings
 800153e:	2001      	movs	r0, #1
 8001540:	f002 ff12 	bl	8004368 <HAL_Delay>
				if (count % 2048)
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <doneMeasuringBridgePlasmaADC12+0x94>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800154c:	2b00      	cmp	r3, #0
 800154e:	d009      	beq.n	8001564 <doneMeasuringBridgePlasmaADC12+0x80>
					printHbridgeData();
 8001550:	f7ff fa06 	bl	8000960 <printHbridgeData>
 8001554:	e006      	b.n	8001564 <doneMeasuringBridgePlasmaADC12+0x80>
			}
		}
	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	b29b      	uxth	r3, r3
 800155a:	2201      	movs	r2, #1
 800155c:	4619      	mov	r1, r3
 800155e:	480b      	ldr	r0, [pc, #44]	@ (800158c <doneMeasuringBridgePlasmaADC12+0xa8>)
 8001560:	f7ff f942 	bl	80007e8 <printNumber>
	}

	//Measure ADC3 voltages
	if (sFlashConfig.mode == RUN_MODE)
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <doneMeasuringBridgePlasmaADC12+0x9c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <doneMeasuringBridgePlasmaADC12+0x8c>
		measureVoltagesTemperaturesADC3();
 800156c:	f000 fa48 	bl	8001a00 <measureVoltagesTemperaturesADC3>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	24000a44 	.word	0x24000a44
 800157c:	2400032c 	.word	0x2400032c
 8001580:	24000a40 	.word	0x24000a40
 8001584:	24000a3c 	.word	0x24000a3c
 8001588:	2400001c 	.word	0x2400001c
 800158c:	08013be0 	.word	0x08013be0

08001590 <printHbridgeDatalogging>:

// Print H-bridge data on UART3 formatted for CSV datalogging
// Prints: Hbridge Freq, Deadtime, Is, VplaL1, VplaL2, VbrS1, VbriS2

static void printHbridgeDatalogging(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	f5ad 6d85 	sub.w	sp, sp, #1064	@ 0x428
 8001596:	af0a      	add	r7, sp, #40	@ 0x28
	char s_output[1000];
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 800159e:	e067      	b.n	8001670 <printHbridgeDatalogging+0xe0>
		{
			float Is = convertADC12data(i+ADC2_Is, NULL);
 80015a0:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 80015a4:	3301      	adds	r3, #1
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fbe5 	bl	8000d78 <convertADC12data>
 80015ae:	ed87 0afe 	vstr	s0, [r7, #1016]	@ 0x3f8
			float VplaL1 = convertADC12data(i+ADC1_VplaL1, NULL);
 80015b2:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 80015b6:	3304      	adds	r3, #4
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fbdc 	bl	8000d78 <convertADC12data>
 80015c0:	ed87 0afd 	vstr	s0, [r7, #1012]	@ 0x3f4
			float VplaL2 = convertADC12data(i+ADC2_VplaL2, NULL);
 80015c4:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 80015c8:	3305      	adds	r3, #5
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fbd3 	bl	8000d78 <convertADC12data>
 80015d2:	ed87 0afc 	vstr	s0, [r7, #1008]	@ 0x3f0
			float VbriS1 = convertADC12data(i+ADC1_VbriS1, NULL);
 80015d6:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 80015da:	3302      	adds	r3, #2
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fbca 	bl	8000d78 <convertADC12data>
 80015e4:	ed87 0afb 	vstr	s0, [r7, #1004]	@ 0x3ec
			float VbriS2 = convertADC12data(i+ADC2_VbriS2, NULL);
 80015e8:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 80015ec:	3303      	adds	r3, #3
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fbc1 	bl	8000d78 <convertADC12data>
 80015f6:	ed87 0afa 	vstr	s0, [r7, #1000]	@ 0x3e8

			sprintf(s_output, "%u,%u,%f,%f,%f,%f,%f", sHbridge.frequency, sHbridge.deadtime,Is,VplaL1,VplaL2,VbriS1,VbriS2);
 80015fa:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <printHbridgeDatalogging+0x104>)
 80015fc:	885b      	ldrh	r3, [r3, #2]
 80015fe:	461a      	mov	r2, r3
 8001600:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <printHbridgeDatalogging+0x104>)
 8001602:	889b      	ldrh	r3, [r3, #4]
 8001604:	edd7 7afe 	vldr	s15, [r7, #1016]	@ 0x3f8
 8001608:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800160c:	edd7 6afd 	vldr	s13, [r7, #1012]	@ 0x3f4
 8001610:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001614:	edd7 5afc 	vldr	s11, [r7, #1008]	@ 0x3f0
 8001618:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800161c:	edd7 4afb 	vldr	s9, [r7, #1004]	@ 0x3ec
 8001620:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8001624:	edd7 3afa 	vldr	s7, [r7, #1000]	@ 0x3e8
 8001628:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 800162c:	4638      	mov	r0, r7
 800162e:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001632:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001636:	ed8d 5b04 	vstr	d5, [sp, #16]
 800163a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800163e:	ed8d 7b00 	vstr	d7, [sp]
 8001642:	4915      	ldr	r1, [pc, #84]	@ (8001698 <printHbridgeDatalogging+0x108>)
 8001644:	f010 f906 	bl	8011854 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8001648:	463b      	mov	r3, r7
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe feb0 	bl	80003b0 <strlen>
 8001650:	4603      	mov	r3, r0
 8001652:	b29a      	uxth	r2, r3
 8001654:	4639      	mov	r1, r7
 8001656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800165a:	4810      	ldr	r0, [pc, #64]	@ (800169c <printHbridgeDatalogging+0x10c>)
 800165c:	f00e f83d 	bl	800f6da <HAL_UART_Transmit>
			printString("\n");
 8001660:	480f      	ldr	r0, [pc, #60]	@ (80016a0 <printHbridgeDatalogging+0x110>)
 8001662:	f7ff f87f 	bl	8000764 <printString>
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001666:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 800166a:	3306      	adds	r3, #6
 800166c:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <printHbridgeDatalogging+0x114>)
 8001672:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	461a      	mov	r2, r3
 8001680:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 8001684:	429a      	cmp	r2, r3
 8001686:	d88b      	bhi.n	80015a0 <printHbridgeDatalogging+0x10>
		}
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	2400001c 	.word	0x2400001c
 8001698:	08013bf4 	.word	0x08013bf4
 800169c:	24000e30 	.word	0x24000e30
 80016a0:	08013c0c 	.word	0x08013c0c
 80016a4:	2400032c 	.word	0x2400032c

080016a8 <autoFreqAdj>:

// Automatically Correct the Drive Frequency until user presses any key
void autoFreqAdj(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
	char input;


	//printString("\n\r%Press any key to exit"); //Commented out to allow for automated remote serial control (datalogging)

	printString("Freq (Hz),Deadtime (%),Bridge I,VplaL1,VplaL2,VbriS1,VbriS2");
 80016ae:	4825      	ldr	r0, [pc, #148]	@ (8001744 <autoFreqAdj+0x9c>)
 80016b0:	f7ff f858 	bl	8000764 <printString>
	//printCR();
	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 80016b4:	e037      	b.n	8001726 <autoFreqAdj+0x7e>
	{
		measureBridgePlasmaADC12();
 80016b6:	f7ff febb 	bl	8001430 <measureBridgePlasmaADC12>
		//Wait until ADC3 reading is done
		while (sADC.adc12_reading);
 80016ba:	bf00      	nop
 80016bc:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <autoFreqAdj+0xa0>)
 80016be:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f9      	bne.n	80016bc <autoFreqAdj+0x14>
		//printADC12data();

		//Calculate delta f
		int16_t freqCorr;
		freqCorrection(&freqCorr);
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fdee 	bl	80012ac <freqCorrection>

		//char text[100];
		//sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
		//printString(text);

		if (sHbridge.frequency + freqCorr > MAX_FREQUENCY) //GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 80016d0:	4b1e      	ldr	r3, [pc, #120]	@ (800174c <autoFreqAdj+0xa4>)
 80016d2:	885b      	ldrh	r3, [r3, #2]
 80016d4:	461a      	mov	r2, r3
 80016d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80016e0:	4293      	cmp	r3, r2
 80016e2:	dd04      	ble.n	80016ee <autoFreqAdj+0x46>
		{   // Calculated freq is higher than max

			//sprintf(text, "\n\r%i is higher than max freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);
			sHbridge.frequency = MAX_FREQUENCY;
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <autoFreqAdj+0xa4>)
 80016e6:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80016ea:	805a      	strh	r2, [r3, #2]
 80016ec:	e017      	b.n	800171e <autoFreqAdj+0x76>
		}
		else if (sHbridge.frequency + freqCorr < MIN_FREQUENCY)
 80016ee:	4b17      	ldr	r3, [pc, #92]	@ (800174c <autoFreqAdj+0xa4>)
 80016f0:	885b      	ldrh	r3, [r3, #2]
 80016f2:	461a      	mov	r2, r3
 80016f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80016fe:	4293      	cmp	r3, r2
 8001700:	dc04      	bgt.n	800170c <autoFreqAdj+0x64>
		{
			//sprintf(text, "\n\r%i is lower than min freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);

			sHbridge.frequency = MIN_FREQUENCY;
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <autoFreqAdj+0xa4>)
 8001704:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001708:	805a      	strh	r2, [r3, #2]
 800170a:	e008      	b.n	800171e <autoFreqAdj+0x76>

		}
		else
		{
			sHbridge.frequency = sHbridge.frequency + freqCorr;
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <autoFreqAdj+0xa4>)
 800170e:	885a      	ldrh	r2, [r3, #2]
 8001710:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001714:	b29b      	uxth	r3, r3
 8001716:	4413      	add	r3, r2
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <autoFreqAdj+0xa4>)
 800171c:	805a      	strh	r2, [r3, #2]
		}

		programHbridge();
 800171e:	f7ff f947 	bl	80009b0 <programHbridge>

		//Print current ADC data
		printHbridgeDatalogging();
 8001722:	f7ff ff35 	bl	8001590 <printHbridgeDatalogging>
	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 8001726:	1df9      	adds	r1, r7, #7
 8001728:	2301      	movs	r3, #1
 800172a:	2201      	movs	r2, #1
 800172c:	4808      	ldr	r0, [pc, #32]	@ (8001750 <autoFreqAdj+0xa8>)
 800172e:	f00e f862 	bl	800f7f6 <HAL_UART_Receive>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1be      	bne.n	80016b6 <autoFreqAdj+0xe>


	}
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	08013c10 	.word	0x08013c10
 8001748:	2400032c 	.word	0x2400032c
 800174c:	2400001c 	.word	0x2400001c
 8001750:	24000e30 	.word	0x24000e30
 8001754:	00000000 	.word	0x00000000

08001758 <convertADC3data>:

//Convert ADC3 data to voltages
float convertADC3data(uint32_t item, char **text)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
	float result = 0;
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]

	switch (item) {
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b0a      	cmp	r3, #10
 800176c:	f200 80c5 	bhi.w	80018fa <convertADC3data+0x1a2>
 8001770:	a201      	add	r2, pc, #4	@ (adr r2, 8001778 <convertADC3data+0x20>)
 8001772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001776:	bf00      	nop
 8001778:	080017a5 	.word	0x080017a5
 800177c:	080017d7 	.word	0x080017d7
 8001780:	08001809 	.word	0x08001809
 8001784:	0800183b 	.word	0x0800183b
 8001788:	08001849 	.word	0x08001849
 800178c:	08001883 	.word	0x08001883
 8001790:	080018b5 	.word	0x080018b5
 8001794:	080018c3 	.word	0x080018c3
 8001798:	080018d1 	.word	0x080018d1
 800179c:	080018df 	.word	0x080018df
 80017a0:	080018ed 	.word	0x080018ed
		case ADC3_VBAT:
			result =  1000*((9.76+169.0)/9.76)*3.3*(((float) sADC.adc3_data[ADC3_VBAT])/4096.0);
 80017a4:	4b66      	ldr	r3, [pc, #408]	@ (8001940 <convertADC3data+0x1e8>)
 80017a6:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80017b6:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 8001910 <convertADC3data+0x1b8>
 80017ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017be:	ed9f 6b56 	vldr	d6, [pc, #344]	@ 8001918 <convertADC3data+0x1c0>
 80017c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017ca:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_VBAT (mV)";
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	4a5c      	ldr	r2, [pc, #368]	@ (8001944 <convertADC3data+0x1ec>)
 80017d2:	601a      	str	r2, [r3, #0]
			break;
 80017d4:	e091      	b.n	80018fa <convertADC3data+0x1a2>
		case ADC3_15V:
			result =  1000*((30.0+120.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_15V])/4096.0);
 80017d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001940 <convertADC3data+0x1e8>)
 80017d8:	f8b3 34b2 	ldrh.w	r3, [r3, #1202]	@ 0x4b2
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80017e8:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8001910 <convertADC3data+0x1b8>
 80017ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017f0:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8001920 <convertADC3data+0x1c8>
 80017f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017fc:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_15V (mV)";
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4a51      	ldr	r2, [pc, #324]	@ (8001948 <convertADC3data+0x1f0>)
 8001804:	601a      	str	r2, [r3, #0]
			break;
 8001806:	e078      	b.n	80018fa <convertADC3data+0x1a2>
		case ADC3_3_3V:
			result =  1000*((30.0+3.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_3_3V])/4096.0);
 8001808:	4b4d      	ldr	r3, [pc, #308]	@ (8001940 <convertADC3data+0x1e8>)
 800180a:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	@ 0x4b4
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001816:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800181a:	ed9f 5b3d 	vldr	d5, [pc, #244]	@ 8001910 <convertADC3data+0x1b8>
 800181e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001822:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8001928 <convertADC3data+0x1d0>
 8001826:	ee27 7b06 	vmul.f64	d7, d7, d6
 800182a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800182e:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_3_3V (mV)";
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	4a45      	ldr	r2, [pc, #276]	@ (800194c <convertADC3data+0x1f4>)
 8001836:	601a      	str	r2, [r3, #0]
			break;
 8001838:	e05f      	b.n	80018fa <convertADC3data+0x1a2>
		case ADC3_NC3:
			result = 0;
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC3";
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	4a43      	ldr	r2, [pc, #268]	@ (8001950 <convertADC3data+0x1f8>)
 8001844:	601a      	str	r2, [r3, #0]
			break;
 8001846:	e058      	b.n	80018fa <convertADC3data+0x1a2>
		case ADC3_BridgeTemp:
			result = 1000*((float) sADC.adc3_data[ADC3_BridgeTemp])*3.3/4096.0;
 8001848:	4b3d      	ldr	r3, [pc, #244]	@ (8001940 <convertADC3data+0x1e8>)
 800184a:	f8b3 34b8 	ldrh.w	r3, [r3, #1208]	@ 0x4b8
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001856:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001954 <convertADC3data+0x1fc>
 800185a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800185e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001862:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 8001930 <convertADC3data+0x1d8>
 8001866:	ee27 6b06 	vmul.f64	d6, d7, d6
 800186a:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001910 <convertADC3data+0x1b8>
 800186e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001872:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001876:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_BridgeTemp (mV)";
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	4a36      	ldr	r2, [pc, #216]	@ (8001958 <convertADC3data+0x200>)
 800187e:	601a      	str	r2, [r3, #0]
			break;
 8001880:	e03b      	b.n	80018fa <convertADC3data+0x1a2>
		case ADC3_500VDC:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc3_data[ADC3_500VDC])/4096.0);
 8001882:	4b2f      	ldr	r3, [pc, #188]	@ (8001940 <convertADC3data+0x1e8>)
 8001884:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	@ 0x4ba
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001890:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001894:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001910 <convertADC3data+0x1b8>
 8001898:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800189c:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8001938 <convertADC3data+0x1e0>
 80018a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018a8:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_500VDC (mV)";
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	4a2b      	ldr	r2, [pc, #172]	@ (800195c <convertADC3data+0x204>)
 80018b0:	601a      	str	r2, [r3, #0]
			break;
 80018b2:	e022      	b.n	80018fa <convertADC3data+0x1a2>
		case ADC3_Thermistor1:
			result = 0;
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor1";
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	4a28      	ldr	r2, [pc, #160]	@ (8001960 <convertADC3data+0x208>)
 80018be:	601a      	str	r2, [r3, #0]
			break;
 80018c0:	e01b      	b.n	80018fa <convertADC3data+0x1a2>
		case ADC3_Thermistor2:
			result = 0;
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor2";
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	4a26      	ldr	r2, [pc, #152]	@ (8001964 <convertADC3data+0x20c>)
 80018cc:	601a      	str	r2, [r3, #0]
			break;
 80018ce:	e014      	b.n	80018fa <convertADC3data+0x1a2>
		case ADC3_Thermistor3:
			result = 0;
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor3";
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	4a23      	ldr	r2, [pc, #140]	@ (8001968 <convertADC3data+0x210>)
 80018da:	601a      	str	r2, [r3, #0]
			break;
 80018dc:	e00d      	b.n	80018fa <convertADC3data+0x1a2>
		case ADC3_Thermistor4:
			result = 0;
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor4";
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	4a21      	ldr	r2, [pc, #132]	@ (800196c <convertADC3data+0x214>)
 80018e8:	601a      	str	r2, [r3, #0]
			break;
 80018ea:	e006      	b.n	80018fa <convertADC3data+0x1a2>
		case ADC3_NC10:
			result = 0;
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC10";
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001970 <convertADC3data+0x218>)
 80018f6:	601a      	str	r2, [r3, #0]
			break;
 80018f8:	bf00      	nop
	}

	return(result);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	ee07 3a90 	vmov	s15, r3
}
 8001900:	eeb0 0a67 	vmov.f32	s0, s15
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	00000000 	.word	0x00000000
 8001914:	40b00000 	.word	0x40b00000
 8001918:	9714fbcd 	.word	0x9714fbcd
 800191c:	40ed832c 	.word	0x40ed832c
 8001920:	00000000 	.word	0x00000000
 8001924:	40d01d00 	.word	0x40d01d00
 8001928:	00000000 	.word	0x00000000
 800192c:	40ac5c00 	.word	0x40ac5c00
 8001930:	66666666 	.word	0x66666666
 8001934:	400a6666 	.word	0x400a6666
 8001938:	ffffffff 	.word	0xffffffff
 800193c:	4120e2a7 	.word	0x4120e2a7
 8001940:	2400032c 	.word	0x2400032c
 8001944:	08013c4c 	.word	0x08013c4c
 8001948:	08013c5c 	.word	0x08013c5c
 800194c:	08013c6c 	.word	0x08013c6c
 8001950:	08013c7c 	.word	0x08013c7c
 8001954:	447a0000 	.word	0x447a0000
 8001958:	08013c88 	.word	0x08013c88
 800195c:	08013ca0 	.word	0x08013ca0
 8001960:	08013cb4 	.word	0x08013cb4
 8001964:	08013cc8 	.word	0x08013cc8
 8001968:	08013cdc 	.word	0x08013cdc
 800196c:	08013cf0 	.word	0x08013cf0
 8001970:	08013d04 	.word	0x08013d04

08001974 <printADC3data>:

//Print measured ADC3 data on UART3
void printADC3data(void)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b09f      	sub	sp, #124	@ 0x7c
 8001978:	af02      	add	r7, sp, #8
	if (debug == 1)
 800197a:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <printADC3data+0x7c>)
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d131      	bne.n	80019e6 <printADC3data+0x72>
	{
		printCR();
 8001982:	f7fe fedf 	bl	8000744 <printCR>
		printNumber("No data: ", ADC3_DMA_REQUESTS, 1);
 8001986:	2201      	movs	r2, #1
 8001988:	210b      	movs	r1, #11
 800198a:	481a      	ldr	r0, [pc, #104]	@ (80019f4 <printADC3data+0x80>)
 800198c:	f7fe ff2c 	bl	80007e8 <printNumber>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001990:	2300      	movs	r3, #0
 8001992:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001994:	e024      	b.n	80019e0 <printADC3data+0x6c>
		{
			char text[100];
			char *p_text;
			float result = convertADC3data(i, &p_text);
 8001996:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001998:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800199c:	4611      	mov	r1, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff feda 	bl	8001758 <convertADC3data>
 80019a4:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
			sprintf(text, "%2u %20s: %7u    (%6u)\n\r", i, p_text, (int) result, sADC.adc3_data[i]);
 80019a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80019aa:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80019ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b2:	ee17 4a90 	vmov	r4, s15
 80019b6:	4910      	ldr	r1, [pc, #64]	@ (80019f8 <printADC3data+0x84>)
 80019b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80019ba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80019be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80019c2:	4638      	mov	r0, r7
 80019c4:	9301      	str	r3, [sp, #4]
 80019c6:	9400      	str	r4, [sp, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80019cc:	490b      	ldr	r1, [pc, #44]	@ (80019fc <printADC3data+0x88>)
 80019ce:	f00f ff41 	bl	8011854 <siprintf>
			printString(text);
 80019d2:	463b      	mov	r3, r7
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fec5 	bl	8000764 <printString>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 80019da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80019dc:	3301      	adds	r3, #1
 80019de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80019e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80019e2:	2b0a      	cmp	r3, #10
 80019e4:	ddd7      	ble.n	8001996 <printADC3data+0x22>
		}
	}
}
 80019e6:	bf00      	nop
 80019e8:	3774      	adds	r7, #116	@ 0x74
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd90      	pop	{r4, r7, pc}
 80019ee:	bf00      	nop
 80019f0:	24000000 	.word	0x24000000
 80019f4:	08013b34 	.word	0x08013b34
 80019f8:	2400032c 	.word	0x2400032c
 80019fc:	08013d10 	.word	0x08013d10

08001a00 <measureVoltagesTemperaturesADC3>:

// Measure voltages and temperatures using ADC3
// After the measurement is done the function doneMeasuringVoltagesTemperaturesADC3 is called
void measureVoltagesTemperaturesADC3(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	// This will start the measurement of voltages and temperatures using ADC3
	sADC.adc3_reading = 1; //Started to read ADC3
 8001a04:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <measureVoltagesTemperaturesADC3+0x1c>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c
	HAL_ADC_Start_DMA(&hadc3, (uint32_t *) sADC.adc3_data, ADC3_DMA_REQUESTS);
 8001a0c:	220b      	movs	r2, #11
 8001a0e:	4904      	ldr	r1, [pc, #16]	@ (8001a20 <measureVoltagesTemperaturesADC3+0x20>)
 8001a10:	4804      	ldr	r0, [pc, #16]	@ (8001a24 <measureVoltagesTemperaturesADC3+0x24>)
 8001a12:	f003 fb27 	bl	8005064 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2400032c 	.word	0x2400032c
 8001a20:	240007dc 	.word	0x240007dc
 8001a24:	24000b60 	.word	0x24000b60

08001a28 <doneMeasuringVoltagesTemperaturesADC3>:


// Done measuring voltages and temperatures
void doneMeasuringVoltagesTemperaturesADC3(uint32_t errorCode)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	sADC.adc3_reading = 0; //Done reading ADC3
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <doneMeasuringVoltagesTemperaturesADC3+0x38>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c

	if (errorCode == HAL_ADC_ERROR_NONE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d006      	beq.n	8001a4c <doneMeasuringVoltagesTemperaturesADC3+0x24>
		// TODO Check temperatures

	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	2201      	movs	r2, #1
 8001a44:	4619      	mov	r1, r3
 8001a46:	4807      	ldr	r0, [pc, #28]	@ (8001a64 <doneMeasuringVoltagesTemperaturesADC3+0x3c>)
 8001a48:	f7fe fece 	bl	80007e8 <printNumber>
	}


	//Start ADC1 and ADC2 measurements
	if (sFlashConfig.mode == RUN_MODE)
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <doneMeasuringVoltagesTemperaturesADC3+0x40>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <doneMeasuringVoltagesTemperaturesADC3+0x30>
		measureBridgePlasmaADC12();
 8001a54:	f7ff fcec 	bl	8001430 <measureBridgePlasmaADC12>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	2400032c 	.word	0x2400032c
 8001a64:	08013be0 	.word	0x08013be0
 8001a68:	24000a40 	.word	0x24000a40

08001a6c <GetNumber>:

// Get an integer number from UART3. If the number is valid, the function returns 1, otherwise 0.
static uint8_t GetNumber(int *number)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	@ 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	char input;
	char s_input[MAX_INPUT];
	int pos = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
	//Wait for user input
	HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001a78:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b3c <GetNumber+0xd0>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	482f      	ldr	r0, [pc, #188]	@ (8001b40 <GetNumber+0xd4>)
 8001a82:	f00d feb8 	bl	800f7f6 <HAL_UART_Receive>
	while (input != 13)
 8001a86:	e039      	b.n	8001afc <GetNumber+0x90>
	{
		// Backspace?
		if ((input == 127) && (pos > 0))
 8001a88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a8e:	d10e      	bne.n	8001aae <GetNumber+0x42>
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	dd0b      	ble.n	8001aae <GetNumber+0x42>
		{
			// Delete digit
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001a96:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4827      	ldr	r0, [pc, #156]	@ (8001b40 <GetNumber+0xd4>)
 8001aa2:	f00d fe1a 	bl	800f6da <HAL_UART_Transmit>
			pos--;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aac:	e018      	b.n	8001ae0 <GetNumber+0x74>
		}
		// A digit?
		else if ((input >= 48) && (input <=57))
 8001aae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ab2:	2b2f      	cmp	r3, #47	@ 0x2f
 8001ab4:	d914      	bls.n	8001ae0 <GetNumber+0x74>
 8001ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001aba:	2b39      	cmp	r3, #57	@ 0x39
 8001abc:	d810      	bhi.n	8001ae0 <GetNumber+0x74>
		{
			// Echo digit and store it
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001abe:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001ac2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	481d      	ldr	r0, [pc, #116]	@ (8001b40 <GetNumber+0xd4>)
 8001aca:	f00d fe06 	bl	800f6da <HAL_UART_Transmit>
			s_input[pos++] = input;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ad4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001ad8:	3328      	adds	r3, #40	@ 0x28
 8001ada:	443b      	add	r3, r7
 8001adc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		}

		// Get next character
		if (pos < MAX_INPUT-1)
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	2b12      	cmp	r3, #18
 8001ae4:	dc07      	bgt.n	8001af6 <GetNumber+0x8a>
		{
			HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001ae6:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001aea:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <GetNumber+0xd0>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	4814      	ldr	r0, [pc, #80]	@ (8001b40 <GetNumber+0xd4>)
 8001af0:	f00d fe81 	bl	800f7f6 <HAL_UART_Receive>
 8001af4:	e002      	b.n	8001afc <GetNumber+0x90>
		}
		else
		{
			input = 13; // Terminate while loop
 8001af6:	230d      	movs	r3, #13
 8001af8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	while (input != 13)
 8001afc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b00:	2b0d      	cmp	r3, #13
 8001b02:	d1c1      	bne.n	8001a88 <GetNumber+0x1c>
		}
	}
	s_input[pos] = 0;
 8001b04:	f107 020c 	add.w	r2, r7, #12
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	4413      	add	r3, r2
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
	if (pos > 0)
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	dd07      	ble.n	8001b26 <GetNumber+0xba>
		*number = atoi(s_input);
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f00f f8be 	bl	8010c9c <atoi>
 8001b20:	4602      	mov	r2, r0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	601a      	str	r2, [r3, #0]
	return(pos > 0);
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bfcc      	ite	gt
 8001b2c:	2301      	movgt	r3, #1
 8001b2e:	2300      	movle	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3728      	adds	r7, #40	@ 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	000186a0 	.word	0x000186a0
 8001b40:	24000e30 	.word	0x24000e30

08001b44 <GetUint16Input>:

// Get an 16bit unsigned number from UAR3 and validate the input againts min and max values
static uint8_t GetUint16Input(uint16_t *input, uint8_t bValidate, uint16_t min, uint16_t max)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b0a0      	sub	sp, #128	@ 0x80
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	4611      	mov	r1, r2
 8001b50:	461a      	mov	r2, r3
 8001b52:	4603      	mov	r3, r0
 8001b54:	72fb      	strb	r3, [r7, #11]
 8001b56:	460b      	mov	r3, r1
 8001b58:	813b      	strh	r3, [r7, #8]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	80fb      	strh	r3, [r7, #6]
	int number;
	char s_output[100];
	uint8_t result;

	result = GetNumber(&number);
 8001b5e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ff82 	bl	8001a6c <GetNumber>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (bValidate)
 8001b6e:	7afb      	ldrb	r3, [r7, #11]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d02f      	beq.n	8001bd4 <GetUint16Input+0x90>
	{
		if (result && (number >= min) && (number <= max))
 8001b74:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <GetUint16Input+0x60>
 8001b7c:	893a      	ldrh	r2, [r7, #8]
 8001b7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dc0f      	bgt.n	8001ba4 <GetUint16Input+0x60>
 8001b84:	88fa      	ldrh	r2, [r7, #6]
 8001b86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	db0b      	blt.n	8001ba4 <GetUint16Input+0x60>
		{
			*input =  number;
 8001b8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *) " - Ok\n\r", 7, 1000);
 8001b94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b98:	2207      	movs	r2, #7
 8001b9a:	4911      	ldr	r1, [pc, #68]	@ (8001be0 <GetUint16Input+0x9c>)
 8001b9c:	4811      	ldr	r0, [pc, #68]	@ (8001be4 <GetUint16Input+0xa0>)
 8001b9e:	f00d fd9c 	bl	800f6da <HAL_UART_Transmit>
 8001ba2:	e017      	b.n	8001bd4 <GetUint16Input+0x90>
		}
		else
		{
			result = 0; //Indicate failure
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			sprintf(s_output, " - Invalid number, valid range %u - %u\n\r", min, max);
 8001baa:	893a      	ldrh	r2, [r7, #8]
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	f107 0014 	add.w	r0, r7, #20
 8001bb2:	490d      	ldr	r1, [pc, #52]	@ (8001be8 <GetUint16Input+0xa4>)
 8001bb4:	f00f fe4e 	bl	8011854 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fbf7 	bl	80003b0 <strlen>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	f107 0114 	add.w	r1, r7, #20
 8001bca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bce:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <GetUint16Input+0xa0>)
 8001bd0:	f00d fd83 	bl	800f6da <HAL_UART_Transmit>
		}
	}
	return(result);
 8001bd4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3780      	adds	r7, #128	@ 0x80
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	08013d2c 	.word	0x08013d2c
 8001be4:	24000e30 	.word	0x24000e30
 8001be8:	08013d34 	.word	0x08013d34

08001bec <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8001c34 <HAL_ADC_ErrorCallback+0x48>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d108      	bne.n	8001c10 <HAL_ADC_ErrorCallback+0x24>
	{
		printNumber("** ERROR ** ADC12 Error Code: ", hadc->ErrorCode, 1);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	2201      	movs	r2, #1
 8001c06:	4619      	mov	r1, r3
 8001c08:	480b      	ldr	r0, [pc, #44]	@ (8001c38 <HAL_ADC_ErrorCallback+0x4c>)
 8001c0a:	f7fe fded 	bl	80007e8 <printNumber>
	}
	else if ((hadc->Instance == ADC3))
	{
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
	}
}
 8001c0e:	e00c      	b.n	8001c2a <HAL_ADC_ErrorCallback+0x3e>
	else if ((hadc->Instance == ADC3))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a09      	ldr	r2, [pc, #36]	@ (8001c3c <HAL_ADC_ErrorCallback+0x50>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d107      	bne.n	8001c2a <HAL_ADC_ErrorCallback+0x3e>
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	2201      	movs	r2, #1
 8001c22:	4619      	mov	r1, r3
 8001c24:	4806      	ldr	r0, [pc, #24]	@ (8001c40 <HAL_ADC_ErrorCallback+0x54>)
 8001c26:	f7fe fddf 	bl	80007e8 <printNumber>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40022000 	.word	0x40022000
 8001c38:	08013d60 	.word	0x08013d60
 8001c3c:	58026000 	.word	0x58026000
 8001c40:	08013d80 	.word	0x08013d80

08001c44 <HAL_ADC_ConvCpltCallback>:

// ADC conversion and DMA transfer complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a10      	ldr	r2, [pc, #64]	@ (8001c94 <HAL_ADC_ConvCpltCallback+0x50>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d105      	bne.n	8001c62 <HAL_ADC_ConvCpltCallback+0x1e>
	{
		//HAL_ADCEx_MultiModeStop_DMA(&hadc1);
		doneMeasuringBridgePlasmaADC12(hadc->ErrorCode);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fc42 	bl	80014e4 <doneMeasuringBridgePlasmaADC12>
	else
	{
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
		printCR();
	}
}
 8001c60:	e013      	b.n	8001c8a <HAL_ADC_ConvCpltCallback+0x46>
	else if (hadc->Instance == ADC3)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a0c      	ldr	r2, [pc, #48]	@ (8001c98 <HAL_ADC_ConvCpltCallback+0x54>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d105      	bne.n	8001c78 <HAL_ADC_ConvCpltCallback+0x34>
		doneMeasuringVoltagesTemperaturesADC3(hadc->ErrorCode);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fed9 	bl	8001a28 <doneMeasuringVoltagesTemperaturesADC3>
}
 8001c76:	e008      	b.n	8001c8a <HAL_ADC_ConvCpltCallback+0x46>
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
 8001c78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c7c:	2219      	movs	r2, #25
 8001c7e:	4907      	ldr	r1, [pc, #28]	@ (8001c9c <HAL_ADC_ConvCpltCallback+0x58>)
 8001c80:	4807      	ldr	r0, [pc, #28]	@ (8001ca0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001c82:	f00d fd2a 	bl	800f6da <HAL_UART_Transmit>
		printCR();
 8001c86:	f7fe fd5d 	bl	8000744 <printCR>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40022000 	.word	0x40022000
 8001c98:	58026000 	.word	0x58026000
 8001c9c:	08013da0 	.word	0x08013da0
 8001ca0:	24000e30 	.word	0x24000e30

08001ca4 <PowerOffLowSupplies>:

//Power Off Supplies in order3.3V switch and 15V
void PowerOffLowSupplies(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	if (powerStatus == V500_OFF)
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce0 <PowerOffLowSupplies+0x3c>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d110      	bne.n	8001cd2 <PowerOffLowSupplies+0x2e>
	{
		//Power off 3.3V switch voltage
		HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	480b      	ldr	r0, [pc, #44]	@ (8001ce4 <PowerOffLowSupplies+0x40>)
 8001cb6:	f008 fd8d 	bl	800a7d4 <HAL_GPIO_WritePin>
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f002 fb54 	bl	8004368 <HAL_Delay>

		//Power off 15V
		HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_SET);		//There is an inverter between MCU and the output, thus SET
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	4807      	ldr	r0, [pc, #28]	@ (8001ce4 <PowerOffLowSupplies+0x40>)
 8001cc6:	f008 fd85 	bl	800a7d4 <HAL_GPIO_WritePin>
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f002 fb4c 	bl	8004368 <HAL_Delay>
	else
	{
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
		printCR();
	}
}
 8001cd0:	e004      	b.n	8001cdc <PowerOffLowSupplies+0x38>
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
 8001cd2:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <PowerOffLowSupplies+0x44>)
 8001cd4:	f7fe fd46 	bl	8000764 <printString>
		printCR();
 8001cd8:	f7fe fd34 	bl	8000744 <printCR>
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	24000a3c 	.word	0x24000a3c
 8001ce4:	58020c00 	.word	0x58020c00
 8001ce8:	08013dbc 	.word	0x08013dbc

08001cec <PowerOffHighSupplies>:


//Power Off Supply 500V
void PowerOffHighSupplies(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
	//Make sure the H-bridge outputs are zero before turning off power
	stopHbridge();
 8001cf0:	f7fe fe08 	bl	8000904 <stopHbridge>

	//Power off 500V
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_SET);	//There is an inverter between MCU and the output, thus SET
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	480b      	ldr	r0, [pc, #44]	@ (8001d28 <PowerOffHighSupplies+0x3c>)
 8001cfa:	f008 fd6b 	bl	800a7d4 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f002 fb32 	bl	8004368 <HAL_Delay>

	//Disable Line Drive 1
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_SET);
 8001d04:	2201      	movs	r2, #1
 8001d06:	2104      	movs	r1, #4
 8001d08:	4808      	ldr	r0, [pc, #32]	@ (8001d2c <PowerOffHighSupplies+0x40>)
 8001d0a:	f008 fd63 	bl	800a7d4 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f002 fb2a 	bl	8004368 <HAL_Delay>

	//Signal to robot controller all power supplies are inactive.
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);			//There is an inverter between MCU and the output, thus SET
 8001d14:	2201      	movs	r2, #1
 8001d16:	2101      	movs	r1, #1
 8001d18:	4805      	ldr	r0, [pc, #20]	@ (8001d30 <PowerOffHighSupplies+0x44>)
 8001d1a:	f008 fd5b 	bl	800a7d4 <HAL_GPIO_WritePin>

	powerStatus = V500_OFF;
 8001d1e:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <PowerOffHighSupplies+0x48>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	801a      	strh	r2, [r3, #0]
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	58021800 	.word	0x58021800
 8001d2c:	58020400 	.word	0x58020400
 8001d30:	58021000 	.word	0x58021000
 8001d34:	24000a3c 	.word	0x24000a3c

08001d38 <PowerOffSupplies>:

void PowerOffSupplies(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	PowerOffHighSupplies();
 8001d3c:	f7ff ffd6 	bl	8001cec <PowerOffHighSupplies>
	PowerOffLowSupplies();
 8001d40:	f7ff ffb0 	bl	8001ca4 <PowerOffLowSupplies>
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <PowerOnLowSupplies>:

//Power On Supplies in order 15V, 3.3V switch
//Returns 1 if the power up sequence was successful, and 0 if it failed
int PowerOnLowSupplies(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	//Power on 15V
	//printString("\n\rPower on 15V - ");
	HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2102      	movs	r1, #2
 8001d50:	4818      	ldr	r0, [pc, #96]	@ (8001db4 <PowerOnLowSupplies+0x6c>)
 8001d52:	f008 fd3f 	bl	800a7d4 <HAL_GPIO_WritePin>
	printString("\n\rPower on 15V - ");
 8001d56:	4818      	ldr	r0, [pc, #96]	@ (8001db8 <PowerOnLowSupplies+0x70>)
 8001d58:	f7fe fd04 	bl	8000764 <printString>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f002 fb03 	bl	8004368 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8001d62:	f7ff fe4d 	bl	8001a00 <measureVoltagesTemperaturesADC3>
	//Wait until ADC3 reading is done
	while (sADC.adc3_reading) ;
 8001d66:	bf00      	nop
 8001d68:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <PowerOnLowSupplies+0x74>)
 8001d6a:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f9      	bne.n	8001d68 <PowerOnLowSupplies+0x20>

	//Check 15V voltage
	if (sADC.adc3_data[ADC3_15V] >= sADC3threshold[ADC3_15V])
 8001d74:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <PowerOnLowSupplies+0x74>)
 8001d76:	f8b3 24b2 	ldrh.w	r2, [r3, #1202]	@ 0x4b2
 8001d7a:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <PowerOnLowSupplies+0x78>)
 8001d7c:	885b      	ldrh	r3, [r3, #2]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d30f      	bcc.n	8001da2 <PowerOnLowSupplies+0x5a>
		printString("Ok");
 8001d82:	4810      	ldr	r0, [pc, #64]	@ (8001dc4 <PowerOnLowSupplies+0x7c>)
 8001d84:	f7fe fcee 	bl	8000764 <printString>
		PowerOffLowSupplies();
		return(0);
	}

	//Power on 3.3V switch voltage
	printString("\n\rPower on 3.3V switch");
 8001d88:	480f      	ldr	r0, [pc, #60]	@ (8001dc8 <PowerOnLowSupplies+0x80>)
 8001d8a:	f7fe fceb 	bl	8000764 <printString>
	HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2101      	movs	r1, #1
 8001d92:	4808      	ldr	r0, [pc, #32]	@ (8001db4 <PowerOnLowSupplies+0x6c>)
 8001d94:	f008 fd1e 	bl	800a7d4 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f002 fae5 	bl	8004368 <HAL_Delay>

	return(1);
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e005      	b.n	8001dae <PowerOnLowSupplies+0x66>
		printString("Fail");
 8001da2:	480a      	ldr	r0, [pc, #40]	@ (8001dcc <PowerOnLowSupplies+0x84>)
 8001da4:	f7fe fcde 	bl	8000764 <printString>
		PowerOffLowSupplies();
 8001da8:	f7ff ff7c 	bl	8001ca4 <PowerOffLowSupplies>
		return(0);
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	58020c00 	.word	0x58020c00
 8001db8:	08013dec 	.word	0x08013dec
 8001dbc:	2400032c 	.word	0x2400032c
 8001dc0:	24000004 	.word	0x24000004
 8001dc4:	08013e00 	.word	0x08013e00
 8001dc8:	08013e0c 	.word	0x08013e0c
 8001dcc:	08013e04 	.word	0x08013e04

08001dd0 <PowerOnHighSupplies>:

//Power On Supply 500V
//Returns 1 if the power up was successful, and 0 if it failed
int PowerOnHighSupplies(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	stopHbridge(); 	//Make sure the H-bridge outputs are zero before enabling the line driver
 8001dd4:	f7fe fd96 	bl	8000904 <stopHbridge>

	//Enable Line Drive 1
	printString("\n\rEnable Line Drive 1");
 8001dd8:	481b      	ldr	r0, [pc, #108]	@ (8001e48 <PowerOnHighSupplies+0x78>)
 8001dda:	f7fe fcc3 	bl	8000764 <printString>
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2104      	movs	r1, #4
 8001de2:	481a      	ldr	r0, [pc, #104]	@ (8001e4c <PowerOnHighSupplies+0x7c>)
 8001de4:	f008 fcf6 	bl	800a7d4 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001de8:	2001      	movs	r0, #1
 8001dea:	f002 fabd 	bl	8004368 <HAL_Delay>

	//Power on 500V
	printString("\n\rPower on 500V - ");
 8001dee:	4818      	ldr	r0, [pc, #96]	@ (8001e50 <PowerOnHighSupplies+0x80>)
 8001df0:	f7fe fcb8 	bl	8000764 <printString>
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001df4:	2200      	movs	r2, #0
 8001df6:	2101      	movs	r1, #1
 8001df8:	4816      	ldr	r0, [pc, #88]	@ (8001e54 <PowerOnHighSupplies+0x84>)
 8001dfa:	f008 fceb 	bl	800a7d4 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f002 fab2 	bl	8004368 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8001e04:	f7ff fdfc 	bl	8001a00 <measureVoltagesTemperaturesADC3>
	//Wait until ADC reading is done
	while (sADC.adc3_reading) ;
 8001e08:	bf00      	nop
 8001e0a:	4b13      	ldr	r3, [pc, #76]	@ (8001e58 <PowerOnHighSupplies+0x88>)
 8001e0c:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f9      	bne.n	8001e0a <PowerOnHighSupplies+0x3a>

	//Check 500V voltage
	if (sADC.adc3_data[ADC3_500VDC] >= sADC3threshold[ADC3_500VDC])
 8001e16:	4b10      	ldr	r3, [pc, #64]	@ (8001e58 <PowerOnHighSupplies+0x88>)
 8001e18:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	@ 0x4ba
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <PowerOnHighSupplies+0x8c>)
 8001e1e:	895b      	ldrh	r3, [r3, #10]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d303      	bcc.n	8001e2c <PowerOnHighSupplies+0x5c>
		printString("Ok");
 8001e24:	480e      	ldr	r0, [pc, #56]	@ (8001e60 <PowerOnHighSupplies+0x90>)
 8001e26:	f7fe fc9d 	bl	8000764 <printString>
 8001e2a:	e002      	b.n	8001e32 <PowerOnHighSupplies+0x62>
	else
	{
		//printString("Fail");
		printString("debug");
 8001e2c:	480d      	ldr	r0, [pc, #52]	@ (8001e64 <PowerOnHighSupplies+0x94>)
 8001e2e:	f7fe fc99 	bl	8000764 <printString>
		//PowerOffHighSupplies();
		//return(0);
	}

	//Signal to robot controller all power supplies are active
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001e32:	2200      	movs	r2, #0
 8001e34:	2101      	movs	r1, #1
 8001e36:	480c      	ldr	r0, [pc, #48]	@ (8001e68 <PowerOnHighSupplies+0x98>)
 8001e38:	f008 fccc 	bl	800a7d4 <HAL_GPIO_WritePin>

	powerStatus = V500_ON;
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <PowerOnHighSupplies+0x9c>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	801a      	strh	r2, [r3, #0]

	return(1);
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	08013e24 	.word	0x08013e24
 8001e4c:	58020400 	.word	0x58020400
 8001e50:	08013e3c 	.word	0x08013e3c
 8001e54:	58021800 	.word	0x58021800
 8001e58:	2400032c 	.word	0x2400032c
 8001e5c:	24000004 	.word	0x24000004
 8001e60:	08013e00 	.word	0x08013e00
 8001e64:	08013e50 	.word	0x08013e50
 8001e68:	58021000 	.word	0x58021000
 8001e6c:	24000a3c 	.word	0x24000a3c

08001e70 <HAL_GPIO_EXTI_Callback>:

// GPIO interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	80fb      	strh	r3, [r7, #6]
	if (sFlashConfig.mode == RUN_MODE)
 8001e7a:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <HAL_GPIO_EXTI_Callback+0x28>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d105      	bne.n	8001e8e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		// Power off request received
		if(GPIO_Pin == POWER_OFF_IRQ_Pin)
 8001e82:	88fb      	ldrh	r3, [r7, #6]
 8001e84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e88:	d101      	bne.n	8001e8e <HAL_GPIO_EXTI_Callback+0x1e>
			PowerOffSupplies();
 8001e8a:	f7ff ff55 	bl	8001d38 <PowerOffSupplies>
	}
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	24000a40 	.word	0x24000a40

08001e9c <InitializeConfigMenu>:

// Initialize the UART3 configuration menu
static void InitializeConfigMenu(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
	int item = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]

	config_menu[item++] = "\n\rPlasma Driver Configuration Menu";
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee0 <InitializeConfigMenu+0x44>)
 8001eae:	490d      	ldr	r1, [pc, #52]	@ (8001ee4 <InitializeConfigMenu+0x48>)
 8001eb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	config_menu[item++] = "   m: Change mode (Test/Run)";
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	4a09      	ldr	r2, [pc, #36]	@ (8001ee0 <InitializeConfigMenu+0x44>)
 8001ebc:	490a      	ldr	r1, [pc, #40]	@ (8001ee8 <InitializeConfigMenu+0x4c>)
 8001ebe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (item > CONFIG_MENU_SIZE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	dd06      	ble.n	8001ed6 <InitializeConfigMenu+0x3a>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease CONFIG_MENU_SIZE", 20, 1000);
 8001ec8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ecc:	2214      	movs	r2, #20
 8001ece:	4907      	ldr	r1, [pc, #28]	@ (8001eec <InitializeConfigMenu+0x50>)
 8001ed0:	4807      	ldr	r0, [pc, #28]	@ (8001ef0 <InitializeConfigMenu+0x54>)
 8001ed2:	f00d fc02 	bl	800f6da <HAL_UART_Transmit>

}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	24000324 	.word	0x24000324
 8001ee4:	08013e58 	.word	0x08013e58
 8001ee8:	08013e7c 	.word	0x08013e7c
 8001eec:	08013e9c 	.word	0x08013e9c
 8001ef0:	24000e30 	.word	0x24000e30

08001ef4 <InitializeMenu>:

// Initialize the UART3 menu
static void InitializeMenu(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
	int item = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]

	//Clear previous menu
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8001efe:	2300      	movs	r3, #0
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	e007      	b.n	8001f14 <InitializeMenu+0x20>
	{
		menu[i] = "";
 8001f04:	4a4b      	ldr	r2, [pc, #300]	@ (8002034 <InitializeMenu+0x140>)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	494b      	ldr	r1, [pc, #300]	@ (8002038 <InitializeMenu+0x144>)
 8001f0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	3301      	adds	r3, #1
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	2b0c      	cmp	r3, #12
 8001f18:	ddf4      	ble.n	8001f04 <InitializeMenu+0x10>
	}

	if (sFlashConfig.mode == TEST_MODE)
 8001f1a:	4b48      	ldr	r3, [pc, #288]	@ (800203c <InitializeMenu+0x148>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d15b      	bne.n	8001fda <InitializeMenu+0xe6>
	{
		menu[item++] = "\n\rPlasma Driver TEST Menu";
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	4a42      	ldr	r2, [pc, #264]	@ (8002034 <InitializeMenu+0x140>)
 8001f2a:	4945      	ldr	r1, [pc, #276]	@ (8002040 <InitializeMenu+0x14c>)
 8001f2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   p: Power on supplies";
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	4a3f      	ldr	r2, [pc, #252]	@ (8002034 <InitializeMenu+0x140>)
 8001f38:	4942      	ldr	r1, [pc, #264]	@ (8002044 <InitializeMenu+0x150>)
 8001f3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   o: Power off supplies";
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	4a3b      	ldr	r2, [pc, #236]	@ (8002034 <InitializeMenu+0x140>)
 8001f46:	4940      	ldr	r1, [pc, #256]	@ (8002048 <InitializeMenu+0x154>)
 8001f48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   s: Start/stop driving H-Bridge";
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	4a38      	ldr	r2, [pc, #224]	@ (8002034 <InitializeMenu+0x140>)
 8001f54:	493d      	ldr	r1, [pc, #244]	@ (800204c <InitializeMenu+0x158>)
 8001f56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   f: Set H-bridge frequency (Hz)";
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	4a34      	ldr	r2, [pc, #208]	@ (8002034 <InitializeMenu+0x140>)
 8001f62:	493b      	ldr	r1, [pc, #236]	@ (8002050 <InitializeMenu+0x15c>)
 8001f64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   d: Set H-bridge dead time (%)";
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	4a31      	ldr	r2, [pc, #196]	@ (8002034 <InitializeMenu+0x140>)
 8001f70:	4938      	ldr	r1, [pc, #224]	@ (8002054 <InitializeMenu+0x160>)
 8001f72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   a: Start ADC1 and ADC2 measurement";
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	4a2d      	ldr	r2, [pc, #180]	@ (8002034 <InitializeMenu+0x140>)
 8001f7e:	4936      	ldr	r1, [pc, #216]	@ (8002058 <InitializeMenu+0x164>)
 8001f80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   b: Start ADC3 measurement";
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8002034 <InitializeMenu+0x140>)
 8001f8c:	4933      	ldr	r1, [pc, #204]	@ (800205c <InitializeMenu+0x168>)
 8001f8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   q: Frequency correction";
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	4a26      	ldr	r2, [pc, #152]	@ (8002034 <InitializeMenu+0x140>)
 8001f9a:	4931      	ldr	r1, [pc, #196]	@ (8002060 <InitializeMenu+0x16c>)
 8001f9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   z: Debug output (On/Off)";
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	4a23      	ldr	r2, [pc, #140]	@ (8002034 <InitializeMenu+0x140>)
 8001fa8:	492e      	ldr	r1, [pc, #184]	@ (8002064 <InitializeMenu+0x170>)
 8001faa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change configuration";
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002034 <InitializeMenu+0x140>)
 8001fb6:	492c      	ldr	r1, [pc, #176]	@ (8002068 <InitializeMenu+0x174>)
 8001fb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   t: Test GPIO";
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8002034 <InitializeMenu+0x140>)
 8001fc4:	4929      	ldr	r1, [pc, #164]	@ (800206c <InitializeMenu+0x178>)
 8001fc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   y: Auto Frequency Adjustment";
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	4a18      	ldr	r2, [pc, #96]	@ (8002034 <InitializeMenu+0x140>)
 8001fd2:	4927      	ldr	r1, [pc, #156]	@ (8002070 <InitializeMenu+0x17c>)
 8001fd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001fd8:	e019      	b.n	800200e <InitializeMenu+0x11a>
	}
	else if ((sFlashConfig.mode == RUN_MODE))
 8001fda:	4b18      	ldr	r3, [pc, #96]	@ (800203c <InitializeMenu+0x148>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d10e      	bne.n	8002000 <InitializeMenu+0x10c>
	{
		menu[item++] = "\n\rPlasma Driver RUN Menu";
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	4a12      	ldr	r2, [pc, #72]	@ (8002034 <InitializeMenu+0x140>)
 8001fea:	4922      	ldr	r1, [pc, #136]	@ (8002074 <InitializeMenu+0x180>)
 8001fec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change current configuration";
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8002034 <InitializeMenu+0x140>)
 8001ff8:	491f      	ldr	r1, [pc, #124]	@ (8002078 <InitializeMenu+0x184>)
 8001ffa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001ffe:	e006      	b.n	800200e <InitializeMenu+0x11a>
	}
	else
	{
		menu[item++] = "\n\rERROR SETTING UP MENU";
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	4a0b      	ldr	r2, [pc, #44]	@ (8002034 <InitializeMenu+0x140>)
 8002008:	491c      	ldr	r1, [pc, #112]	@ (800207c <InitializeMenu+0x188>)
 800200a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	menu_size = item;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	b29a      	uxth	r2, r3
 8002012:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <InitializeMenu+0x18c>)
 8002014:	801a      	strh	r2, [r3, #0]

	if (menu_size> MAX_MENU_SIZE)
 8002016:	4b1a      	ldr	r3, [pc, #104]	@ (8002080 <InitializeMenu+0x18c>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	2b0d      	cmp	r3, #13
 800201c:	d906      	bls.n	800202c <InitializeMenu+0x138>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease MENU_SIZE", 20, 1000);
 800201e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002022:	2214      	movs	r2, #20
 8002024:	4917      	ldr	r1, [pc, #92]	@ (8002084 <InitializeMenu+0x190>)
 8002026:	4818      	ldr	r0, [pc, #96]	@ (8002088 <InitializeMenu+0x194>)
 8002028:	f00d fb57 	bl	800f6da <HAL_UART_Transmit>

}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	240002ec 	.word	0x240002ec
 8002038:	08013eb8 	.word	0x08013eb8
 800203c:	24000a40 	.word	0x24000a40
 8002040:	08013ebc 	.word	0x08013ebc
 8002044:	08013ed8 	.word	0x08013ed8
 8002048:	08013ef0 	.word	0x08013ef0
 800204c:	08013f0c 	.word	0x08013f0c
 8002050:	08013f30 	.word	0x08013f30
 8002054:	08013f54 	.word	0x08013f54
 8002058:	08013f78 	.word	0x08013f78
 800205c:	08013fa0 	.word	0x08013fa0
 8002060:	08013fc0 	.word	0x08013fc0
 8002064:	08013fdc 	.word	0x08013fdc
 8002068:	08013ff8 	.word	0x08013ff8
 800206c:	08014018 	.word	0x08014018
 8002070:	08014028 	.word	0x08014028
 8002074:	08014048 	.word	0x08014048
 8002078:	08014064 	.word	0x08014064
 800207c:	0801408c 	.word	0x0801408c
 8002080:	24000320 	.word	0x24000320
 8002084:	080140a4 	.word	0x080140a4
 8002088:	24000e30 	.word	0x24000e30

0800208c <ShowChangeConfigFlash>:

// Show configuration. Add option to change configuration
void ShowChangeConfigFlash(void)
{
 800208c:	b590      	push	{r4, r7, lr}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
	uint16_t aYes;
	uint16_t mode;
	char input;

	printConfigFlash();
 8002092:	f7fe fb7d 	bl	8000790 <printConfigFlash>
	printString("\n\rChange configuration (0:No 1:Yes)? ");
 8002096:	482e      	ldr	r0, [pc, #184]	@ (8002150 <ShowChangeConfigFlash+0xc4>)
 8002098:	f7fe fb64 	bl	8000764 <printString>
	if (GetUint16Input(&aYes, 1, 0, 1))
 800209c:	f107 000a 	add.w	r0, r7, #10
 80020a0:	2301      	movs	r3, #1
 80020a2:	2200      	movs	r2, #0
 80020a4:	2101      	movs	r1, #1
 80020a6:	f7ff fd4d 	bl	8001b44 <GetUint16Input>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d04b      	beq.n	8002148 <ShowChangeConfigFlash+0xbc>
	{
		if (aYes)
 80020b0:	897b      	ldrh	r3, [r7, #10]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d048      	beq.n	8002148 <ShowChangeConfigFlash+0xbc>
		{
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	e017      	b.n	80020ec <ShowChangeConfigFlash+0x60>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) config_menu[i], strlen(config_menu[i]), 1000);
 80020bc:	4a25      	ldr	r2, [pc, #148]	@ (8002154 <ShowChangeConfigFlash+0xc8>)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80020c4:	4a23      	ldr	r2, [pc, #140]	@ (8002154 <ShowChangeConfigFlash+0xc8>)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe f96f 	bl	80003b0 <strlen>
 80020d2:	4603      	mov	r3, r0
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020da:	4621      	mov	r1, r4
 80020dc:	481e      	ldr	r0, [pc, #120]	@ (8002158 <ShowChangeConfigFlash+0xcc>)
 80020de:	f00d fafc 	bl	800f6da <HAL_UART_Transmit>
				printCR();
 80020e2:	f7fe fb2f 	bl	8000744 <printCR>
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	3301      	adds	r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	dde4      	ble.n	80020bc <ShowChangeConfigFlash+0x30>
			}
			printCR();
 80020f2:	f7fe fb27 	bl	8000744 <printCR>

			//Wait for user input
			if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 60000) == HAL_OK)
 80020f6:	1df9      	adds	r1, r7, #7
 80020f8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80020fc:	2201      	movs	r2, #1
 80020fe:	4816      	ldr	r0, [pc, #88]	@ (8002158 <ShowChangeConfigFlash+0xcc>)
 8002100:	f00d fb79 	bl	800f7f6 <HAL_UART_Receive>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d11e      	bne.n	8002148 <ShowChangeConfigFlash+0xbc>
			{
				switch (input)
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	2b6d      	cmp	r3, #109	@ 0x6d
 800210e:	d11b      	bne.n	8002148 <ShowChangeConfigFlash+0xbc>
				{
					case 'm': //Change mode
						printString("\n\rChange mode (0:Test 1:Run)? ");
 8002110:	4812      	ldr	r0, [pc, #72]	@ (800215c <ShowChangeConfigFlash+0xd0>)
 8002112:	f7fe fb27 	bl	8000764 <printString>
						if (GetUint16Input(&mode, 1, 0, 1))
 8002116:	f107 0008 	add.w	r0, r7, #8
 800211a:	2301      	movs	r3, #1
 800211c:	2200      	movs	r2, #0
 800211e:	2101      	movs	r1, #1
 8002120:	f7ff fd10 	bl	8001b44 <GetUint16Input>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00d      	beq.n	8002146 <ShowChangeConfigFlash+0xba>
						{   // Data entry valid
							if (sFlashConfig.mode != mode)
 800212a:	4b0d      	ldr	r3, [pc, #52]	@ (8002160 <ShowChangeConfigFlash+0xd4>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	893b      	ldrh	r3, [r7, #8]
 8002132:	429a      	cmp	r2, r3
 8002134:	d007      	beq.n	8002146 <ShowChangeConfigFlash+0xba>
							{
								sFlashConfig.mode = mode;
 8002136:	893b      	ldrh	r3, [r7, #8]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <ShowChangeConfigFlash+0xd4>)
 800213c:	701a      	strb	r2, [r3, #0]
								InitializeMenu();
 800213e:	f7ff fed9 	bl	8001ef4 <InitializeMenu>
								writeConfigFlash();
 8002142:	f7fe fab5 	bl	80006b0 <writeConfigFlash>
							}
						}
					break;
 8002146:	bf00      	nop
				}
			}
		}
	}
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	bd90      	pop	{r4, r7, pc}
 8002150:	080140bc 	.word	0x080140bc
 8002154:	24000324 	.word	0x24000324
 8002158:	24000e30 	.word	0x24000e30
 800215c:	080140e4 	.word	0x080140e4
 8002160:	24000a40 	.word	0x24000a40

08002164 <testGPIO>:

//Test GPIO settings
void testGPIO(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

		printString("\n\rClear LED_GREEN");
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		GetUint16Input(&aYes, 1, 0, 1);
*/
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <RunModeAction>:

// Action table for the run mode menu
static void RunModeAction(char input)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	71fb      	strb	r3, [r7, #7]
	switch (input)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	2b63      	cmp	r3, #99	@ 0x63
 8002180:	d102      	bne.n	8002188 <RunModeAction+0x16>
	{
		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 8002182:	f7ff ff83 	bl	800208c <ShowChangeConfigFlash>
			break;
 8002186:	bf00      	nop
	}
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <TestModeAction>:

// Action table for the test mode menu
static void TestModeAction(char input)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b09c      	sub	sp, #112	@ 0x70
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
	switch (input)
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	3b61      	subs	r3, #97	@ 0x61
 800219e:	2b19      	cmp	r3, #25
 80021a0:	f200 80e6 	bhi.w	8002370 <TestModeAction+0x1e0>
 80021a4:	a201      	add	r2, pc, #4	@ (adr r2, 80021ac <TestModeAction+0x1c>)
 80021a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021aa:	bf00      	nop
 80021ac:	0800224b 	.word	0x0800224b
 80021b0:	08002273 	.word	0x08002273
 80021b4:	08002351 	.word	0x08002351
 80021b8:	080022b5 	.word	0x080022b5
 80021bc:	08002371 	.word	0x08002371
 80021c0:	0800228b 	.word	0x0800228b
 80021c4:	08002371 	.word	0x08002371
 80021c8:	08002371 	.word	0x08002371
 80021cc:	08002371 	.word	0x08002371
 80021d0:	08002371 	.word	0x08002371
 80021d4:	08002371 	.word	0x08002371
 80021d8:	08002371 	.word	0x08002371
 80021dc:	08002371 	.word	0x08002371
 80021e0:	08002371 	.word	0x08002371
 80021e4:	0800223f 	.word	0x0800223f
 80021e8:	08002215 	.word	0x08002215
 80021ec:	08002301 	.word	0x08002301
 80021f0:	08002371 	.word	0x08002371
 80021f4:	080022db 	.word	0x080022db
 80021f8:	08002357 	.word	0x08002357
 80021fc:	08002371 	.word	0x08002371
 8002200:	08002371 	.word	0x08002371
 8002204:	08002371 	.word	0x08002371
 8002208:	08002371 	.word	0x08002371
 800220c:	0800235d 	.word	0x0800235d
 8002210:	0800232f 	.word	0x0800232f
	{
		case 'p': //Power supplies on
			if (powerStatus == V500_OFF)
 8002214:	4b58      	ldr	r3, [pc, #352]	@ (8002378 <TestModeAction+0x1e8>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10c      	bne.n	8002236 <TestModeAction+0xa6>
			{
				if (PowerOnHighSupplies() == POWERON_FAILED)
 800221c:	f7ff fdd8 	bl	8001dd0 <PowerOnHighSupplies>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d103      	bne.n	800222e <TestModeAction+0x9e>
				{
					printString("\n\rPower on failed\n\r");
 8002226:	4855      	ldr	r0, [pc, #340]	@ (800237c <TestModeAction+0x1ec>)
 8002228:	f7fe fa9c 	bl	8000764 <printString>
			}
			else
			{
				printString("\n\rPower supplies are on\n\r");
			}
			break;
 800222c:	e0a0      	b.n	8002370 <TestModeAction+0x1e0>
					printString("\n\rPower on succeeded\n\r");
 800222e:	4854      	ldr	r0, [pc, #336]	@ (8002380 <TestModeAction+0x1f0>)
 8002230:	f7fe fa98 	bl	8000764 <printString>
			break;
 8002234:	e09c      	b.n	8002370 <TestModeAction+0x1e0>
				printString("\n\rPower supplies are on\n\r");
 8002236:	4853      	ldr	r0, [pc, #332]	@ (8002384 <TestModeAction+0x1f4>)
 8002238:	f7fe fa94 	bl	8000764 <printString>
			break;
 800223c:	e098      	b.n	8002370 <TestModeAction+0x1e0>

		case 'o': //Power supplies off
			printString("\n\rPower off supplies\n\r");
 800223e:	4852      	ldr	r0, [pc, #328]	@ (8002388 <TestModeAction+0x1f8>)
 8002240:	f7fe fa90 	bl	8000764 <printString>
			PowerOffHighSupplies();
 8002244:	f7ff fd52 	bl	8001cec <PowerOffHighSupplies>
			break;
 8002248:	e092      	b.n	8002370 <TestModeAction+0x1e0>

		case 'a': //Start ADC1 and ADC2 analog voltage measurement
			if (sHbridge.on)
 800224a:	4b50      	ldr	r3, [pc, #320]	@ (800238c <TestModeAction+0x1fc>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <TestModeAction+0xda>
			{
				//Setup to read ADC1 and ADC2 channels
				//Reading will start at TIM1 CH1 0->1 interrupt
				measureBridgePlasmaADC12();
 8002252:	f7ff f8ed 	bl	8001430 <measureBridgePlasmaADC12>
				//Wait until ADC3 reading is done
				while (sADC.adc12_reading) ;
 8002256:	bf00      	nop
 8002258:	4b4d      	ldr	r3, [pc, #308]	@ (8002390 <TestModeAction+0x200>)
 800225a:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 800225e:	b29b      	uxth	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f9      	bne.n	8002258 <TestModeAction+0xc8>
				//Print ADC3 data on UART3
				printADC12data();
 8002264:	f7fe fed4 	bl	8001010 <printADC12data>
			}
			else
			{
				printString("\n\r ---- H-Bridge needs to be on");
			}
			break;
 8002268:	e082      	b.n	8002370 <TestModeAction+0x1e0>
				printString("\n\r ---- H-Bridge needs to be on");
 800226a:	484a      	ldr	r0, [pc, #296]	@ (8002394 <TestModeAction+0x204>)
 800226c:	f7fe fa7a 	bl	8000764 <printString>
			break;
 8002270:	e07e      	b.n	8002370 <TestModeAction+0x1e0>

		case 'b': //Start ADC3 analog voltage measurement
				//Start reading ADC3 channels
				measureVoltagesTemperaturesADC3();
 8002272:	f7ff fbc5 	bl	8001a00 <measureVoltagesTemperaturesADC3>
				//Wait until ADC3 reading is done
				while (sADC.adc3_reading) ;
 8002276:	bf00      	nop
 8002278:	4b45      	ldr	r3, [pc, #276]	@ (8002390 <TestModeAction+0x200>)
 800227a:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 800227e:	b29b      	uxth	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f9      	bne.n	8002278 <TestModeAction+0xe8>
				//Print ADC3 data on UART3
				printADC3data();
 8002284:	f7ff fb76 	bl	8001974 <printADC3data>
			break;
 8002288:	e072      	b.n	8002370 <TestModeAction+0x1e0>

		case 'f': //Enter frequency (Hz)
			printHbridgeData();
 800228a:	f7fe fb69 	bl	8000960 <printHbridgeData>
			printString("\n\rEnter frequency (Hz): ");
 800228e:	4842      	ldr	r0, [pc, #264]	@ (8002398 <TestModeAction+0x208>)
 8002290:	f7fe fa68 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 8002294:	f64f 53e8 	movw	r3, #65000	@ 0xfde8
 8002298:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800229c:	2101      	movs	r1, #1
 800229e:	483f      	ldr	r0, [pc, #252]	@ (800239c <TestModeAction+0x20c>)
 80022a0:	f7ff fc50 	bl	8001b44 <GetUint16Input>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d05b      	beq.n	8002362 <TestModeAction+0x1d2>
			{   // Data entry valid
				programHbridge();
 80022aa:	f7fe fb81 	bl	80009b0 <programHbridge>
				printHbridgeData();
 80022ae:	f7fe fb57 	bl	8000960 <printHbridgeData>
			}
			break;
 80022b2:	e056      	b.n	8002362 <TestModeAction+0x1d2>

		case 'd': //Enter dead time (%)
			printHbridgeData();
 80022b4:	f7fe fb54 	bl	8000960 <printHbridgeData>
			printString("\n\rEnter dead time (%): ");
 80022b8:	4839      	ldr	r0, [pc, #228]	@ (80023a0 <TestModeAction+0x210>)
 80022ba:	f7fe fa53 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.deadtime, 1, MIN_DEADTIME, MAX_DEADTIME))
 80022be:	2328      	movs	r3, #40	@ 0x28
 80022c0:	2201      	movs	r2, #1
 80022c2:	2101      	movs	r1, #1
 80022c4:	4837      	ldr	r0, [pc, #220]	@ (80023a4 <TestModeAction+0x214>)
 80022c6:	f7ff fc3d 	bl	8001b44 <GetUint16Input>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d04a      	beq.n	8002366 <TestModeAction+0x1d6>
			{   // Data entry valid
				programHbridge();
 80022d0:	f7fe fb6e 	bl	80009b0 <programHbridge>
				printHbridgeData();
 80022d4:	f7fe fb44 	bl	8000960 <printHbridgeData>
			}
			break;
 80022d8:	e045      	b.n	8002366 <TestModeAction+0x1d6>

		case 's': //Start/stop driving H-bridge
			printHbridgeData();
 80022da:	f7fe fb41 	bl	8000960 <printHbridgeData>
			printString("\n\rDrive H-bridge 1:Yes 0:No : ");
 80022de:	4832      	ldr	r0, [pc, #200]	@ (80023a8 <TestModeAction+0x218>)
 80022e0:	f7fe fa40 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.on, 1, 0, 1))
 80022e4:	2301      	movs	r3, #1
 80022e6:	2200      	movs	r2, #0
 80022e8:	2101      	movs	r1, #1
 80022ea:	4828      	ldr	r0, [pc, #160]	@ (800238c <TestModeAction+0x1fc>)
 80022ec:	f7ff fc2a 	bl	8001b44 <GetUint16Input>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d039      	beq.n	800236a <TestModeAction+0x1da>
			{   // Data entry valid
				programHbridge();
 80022f6:	f7fe fb5b 	bl	80009b0 <programHbridge>
				printHbridgeData();
 80022fa:	f7fe fb31 	bl	8000960 <printHbridgeData>
			}
			break;
 80022fe:	e034      	b.n	800236a <TestModeAction+0x1da>

		case 'q': //Frequency correction
			int16_t freqCorr;
			if (freqCorrection(&freqCorr))
 8002300:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe ffd1 	bl	80012ac <freqCorrection>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d02e      	beq.n	800236e <TestModeAction+0x1de>
			{
				char text[100];
				sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
 8002310:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002314:	461a      	mov	r2, r3
 8002316:	f107 0308 	add.w	r3, r7, #8
 800231a:	4924      	ldr	r1, [pc, #144]	@ (80023ac <TestModeAction+0x21c>)
 800231c:	4618      	mov	r0, r3
 800231e:	f00f fa99 	bl	8011854 <siprintf>
				printString(text);
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe fa1c 	bl	8000764 <printString>
			}
			break;
 800232c:	e01f      	b.n	800236e <TestModeAction+0x1de>

		case 'z': //Debug output
			printNumber("\n\rCurrent Debug output: ", debug, 0);
 800232e:	4b20      	ldr	r3, [pc, #128]	@ (80023b0 <TestModeAction+0x220>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	2200      	movs	r2, #0
 8002334:	4619      	mov	r1, r3
 8002336:	481f      	ldr	r0, [pc, #124]	@ (80023b4 <TestModeAction+0x224>)
 8002338:	f7fe fa56 	bl	80007e8 <printNumber>
			printString("\n\rSet Debug output 1:On 0:Off : ");
 800233c:	481e      	ldr	r0, [pc, #120]	@ (80023b8 <TestModeAction+0x228>)
 800233e:	f7fe fa11 	bl	8000764 <printString>
			GetUint16Input(&debug, 1, 0, 1);
 8002342:	2301      	movs	r3, #1
 8002344:	2200      	movs	r2, #0
 8002346:	2101      	movs	r1, #1
 8002348:	4819      	ldr	r0, [pc, #100]	@ (80023b0 <TestModeAction+0x220>)
 800234a:	f7ff fbfb 	bl	8001b44 <GetUint16Input>
			break;
 800234e:	e00f      	b.n	8002370 <TestModeAction+0x1e0>

		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 8002350:	f7ff fe9c 	bl	800208c <ShowChangeConfigFlash>
			break;
 8002354:	e00c      	b.n	8002370 <TestModeAction+0x1e0>

		case 't': //Test GPIO
			testGPIO();
 8002356:	f7ff ff05 	bl	8002164 <testGPIO>
			break;
 800235a:	e009      	b.n	8002370 <TestModeAction+0x1e0>

		case 'y': //Auto Freq Adjust
			autoFreqAdj();
 800235c:	f7ff f9a4 	bl	80016a8 <autoFreqAdj>
			break;
 8002360:	e006      	b.n	8002370 <TestModeAction+0x1e0>
			break;
 8002362:	bf00      	nop
 8002364:	e004      	b.n	8002370 <TestModeAction+0x1e0>
			break;
 8002366:	bf00      	nop
 8002368:	e002      	b.n	8002370 <TestModeAction+0x1e0>
			break;
 800236a:	bf00      	nop
 800236c:	e000      	b.n	8002370 <TestModeAction+0x1e0>
			break;
 800236e:	bf00      	nop
	}
}
 8002370:	bf00      	nop
 8002372:	3770      	adds	r7, #112	@ 0x70
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	24000a3c 	.word	0x24000a3c
 800237c:	08014104 	.word	0x08014104
 8002380:	08014118 	.word	0x08014118
 8002384:	08014130 	.word	0x08014130
 8002388:	0801414c 	.word	0x0801414c
 800238c:	2400001c 	.word	0x2400001c
 8002390:	2400032c 	.word	0x2400032c
 8002394:	08014164 	.word	0x08014164
 8002398:	08014184 	.word	0x08014184
 800239c:	2400001e 	.word	0x2400001e
 80023a0:	080141a0 	.word	0x080141a0
 80023a4:	24000020 	.word	0x24000020
 80023a8:	080141b8 	.word	0x080141b8
 80023ac:	080141d8 	.word	0x080141d8
 80023b0:	24000000 	.word	0x24000000
 80023b4:	080141f4 	.word	0x080141f4
 80023b8:	08014210 	.word	0x08014210

080023bc <PlasmaDriverMenu>:

// Print the plasma driver menu on UART3, and execute entered command.
static void PlasmaDriverMenu(void)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
	char input;

	//Wait for user input
	if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK)
 80023c2:	1cf9      	adds	r1, r7, #3
 80023c4:	2301      	movs	r3, #1
 80023c6:	2201      	movs	r2, #1
 80023c8:	4822      	ldr	r0, [pc, #136]	@ (8002454 <PlasmaDriverMenu+0x98>)
 80023ca:	f00d fa14 	bl	800f7f6 <HAL_UART_Receive>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d13b      	bne.n	800244c <PlasmaDriverMenu+0x90>
	{
		// Return pressed -- Display Menu
		if (input == 13)
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	2b0d      	cmp	r3, #13
 80023d8:	d123      	bne.n	8002422 <PlasmaDriverMenu+0x66>
		{
			for (int i=0; i<menu_size; i++)
 80023da:	2300      	movs	r3, #0
 80023dc:	607b      	str	r3, [r7, #4]
 80023de:	e017      	b.n	8002410 <PlasmaDriverMenu+0x54>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) menu[i], strlen(menu[i]), 1000);
 80023e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002458 <PlasmaDriverMenu+0x9c>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80023e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002458 <PlasmaDriverMenu+0x9c>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fd ffdd 	bl	80003b0 <strlen>
 80023f6:	4603      	mov	r3, r0
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023fe:	4621      	mov	r1, r4
 8002400:	4814      	ldr	r0, [pc, #80]	@ (8002454 <PlasmaDriverMenu+0x98>)
 8002402:	f00d f96a 	bl	800f6da <HAL_UART_Transmit>
				printCR();
 8002406:	f7fe f99d 	bl	8000744 <printCR>
			for (int i=0; i<menu_size; i++)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3301      	adds	r3, #1
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	4b12      	ldr	r3, [pc, #72]	@ (800245c <PlasmaDriverMenu+0xa0>)
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4293      	cmp	r3, r2
 800241a:	dbe1      	blt.n	80023e0 <PlasmaDriverMenu+0x24>
			}
			printCR();
 800241c:	f7fe f992 	bl	8000744 <printCR>
				RunModeAction(input);
			else
				printString("\n\r*** ERROR *** Invalid mode");
		}
	}
}
 8002420:	e014      	b.n	800244c <PlasmaDriverMenu+0x90>
			if (sFlashConfig.mode == TEST_MODE)
 8002422:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <PlasmaDriverMenu+0xa4>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d104      	bne.n	8002434 <PlasmaDriverMenu+0x78>
				TestModeAction(input);
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff feaf 	bl	8002190 <TestModeAction>
}
 8002432:	e00b      	b.n	800244c <PlasmaDriverMenu+0x90>
			else if (sFlashConfig.mode == RUN_MODE)
 8002434:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <PlasmaDriverMenu+0xa4>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d104      	bne.n	8002446 <PlasmaDriverMenu+0x8a>
				RunModeAction(input);
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fe97 	bl	8002172 <RunModeAction>
}
 8002444:	e002      	b.n	800244c <PlasmaDriverMenu+0x90>
				printString("\n\r*** ERROR *** Invalid mode");
 8002446:	4807      	ldr	r0, [pc, #28]	@ (8002464 <PlasmaDriverMenu+0xa8>)
 8002448:	f7fe f98c 	bl	8000764 <printString>
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bd90      	pop	{r4, r7, pc}
 8002454:	24000e30 	.word	0x24000e30
 8002458:	240002ec 	.word	0x240002ec
 800245c:	24000320 	.word	0x24000320
 8002460:	24000a40 	.word	0x24000a40
 8002464:	08014234 	.word	0x08014234

08002468 <PlasmaDriverInit>:

// Initialize the plasma driver
void PlasmaDriverInit(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
	//Enable line driver 2 (HAL has initialized all GPIO)
	HAL_GPIO_WritePin(LINE_DRIVER2_ENABLE_GPIO_Port, LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_RESET);  //Enable = Low
 800246c:	2200      	movs	r2, #0
 800246e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002472:	4821      	ldr	r0, [pc, #132]	@ (80024f8 <PlasmaDriverInit+0x90>)
 8002474:	f008 f9ae 	bl	800a7d4 <HAL_GPIO_WritePin>
	printString("\n\rEnable Line Drive 2");
 8002478:	4820      	ldr	r0, [pc, #128]	@ (80024fc <PlasmaDriverInit+0x94>)
 800247a:	f7fe f973 	bl	8000764 <printString>

	//Power On Supplies in order 15V, 3.3V switch
	PowerOnLowSupplies();
 800247e:	f7ff fc63 	bl	8001d48 <PowerOnLowSupplies>

	//Read configuration from flash
	readConfigFlash();
 8002482:	f7fe f94f 	bl	8000724 <readConfigFlash>

	//Has the flash configuration been initialized?
	if (sFlashConfig.mode == 0xFF)
 8002486:	4b1e      	ldr	r3, [pc, #120]	@ (8002500 <PlasmaDriverInit+0x98>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2bff      	cmp	r3, #255	@ 0xff
 800248c:	d107      	bne.n	800249e <PlasmaDriverInit+0x36>
	{
		// write default configuration to flash
		if (writeConfigFlash() != 0)
 800248e:	f7fe f90f 	bl	80006b0 <writeConfigFlash>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <PlasmaDriverInit+0x36>
			printString("\n\r*** ERROR FLASH");
 8002498:	481a      	ldr	r0, [pc, #104]	@ (8002504 <PlasmaDriverInit+0x9c>)
 800249a:	f7fe f963 	bl	8000764 <printString>
	}

	//Initialize menu and configuration menu
	InitializeMenu();
 800249e:	f7ff fd29 	bl	8001ef4 <InitializeMenu>
	InitializeConfigMenu();
 80024a2:	f7ff fcfb 	bl	8001e9c <InitializeConfigMenu>

	//Calibrate ADC1, ADC2 and ADC3
	printString("\n\rCalibrate ADC1, ADC2 and ADC3");
 80024a6:	4818      	ldr	r0, [pc, #96]	@ (8002508 <PlasmaDriverInit+0xa0>)
 80024a8:	f7fe f95c 	bl	8000764 <printString>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80024ac:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80024b0:	2100      	movs	r1, #0
 80024b2:	4816      	ldr	r0, [pc, #88]	@ (800250c <PlasmaDriverInit+0xa4>)
 80024b4:	f004 fc94 	bl	8006de0 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80024b8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80024bc:	2100      	movs	r1, #0
 80024be:	4814      	ldr	r0, [pc, #80]	@ (8002510 <PlasmaDriverInit+0xa8>)
 80024c0:	f004 fc8e 	bl	8006de0 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80024c4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80024c8:	2100      	movs	r1, #0
 80024ca:	4812      	ldr	r0, [pc, #72]	@ (8002514 <PlasmaDriverInit+0xac>)
 80024cc:	f004 fc88 	bl	8006de0 <HAL_ADCEx_Calibration_Start>

	//Power On Supply 500V
	if (sFlashConfig.mode == RUN_MODE)
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <PlasmaDriverInit+0x98>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d10d      	bne.n	80024f4 <PlasmaDriverInit+0x8c>
	{
		//POWER_OFF_IRQ needs to be high before powering On
		if (HAL_GPIO_ReadPin(POWER_OFF_IRQ_GPIO_Port, POWER_OFF_IRQ_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 80024d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024dc:	480e      	ldr	r0, [pc, #56]	@ (8002518 <PlasmaDriverInit+0xb0>)
 80024de:	f008 f961 	bl	800a7a4 <HAL_GPIO_ReadPin>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <PlasmaDriverInit+0x86>
			PowerOnHighSupplies();
 80024e8:	f7ff fc72 	bl	8001dd0 <PowerOnHighSupplies>
		else
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
	}
}
 80024ec:	e002      	b.n	80024f4 <PlasmaDriverInit+0x8c>
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
 80024ee:	480b      	ldr	r0, [pc, #44]	@ (800251c <PlasmaDriverInit+0xb4>)
 80024f0:	f7fe f938 	bl	8000764 <printString>
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	58020400 	.word	0x58020400
 80024fc:	08014254 	.word	0x08014254
 8002500:	24000a40 	.word	0x24000a40
 8002504:	0801426c 	.word	0x0801426c
 8002508:	08014280 	.word	0x08014280
 800250c:	24000a80 	.word	0x24000a80
 8002510:	24000af0 	.word	0x24000af0
 8002514:	24000b60 	.word	0x24000b60
 8002518:	58021000 	.word	0x58021000
 800251c:	080142a0 	.word	0x080142a0

08002520 <PlasmaDoTask>:

// This command is called from a while loop, and will execute any needed task.
void PlasmaDoTask(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	PlasmaDriverMenu(); //Check UART3 and execute command
 8002524:	f7ff ff4a 	bl	80023bc <PlasmaDriverMenu>

	if (sFlashConfig.mode == RUN_MODE)
 8002528:	4b0d      	ldr	r3, [pc, #52]	@ (8002560 <PlasmaDoTask+0x40>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d114      	bne.n	800255a <PlasmaDoTask+0x3a>
	{
		//Check if robot controller requested the plasma On or Off
		if (HAL_GPIO_ReadPin(TURN_PLASMA_ON_GPIO_Port, TURN_PLASMA_ON_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 8002530:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002534:	480b      	ldr	r0, [pc, #44]	@ (8002564 <PlasmaDoTask+0x44>)
 8002536:	f008 f935 	bl	800a7a4 <HAL_GPIO_ReadPin>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10c      	bne.n	800255a <PlasmaDoTask+0x3a>
		{
			if (powerStatus == V500_ON)
 8002540:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <PlasmaDoTask+0x48>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d105      	bne.n	8002554 <PlasmaDoTask+0x34>
			{
				sHbridge.on = 1; // Turn Hbridge on
 8002548:	4b08      	ldr	r3, [pc, #32]	@ (800256c <PlasmaDoTask+0x4c>)
 800254a:	2201      	movs	r2, #1
 800254c:	801a      	strh	r2, [r3, #0]
				programHbridge();
 800254e:	f7fe fa2f 	bl	80009b0 <programHbridge>
			}
			else
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
		}
	}
}
 8002552:	e002      	b.n	800255a <PlasmaDoTask+0x3a>
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
 8002554:	4806      	ldr	r0, [pc, #24]	@ (8002570 <PlasmaDoTask+0x50>)
 8002556:	f7fe f905 	bl	8000764 <printString>
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	24000a40 	.word	0x24000a40
 8002564:	58021000 	.word	0x58021000
 8002568:	24000a3c 	.word	0x24000a3c
 800256c:	2400001c 	.word	0x2400001c
 8002570:	080142dc 	.word	0x080142dc

08002574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002578:	f001 fe64 	bl	8004244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800257c:	f000 f826 	bl	80025cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002580:	f000 f894 	bl	80026ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002584:	f000 fe4c 	bl	8003220 <MX_GPIO_Init>
  MX_DMA_Init();
 8002588:	f000 fe22 	bl	80031d0 <MX_DMA_Init>
  MX_TIM1_Init();
 800258c:	f000 fc26 	bl	8002ddc <MX_TIM1_Init>
  MX_ETH_Init();
 8002590:	f000 fb3e 	bl	8002c10 <MX_ETH_Init>
  MX_ADC2_Init();
 8002594:	f000 f958 	bl	8002848 <MX_ADC2_Init>
  MX_USB_OTG_HS_USB_Init();
 8002598:	f000 fe12 	bl	80031c0 <MX_USB_OTG_HS_USB_Init>
  MX_ADC3_Init();
 800259c:	f000 f9f8 	bl	8002990 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 80025a0:	f000 fbd0 	bl	8002d44 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80025a4:	f000 f8b2 	bl	800270c <MX_ADC1_Init>
  MX_COMP2_Init();
 80025a8:	f000 fb04 	bl	8002bb4 <MX_COMP2_Init>
  MX_TIM2_Init();
 80025ac:	f000 fca8 	bl	8002f00 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 80025b0:	f000 fb7a 	bl	8002ca8 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 80025b4:	f000 fcfe 	bl	8002fb4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80025b8:	f000 fd50 	bl	800305c <MX_TIM4_Init>
  MX_TIM15_Init();
 80025bc:	f000 fda8 	bl	8003110 <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PlasmaDriverInit();  			//Initialize plasma driver
 80025c0:	f7ff ff52 	bl	8002468 <PlasmaDriverInit>
  while (1)
  {
	PlasmaDoTask();     	    //Handle plasma driver task
 80025c4:	f7ff ffac 	bl	8002520 <PlasmaDoTask>
 80025c8:	e7fc      	b.n	80025c4 <main+0x50>
	...

080025cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b09c      	sub	sp, #112	@ 0x70
 80025d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025d6:	224c      	movs	r2, #76	@ 0x4c
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f00f f99d 	bl	801191a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	2220      	movs	r2, #32
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f00f f997 	bl	801191a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80025ec:	2002      	movs	r0, #2
 80025ee:	f008 f925 	bl	800a83c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80025f2:	2300      	movs	r3, #0
 80025f4:	603b      	str	r3, [r7, #0]
 80025f6:	4b2c      	ldr	r3, [pc, #176]	@ (80026a8 <SystemClock_Config+0xdc>)
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	4a2b      	ldr	r2, [pc, #172]	@ (80026a8 <SystemClock_Config+0xdc>)
 80025fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002600:	6193      	str	r3, [r2, #24]
 8002602:	4b29      	ldr	r3, [pc, #164]	@ (80026a8 <SystemClock_Config+0xdc>)
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800260e:	bf00      	nop
 8002610:	4b25      	ldr	r3, [pc, #148]	@ (80026a8 <SystemClock_Config+0xdc>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800261c:	d1f8      	bne.n	8002610 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800261e:	2321      	movs	r3, #33	@ 0x21
 8002620:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002622:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002626:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002628:	2301      	movs	r3, #1
 800262a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800262c:	2302      	movs	r3, #2
 800262e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002630:	2302      	movs	r3, #2
 8002632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002634:	2304      	movs	r3, #4
 8002636:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8002638:	f240 1313 	movw	r3, #275	@ 0x113
 800263c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800263e:	2301      	movs	r3, #1
 8002640:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002642:	2304      	movs	r3, #4
 8002644:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002646:	2302      	movs	r3, #2
 8002648:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800264a:	2304      	movs	r3, #4
 800264c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800264e:	2300      	movs	r3, #0
 8002650:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800265a:	4618      	mov	r0, r3
 800265c:	f008 f928 	bl	800a8b0 <HAL_RCC_OscConfig>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002666:	f000 ff4b 	bl	8003500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800266a:	233f      	movs	r3, #63	@ 0x3f
 800266c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800266e:	2303      	movs	r3, #3
 8002670:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002676:	2308      	movs	r3, #8
 8002678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800267a:	2340      	movs	r3, #64	@ 0x40
 800267c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800267e:	2340      	movs	r3, #64	@ 0x40
 8002680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 8002682:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002686:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002688:	2340      	movs	r3, #64	@ 0x40
 800268a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	2103      	movs	r1, #3
 8002690:	4618      	mov	r0, r3
 8002692:	f008 fce7 	bl	800b064 <HAL_RCC_ClockConfig>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800269c:	f000 ff30 	bl	8003500 <Error_Handler>
  }
}
 80026a0:	bf00      	nop
 80026a2:	3770      	adds	r7, #112	@ 0x70
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	58024800 	.word	0x58024800

080026ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b0ae      	sub	sp, #184	@ 0xb8
 80026b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026b2:	463b      	mov	r3, r7
 80026b4:	22b8      	movs	r2, #184	@ 0xb8
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f00f f92e 	bl	801191a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026be:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80026ce:	2318      	movs	r3, #24
 80026d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80026d2:	2302      	movs	r3, #2
 80026d4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80026d6:	2302      	movs	r3, #2
 80026d8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80026da:	2302      	movs	r3, #2
 80026dc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80026de:	23c0      	movs	r3, #192	@ 0xc0
 80026e0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f0:	463b      	mov	r3, r7
 80026f2:	4618      	mov	r0, r3
 80026f4:	f009 f842 	bl	800b77c <HAL_RCCEx_PeriphCLKConfig>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80026fe:	f000 feff 	bl	8003500 <Error_Handler>
  }
}
 8002702:	bf00      	nop
 8002704:	37b8      	adds	r7, #184	@ 0xb8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08c      	sub	sp, #48	@ 0x30
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800271e:	463b      	mov	r3, r7
 8002720:	2224      	movs	r2, #36	@ 0x24
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f00f f8f8 	bl	801191a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800272a:	4b42      	ldr	r3, [pc, #264]	@ (8002834 <MX_ADC1_Init+0x128>)
 800272c:	4a42      	ldr	r2, [pc, #264]	@ (8002838 <MX_ADC1_Init+0x12c>)
 800272e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002730:	4b40      	ldr	r3, [pc, #256]	@ (8002834 <MX_ADC1_Init+0x128>)
 8002732:	2200      	movs	r2, #0
 8002734:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8002736:	4b3f      	ldr	r3, [pc, #252]	@ (8002834 <MX_ADC1_Init+0x128>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800273c:	4b3d      	ldr	r3, [pc, #244]	@ (8002834 <MX_ADC1_Init+0x128>)
 800273e:	2201      	movs	r2, #1
 8002740:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002742:	4b3c      	ldr	r3, [pc, #240]	@ (8002834 <MX_ADC1_Init+0x128>)
 8002744:	2208      	movs	r2, #8
 8002746:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002748:	4b3a      	ldr	r3, [pc, #232]	@ (8002834 <MX_ADC1_Init+0x128>)
 800274a:	2200      	movs	r2, #0
 800274c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800274e:	4b39      	ldr	r3, [pc, #228]	@ (8002834 <MX_ADC1_Init+0x128>)
 8002750:	2201      	movs	r2, #1
 8002752:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8002754:	4b37      	ldr	r3, [pc, #220]	@ (8002834 <MX_ADC1_Init+0x128>)
 8002756:	2203      	movs	r2, #3
 8002758:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800275a:	4b36      	ldr	r3, [pc, #216]	@ (8002834 <MX_ADC1_Init+0x128>)
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8002762:	4b34      	ldr	r3, [pc, #208]	@ (8002834 <MX_ADC1_Init+0x128>)
 8002764:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002768:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800276a:	4b32      	ldr	r3, [pc, #200]	@ (8002834 <MX_ADC1_Init+0x128>)
 800276c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002770:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8002772:	4b30      	ldr	r3, [pc, #192]	@ (8002834 <MX_ADC1_Init+0x128>)
 8002774:	2201      	movs	r2, #1
 8002776:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002778:	4b2e      	ldr	r3, [pc, #184]	@ (8002834 <MX_ADC1_Init+0x128>)
 800277a:	2200      	movs	r2, #0
 800277c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800277e:	4b2d      	ldr	r3, [pc, #180]	@ (8002834 <MX_ADC1_Init+0x128>)
 8002780:	2200      	movs	r2, #0
 8002782:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8002784:	4b2b      	ldr	r3, [pc, #172]	@ (8002834 <MX_ADC1_Init+0x128>)
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800278c:	4829      	ldr	r0, [pc, #164]	@ (8002834 <MX_ADC1_Init+0x128>)
 800278e:	f002 fa61 	bl	8004c54 <HAL_ADC_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002798:	f000 feb2 	bl	8003500 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800279c:	2306      	movs	r3, #6
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 80027a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80027aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ae:	4619      	mov	r1, r3
 80027b0:	4820      	ldr	r0, [pc, #128]	@ (8002834 <MX_ADC1_Init+0x128>)
 80027b2:	f004 fc5d 	bl	8007070 <HAL_ADCEx_MultiModeConfigChannel>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80027bc:	f000 fea0 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80027c0:	4b1e      	ldr	r3, [pc, #120]	@ (800283c <MX_ADC1_Init+0x130>)
 80027c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027c4:	2306      	movs	r3, #6
 80027c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 80027c8:	2302      	movs	r3, #2
 80027ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80027cc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80027d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80027d2:	2304      	movs	r3, #4
 80027d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027e0:	463b      	mov	r3, r7
 80027e2:	4619      	mov	r1, r3
 80027e4:	4813      	ldr	r0, [pc, #76]	@ (8002834 <MX_ADC1_Init+0x128>)
 80027e6:	f002 ff67 	bl	80056b8 <HAL_ADC_ConfigChannel>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80027f0:	f000 fe86 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80027f4:	4b12      	ldr	r3, [pc, #72]	@ (8002840 <MX_ADC1_Init+0x134>)
 80027f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80027f8:	230c      	movs	r3, #12
 80027fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027fc:	463b      	mov	r3, r7
 80027fe:	4619      	mov	r1, r3
 8002800:	480c      	ldr	r0, [pc, #48]	@ (8002834 <MX_ADC1_Init+0x128>)
 8002802:	f002 ff59 	bl	80056b8 <HAL_ADC_ConfigChannel>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 800280c:	f000 fe78 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8002810:	4b0c      	ldr	r3, [pc, #48]	@ (8002844 <MX_ADC1_Init+0x138>)
 8002812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002814:	2312      	movs	r3, #18
 8002816:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002818:	463b      	mov	r3, r7
 800281a:	4619      	mov	r1, r3
 800281c:	4805      	ldr	r0, [pc, #20]	@ (8002834 <MX_ADC1_Init+0x128>)
 800281e:	f002 ff4b 	bl	80056b8 <HAL_ADC_ConfigChannel>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8002828:	f000 fe6a 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800282c:	bf00      	nop
 800282e:	3730      	adds	r7, #48	@ 0x30
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	24000a80 	.word	0x24000a80
 8002838:	40022000 	.word	0x40022000
 800283c:	3ef08000 	.word	0x3ef08000
 8002840:	4b840000 	.word	0x4b840000
 8002844:	43210000 	.word	0x43210000

08002848 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b090      	sub	sp, #64	@ 0x40
 800284c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800284e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	60da      	str	r2, [r3, #12]
 800285c:	611a      	str	r2, [r3, #16]
 800285e:	615a      	str	r2, [r3, #20]
 8002860:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002862:	463b      	mov	r3, r7
 8002864:	2224      	movs	r2, #36	@ 0x24
 8002866:	2100      	movs	r1, #0
 8002868:	4618      	mov	r0, r3
 800286a:	f00f f856 	bl	801191a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800286e:	4b42      	ldr	r3, [pc, #264]	@ (8002978 <MX_ADC2_Init+0x130>)
 8002870:	4a42      	ldr	r2, [pc, #264]	@ (800297c <MX_ADC2_Init+0x134>)
 8002872:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002874:	4b40      	ldr	r3, [pc, #256]	@ (8002978 <MX_ADC2_Init+0x130>)
 8002876:	2200      	movs	r2, #0
 8002878:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800287a:	4b3f      	ldr	r3, [pc, #252]	@ (8002978 <MX_ADC2_Init+0x130>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002880:	4b3d      	ldr	r3, [pc, #244]	@ (8002978 <MX_ADC2_Init+0x130>)
 8002882:	2201      	movs	r2, #1
 8002884:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002886:	4b3c      	ldr	r3, [pc, #240]	@ (8002978 <MX_ADC2_Init+0x130>)
 8002888:	2208      	movs	r2, #8
 800288a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800288c:	4b3a      	ldr	r3, [pc, #232]	@ (8002978 <MX_ADC2_Init+0x130>)
 800288e:	2200      	movs	r2, #0
 8002890:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002892:	4b39      	ldr	r3, [pc, #228]	@ (8002978 <MX_ADC2_Init+0x130>)
 8002894:	2201      	movs	r2, #1
 8002896:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 8002898:	4b37      	ldr	r3, [pc, #220]	@ (8002978 <MX_ADC2_Init+0x130>)
 800289a:	2203      	movs	r2, #3
 800289c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800289e:	4b36      	ldr	r3, [pc, #216]	@ (8002978 <MX_ADC2_Init+0x130>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80028a6:	4b34      	ldr	r3, [pc, #208]	@ (8002978 <MX_ADC2_Init+0x130>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80028ac:	4b32      	ldr	r3, [pc, #200]	@ (8002978 <MX_ADC2_Init+0x130>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80028b2:	4b31      	ldr	r3, [pc, #196]	@ (8002978 <MX_ADC2_Init+0x130>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80028b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002978 <MX_ADC2_Init+0x130>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80028c0:	482d      	ldr	r0, [pc, #180]	@ (8002978 <MX_ADC2_Init+0x130>)
 80028c2:	f002 f9c7 	bl	8004c54 <HAL_ADC_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80028cc:	f000 fe18 	bl	8003500 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80028d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <MX_ADC2_Init+0x138>)
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80028d4:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 80028d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 80028da:	4b2a      	ldr	r3, [pc, #168]	@ (8002984 <MX_ADC2_Init+0x13c>)
 80028dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.ITMode = DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  AnalogWDGConfig.HighThreshold = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	637b      	str	r3, [r7, #52]	@ 0x34
  AnalogWDGConfig.LowThreshold = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80028ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028f0:	4619      	mov	r1, r3
 80028f2:	4821      	ldr	r0, [pc, #132]	@ (8002978 <MX_ADC2_Init+0x130>)
 80028f4:	f003 fc0c 	bl	8006110 <HAL_ADC_AnalogWDGConfig>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80028fe:	f000 fdff 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002902:	4b20      	ldr	r3, [pc, #128]	@ (8002984 <MX_ADC2_Init+0x13c>)
 8002904:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002906:	2306      	movs	r3, #6
 8002908:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 800290a:	2302      	movs	r3, #2
 800290c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800290e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002912:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002914:	2304      	movs	r3, #4
 8002916:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800291c:	2300      	movs	r3, #0
 800291e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002922:	463b      	mov	r3, r7
 8002924:	4619      	mov	r1, r3
 8002926:	4814      	ldr	r0, [pc, #80]	@ (8002978 <MX_ADC2_Init+0x130>)
 8002928:	f002 fec6 	bl	80056b8 <HAL_ADC_ConfigChannel>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 8002932:	f000 fde5 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8002936:	4b14      	ldr	r3, [pc, #80]	@ (8002988 <MX_ADC2_Init+0x140>)
 8002938:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800293a:	230c      	movs	r3, #12
 800293c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800293e:	463b      	mov	r3, r7
 8002940:	4619      	mov	r1, r3
 8002942:	480d      	ldr	r0, [pc, #52]	@ (8002978 <MX_ADC2_Init+0x130>)
 8002944:	f002 feb8 	bl	80056b8 <HAL_ADC_ConfigChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 800294e:	f000 fdd7 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002952:	4b0e      	ldr	r3, [pc, #56]	@ (800298c <MX_ADC2_Init+0x144>)
 8002954:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002956:	2312      	movs	r3, #18
 8002958:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800295a:	463b      	mov	r3, r7
 800295c:	4619      	mov	r1, r3
 800295e:	4806      	ldr	r0, [pc, #24]	@ (8002978 <MX_ADC2_Init+0x130>)
 8002960:	f002 feaa 	bl	80056b8 <HAL_ADC_ConfigChannel>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 800296a:	f000 fdc9 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800296e:	bf00      	nop
 8002970:	3740      	adds	r7, #64	@ 0x40
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	24000af0 	.word	0x24000af0
 800297c:	40022100 	.word	0x40022100
 8002980:	7dc00000 	.word	0x7dc00000
 8002984:	0c900008 	.word	0x0c900008
 8002988:	4fb80000 	.word	0x4fb80000
 800298c:	14f00020 	.word	0x14f00020

08002990 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	@ 0x28
 8002994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002996:	1d3b      	adds	r3, r7, #4
 8002998:	2224      	movs	r2, #36	@ 0x24
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f00e ffbc 	bl	801191a <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80029a2:	4b78      	ldr	r3, [pc, #480]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 80029a4:	4a78      	ldr	r2, [pc, #480]	@ (8002b88 <MX_ADC3_Init+0x1f8>)
 80029a6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80029a8:	4b76      	ldr	r3, [pc, #472]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80029ae:	4b75      	ldr	r3, [pc, #468]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 80029b0:	2208      	movs	r2, #8
 80029b2:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80029b4:	4b73      	ldr	r3, [pc, #460]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80029ba:	4b72      	ldr	r3, [pc, #456]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 80029bc:	2201      	movs	r2, #1
 80029be:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80029c0:	4b70      	ldr	r3, [pc, #448]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 80029c2:	2208      	movs	r2, #8
 80029c4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80029c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80029cc:	4b6d      	ldr	r3, [pc, #436]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 11;
 80029d2:	4b6c      	ldr	r3, [pc, #432]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 80029d4:	220b      	movs	r2, #11
 80029d6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80029d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029e0:	4b68      	ldr	r3, [pc, #416]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029e6:	4b67      	ldr	r3, [pc, #412]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80029ec:	4b65      	ldr	r3, [pc, #404]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80029f4:	4b63      	ldr	r3, [pc, #396]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 80029fa:	4b62      	ldr	r3, [pc, #392]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002a00:	4b60      	ldr	r3, [pc, #384]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002a06:	4b5f      	ldr	r3, [pc, #380]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8002a0c:	4b5d      	ldr	r3, [pc, #372]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002a14:	485b      	ldr	r0, [pc, #364]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 8002a16:	f002 f91d 	bl	8004c54 <HAL_ADC_Init>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8002a20:	f000 fd6e 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002a24:	2301      	movs	r3, #1
 8002a26:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a28:	2306      	movs	r3, #6
 8002a2a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_6CYCLES_5;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002a30:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002a34:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a36:	2304      	movs	r3, #4
 8002a38:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a42:	1d3b      	adds	r3, r7, #4
 8002a44:	4619      	mov	r1, r3
 8002a46:	484f      	ldr	r0, [pc, #316]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 8002a48:	f002 fe36 	bl	80056b8 <HAL_ADC_ConfigChannel>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 8002a52:	f000 fd55 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002a56:	4b4d      	ldr	r3, [pc, #308]	@ (8002b8c <MX_ADC3_Init+0x1fc>)
 8002a58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002a5a:	230c      	movs	r3, #12
 8002a5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4848      	ldr	r0, [pc, #288]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 8002a64:	f002 fe28 	bl	80056b8 <HAL_ADC_ConfigChannel>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 8002a6e:	f000 fd47 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002a72:	4b47      	ldr	r3, [pc, #284]	@ (8002b90 <MX_ADC3_Init+0x200>)
 8002a74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002a76:	2312      	movs	r3, #18
 8002a78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4841      	ldr	r0, [pc, #260]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 8002a80:	f002 fe1a 	bl	80056b8 <HAL_ADC_ConfigChannel>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 8002a8a:	f000 fd39 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002a8e:	4b41      	ldr	r3, [pc, #260]	@ (8002b94 <MX_ADC3_Init+0x204>)
 8002a90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002a92:	2318      	movs	r3, #24
 8002a94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	483a      	ldr	r0, [pc, #232]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 8002a9c:	f002 fe0c 	bl	80056b8 <HAL_ADC_ConfigChannel>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 8002aa6:	f000 fd2b 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8002b98 <MX_ADC3_Init+0x208>)
 8002aac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002aae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ab2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4832      	ldr	r0, [pc, #200]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 8002aba:	f002 fdfd 	bl	80056b8 <HAL_ADC_ConfigChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_ADC3_Init+0x138>
  {
    Error_Handler();
 8002ac4:	f000 fd1c 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002ac8:	4b34      	ldr	r3, [pc, #208]	@ (8002b9c <MX_ADC3_Init+0x20c>)
 8002aca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002acc:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8002ad0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	482b      	ldr	r0, [pc, #172]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 8002ad8:	f002 fdee 	bl	80056b8 <HAL_ADC_ConfigChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8002ae2:	f000 fd0d 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002ae6:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba0 <MX_ADC3_Init+0x210>)
 8002ae8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002aea:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8002aee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	4619      	mov	r1, r3
 8002af4:	4823      	ldr	r0, [pc, #140]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 8002af6:	f002 fddf 	bl	80056b8 <HAL_ADC_ConfigChannel>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8002b00:	f000 fcfe 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002b04:	4b27      	ldr	r3, [pc, #156]	@ (8002ba4 <MX_ADC3_Init+0x214>)
 8002b06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002b08:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8002b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	4619      	mov	r1, r3
 8002b12:	481c      	ldr	r0, [pc, #112]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 8002b14:	f002 fdd0 	bl	80056b8 <HAL_ADC_ConfigChannel>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_ADC3_Init+0x192>
  {
    Error_Handler();
 8002b1e:	f000 fcef 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002b22:	4b21      	ldr	r3, [pc, #132]	@ (8002ba8 <MX_ADC3_Init+0x218>)
 8002b24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002b26:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8002b2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4814      	ldr	r0, [pc, #80]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 8002b32:	f002 fdc1 	bl	80056b8 <HAL_ADC_ConfigChannel>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_ADC3_Init+0x1b0>
  {
    Error_Handler();
 8002b3c:	f000 fce0 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002b40:	4b1a      	ldr	r3, [pc, #104]	@ (8002bac <MX_ADC3_Init+0x21c>)
 8002b42:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8002b44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	480d      	ldr	r0, [pc, #52]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 8002b50:	f002 fdb2 	bl	80056b8 <HAL_ADC_ConfigChannel>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_ADC3_Init+0x1ce>
  {
    Error_Handler();
 8002b5a:	f000 fcd1 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002b5e:	4b14      	ldr	r3, [pc, #80]	@ (8002bb0 <MX_ADC3_Init+0x220>)
 8002b60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8002b62:	f240 2306 	movw	r3, #518	@ 0x206
 8002b66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b68:	1d3b      	adds	r3, r7, #4
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4805      	ldr	r0, [pc, #20]	@ (8002b84 <MX_ADC3_Init+0x1f4>)
 8002b6e:	f002 fda3 	bl	80056b8 <HAL_ADC_ConfigChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_ADC3_Init+0x1ec>
  {
    Error_Handler();
 8002b78:	f000 fcc2 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002b7c:	bf00      	nop
 8002b7e:	3728      	adds	r7, #40	@ 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	24000b60 	.word	0x24000b60
 8002b88:	58026000 	.word	0x58026000
 8002b8c:	04300002 	.word	0x04300002
 8002b90:	08600004 	.word	0x08600004
 8002b94:	0c900008 	.word	0x0c900008
 8002b98:	10c00010 	.word	0x10c00010
 8002b9c:	14f00020 	.word	0x14f00020
 8002ba0:	19200040 	.word	0x19200040
 8002ba4:	1d500080 	.word	0x1d500080
 8002ba8:	21800100 	.word	0x21800100
 8002bac:	25b00200 	.word	0x25b00200
 8002bb0:	2a000400 	.word	0x2a000400

08002bb4 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002bb8:	4b13      	ldr	r3, [pc, #76]	@ (8002c08 <MX_COMP2_Init+0x54>)
 8002bba:	4a14      	ldr	r2, [pc, #80]	@ (8002c0c <MX_COMP2_Init+0x58>)
 8002bbc:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002bbe:	4b12      	ldr	r3, [pc, #72]	@ (8002c08 <MX_COMP2_Init+0x54>)
 8002bc0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002bc4:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	@ (8002c08 <MX_COMP2_Init+0x54>)
 8002bc8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002bcc:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	@ (8002c08 <MX_COMP2_Init+0x54>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <MX_COMP2_Init+0x54>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002bda:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <MX_COMP2_Init+0x54>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002be0:	4b09      	ldr	r3, [pc, #36]	@ (8002c08 <MX_COMP2_Init+0x54>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002be6:	4b08      	ldr	r3, [pc, #32]	@ (8002c08 <MX_COMP2_Init+0x54>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002bec:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <MX_COMP2_Init+0x54>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002bf2:	4805      	ldr	r0, [pc, #20]	@ (8002c08 <MX_COMP2_Init+0x54>)
 8002bf4:	f004 fb1e 	bl	8007234 <HAL_COMP_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_COMP2_Init+0x4e>
  {
    Error_Handler();
 8002bfe:	f000 fc7f 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	24000cc0 	.word	0x24000cc0
 8002c0c:	58003810 	.word	0x58003810

08002c10 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002c14:	4b1e      	ldr	r3, [pc, #120]	@ (8002c90 <MX_ETH_Init+0x80>)
 8002c16:	4a1f      	ldr	r2, [pc, #124]	@ (8002c94 <MX_ETH_Init+0x84>)
 8002c18:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002c98 <MX_ETH_Init+0x88>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002c20:	4b1d      	ldr	r3, [pc, #116]	@ (8002c98 <MX_ETH_Init+0x88>)
 8002c22:	2280      	movs	r2, #128	@ 0x80
 8002c24:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002c26:	4b1c      	ldr	r3, [pc, #112]	@ (8002c98 <MX_ETH_Init+0x88>)
 8002c28:	22e1      	movs	r2, #225	@ 0xe1
 8002c2a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c98 <MX_ETH_Init+0x88>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002c32:	4b19      	ldr	r3, [pc, #100]	@ (8002c98 <MX_ETH_Init+0x88>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002c38:	4b17      	ldr	r3, [pc, #92]	@ (8002c98 <MX_ETH_Init+0x88>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002c3e:	4b14      	ldr	r3, [pc, #80]	@ (8002c90 <MX_ETH_Init+0x80>)
 8002c40:	4a15      	ldr	r2, [pc, #84]	@ (8002c98 <MX_ETH_Init+0x88>)
 8002c42:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002c44:	4b12      	ldr	r3, [pc, #72]	@ (8002c90 <MX_ETH_Init+0x80>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002c4a:	4b11      	ldr	r3, [pc, #68]	@ (8002c90 <MX_ETH_Init+0x80>)
 8002c4c:	4a13      	ldr	r2, [pc, #76]	@ (8002c9c <MX_ETH_Init+0x8c>)
 8002c4e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002c50:	4b0f      	ldr	r3, [pc, #60]	@ (8002c90 <MX_ETH_Init+0x80>)
 8002c52:	4a13      	ldr	r2, [pc, #76]	@ (8002ca0 <MX_ETH_Init+0x90>)
 8002c54:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002c56:	4b0e      	ldr	r3, [pc, #56]	@ (8002c90 <MX_ETH_Init+0x80>)
 8002c58:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002c5c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002c5e:	480c      	ldr	r0, [pc, #48]	@ (8002c90 <MX_ETH_Init+0x80>)
 8002c60:	f006 fdf6 	bl	8009850 <HAL_ETH_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002c6a:	f000 fc49 	bl	8003500 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002c6e:	2238      	movs	r2, #56	@ 0x38
 8002c70:	2100      	movs	r1, #0
 8002c72:	480c      	ldr	r0, [pc, #48]	@ (8002ca4 <MX_ETH_Init+0x94>)
 8002c74:	f00e fe51 	bl	801191a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002c78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca4 <MX_ETH_Init+0x94>)
 8002c7a:	2221      	movs	r2, #33	@ 0x21
 8002c7c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002c7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ca4 <MX_ETH_Init+0x94>)
 8002c80:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002c84:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002c86:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <MX_ETH_Init+0x94>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	24000cec 	.word	0x24000cec
 8002c94:	40028000 	.word	0x40028000
 8002c98:	24001040 	.word	0x24001040
 8002c9c:	24000270 	.word	0x24000270
 8002ca0:	24000210 	.word	0x24000210
 8002ca4:	24000a48 	.word	0x24000a48

08002ca8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002cac:	4b22      	ldr	r3, [pc, #136]	@ (8002d38 <MX_LPUART1_UART_Init+0x90>)
 8002cae:	4a23      	ldr	r2, [pc, #140]	@ (8002d3c <MX_LPUART1_UART_Init+0x94>)
 8002cb0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002cb2:	4b21      	ldr	r3, [pc, #132]	@ (8002d38 <MX_LPUART1_UART_Init+0x90>)
 8002cb4:	4a22      	ldr	r2, [pc, #136]	@ (8002d40 <MX_LPUART1_UART_Init+0x98>)
 8002cb6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d38 <MX_LPUART1_UART_Init+0x90>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d38 <MX_LPUART1_UART_Init+0x90>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d38 <MX_LPUART1_UART_Init+0x90>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002cca:	4b1b      	ldr	r3, [pc, #108]	@ (8002d38 <MX_LPUART1_UART_Init+0x90>)
 8002ccc:	220c      	movs	r2, #12
 8002cce:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd0:	4b19      	ldr	r3, [pc, #100]	@ (8002d38 <MX_LPUART1_UART_Init+0x90>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cd6:	4b18      	ldr	r3, [pc, #96]	@ (8002d38 <MX_LPUART1_UART_Init+0x90>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cdc:	4b16      	ldr	r3, [pc, #88]	@ (8002d38 <MX_LPUART1_UART_Init+0x90>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ce2:	4b15      	ldr	r3, [pc, #84]	@ (8002d38 <MX_LPUART1_UART_Init+0x90>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002ce8:	4b13      	ldr	r3, [pc, #76]	@ (8002d38 <MX_LPUART1_UART_Init+0x90>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002cee:	4812      	ldr	r0, [pc, #72]	@ (8002d38 <MX_LPUART1_UART_Init+0x90>)
 8002cf0:	f00c fca3 	bl	800f63a <HAL_UART_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8002cfa:	f000 fc01 	bl	8003500 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cfe:	2100      	movs	r1, #0
 8002d00:	480d      	ldr	r0, [pc, #52]	@ (8002d38 <MX_LPUART1_UART_Init+0x90>)
 8002d02:	f00d ff00 	bl	8010b06 <HAL_UARTEx_SetTxFifoThreshold>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8002d0c:	f000 fbf8 	bl	8003500 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d10:	2100      	movs	r1, #0
 8002d12:	4809      	ldr	r0, [pc, #36]	@ (8002d38 <MX_LPUART1_UART_Init+0x90>)
 8002d14:	f00d ff35 	bl	8010b82 <HAL_UARTEx_SetRxFifoThreshold>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002d1e:	f000 fbef 	bl	8003500 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002d22:	4805      	ldr	r0, [pc, #20]	@ (8002d38 <MX_LPUART1_UART_Init+0x90>)
 8002d24:	f00d feb6 	bl	8010a94 <HAL_UARTEx_DisableFifoMode>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002d2e:	f000 fbe7 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	24000d9c 	.word	0x24000d9c
 8002d3c:	58000c00 	.word	0x58000c00
 8002d40:	00033324 	.word	0x00033324

08002d44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d48:	4b22      	ldr	r3, [pc, #136]	@ (8002dd4 <MX_USART3_UART_Init+0x90>)
 8002d4a:	4a23      	ldr	r2, [pc, #140]	@ (8002dd8 <MX_USART3_UART_Init+0x94>)
 8002d4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002d4e:	4b21      	ldr	r3, [pc, #132]	@ (8002dd4 <MX_USART3_UART_Init+0x90>)
 8002d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d56:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd4 <MX_USART3_UART_Init+0x90>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd4 <MX_USART3_UART_Init+0x90>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d62:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd4 <MX_USART3_UART_Init+0x90>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d68:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd4 <MX_USART3_UART_Init+0x90>)
 8002d6a:	220c      	movs	r2, #12
 8002d6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6e:	4b19      	ldr	r3, [pc, #100]	@ (8002dd4 <MX_USART3_UART_Init+0x90>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d74:	4b17      	ldr	r3, [pc, #92]	@ (8002dd4 <MX_USART3_UART_Init+0x90>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d7a:	4b16      	ldr	r3, [pc, #88]	@ (8002dd4 <MX_USART3_UART_Init+0x90>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d80:	4b14      	ldr	r3, [pc, #80]	@ (8002dd4 <MX_USART3_UART_Init+0x90>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d86:	4b13      	ldr	r3, [pc, #76]	@ (8002dd4 <MX_USART3_UART_Init+0x90>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d8c:	4811      	ldr	r0, [pc, #68]	@ (8002dd4 <MX_USART3_UART_Init+0x90>)
 8002d8e:	f00c fc54 	bl	800f63a <HAL_UART_Init>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002d98:	f000 fbb2 	bl	8003500 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	480d      	ldr	r0, [pc, #52]	@ (8002dd4 <MX_USART3_UART_Init+0x90>)
 8002da0:	f00d feb1 	bl	8010b06 <HAL_UARTEx_SetTxFifoThreshold>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002daa:	f000 fba9 	bl	8003500 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dae:	2100      	movs	r1, #0
 8002db0:	4808      	ldr	r0, [pc, #32]	@ (8002dd4 <MX_USART3_UART_Init+0x90>)
 8002db2:	f00d fee6 	bl	8010b82 <HAL_UARTEx_SetRxFifoThreshold>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002dbc:	f000 fba0 	bl	8003500 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002dc0:	4804      	ldr	r0, [pc, #16]	@ (8002dd4 <MX_USART3_UART_Init+0x90>)
 8002dc2:	f00d fe67 	bl	8010a94 <HAL_UARTEx_DisableFifoMode>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002dcc:	f000 fb98 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	24000e30 	.word	0x24000e30
 8002dd8:	40004800 	.word	0x40004800

08002ddc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b098      	sub	sp, #96	@ 0x60
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	60da      	str	r2, [r3, #12]
 8002dfc:	611a      	str	r2, [r3, #16]
 8002dfe:	615a      	str	r2, [r3, #20]
 8002e00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	2234      	movs	r2, #52	@ 0x34
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f00e fd86 	bl	801191a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef8 <MX_TIM1_Init+0x11c>)
 8002e10:	4a3a      	ldr	r2, [pc, #232]	@ (8002efc <MX_TIM1_Init+0x120>)
 8002e12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002e14:	4b38      	ldr	r3, [pc, #224]	@ (8002ef8 <MX_TIM1_Init+0x11c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e1a:	4b37      	ldr	r3, [pc, #220]	@ (8002ef8 <MX_TIM1_Init+0x11c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3240;
 8002e20:	4b35      	ldr	r3, [pc, #212]	@ (8002ef8 <MX_TIM1_Init+0x11c>)
 8002e22:	f640 42a8 	movw	r2, #3240	@ 0xca8
 8002e26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e28:	4b33      	ldr	r3, [pc, #204]	@ (8002ef8 <MX_TIM1_Init+0x11c>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e2e:	4b32      	ldr	r3, [pc, #200]	@ (8002ef8 <MX_TIM1_Init+0x11c>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e34:	4b30      	ldr	r3, [pc, #192]	@ (8002ef8 <MX_TIM1_Init+0x11c>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002e3a:	482f      	ldr	r0, [pc, #188]	@ (8002ef8 <MX_TIM1_Init+0x11c>)
 8002e3c:	f00b f884 	bl	800df48 <HAL_TIM_PWM_Init>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002e46:	f000 fb5b 	bl	8003500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e56:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4826      	ldr	r0, [pc, #152]	@ (8002ef8 <MX_TIM1_Init+0x11c>)
 8002e5e:	f00c fa8b 	bl	800f378 <HAL_TIMEx_MasterConfigSynchronization>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002e68:	f000 fb4a 	bl	8003500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e6c:	2360      	movs	r3, #96	@ 0x60
 8002e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 1620;
 8002e70:	f240 6354 	movw	r3, #1620	@ 0x654
 8002e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002e76:	2302      	movs	r3, #2
 8002e78:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8002e82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8002e88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e8c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e92:	2200      	movs	r2, #0
 8002e94:	4619      	mov	r1, r3
 8002e96:	4818      	ldr	r0, [pc, #96]	@ (8002ef8 <MX_TIM1_Init+0x11c>)
 8002e98:	f00b fb54 	bl	800e544 <HAL_TIM_PWM_ConfigChannel>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002ea2:	f000 fb2d 	bl	8003500 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0xFF;
 8002eb2:	23ff      	movs	r3, #255	@ 0xff
 8002eb4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002eba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ebe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002ec8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4807      	ldr	r0, [pc, #28]	@ (8002ef8 <MX_TIM1_Init+0x11c>)
 8002edc:	f00c fae8 	bl	800f4b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002ee6:	f000 fb0b 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002eea:	4803      	ldr	r0, [pc, #12]	@ (8002ef8 <MX_TIM1_Init+0x11c>)
 8002eec:	f000 ff56 	bl	8003d9c <HAL_TIM_MspPostInit>

}
 8002ef0:	bf00      	nop
 8002ef2:	3760      	adds	r7, #96	@ 0x60
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	24000ec4 	.word	0x24000ec4
 8002efc:	40010000 	.word	0x40010000

08002f00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	@ 0x28
 8002f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f06:	f107 031c 	add.w	r3, r7, #28
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	605a      	str	r2, [r3, #4]
 8002f10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f12:	463b      	mov	r3, r7
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	611a      	str	r2, [r3, #16]
 8002f20:	615a      	str	r2, [r3, #20]
 8002f22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f24:	4b22      	ldr	r3, [pc, #136]	@ (8002fb0 <MX_TIM2_Init+0xb0>)
 8002f26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002f2c:	4b20      	ldr	r3, [pc, #128]	@ (8002fb0 <MX_TIM2_Init+0xb0>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f32:	4b1f      	ldr	r3, [pc, #124]	@ (8002fb0 <MX_TIM2_Init+0xb0>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002f38:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <MX_TIM2_Init+0xb0>)
 8002f3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f40:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb0 <MX_TIM2_Init+0xb0>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f46:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb0 <MX_TIM2_Init+0xb0>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f4c:	4818      	ldr	r0, [pc, #96]	@ (8002fb0 <MX_TIM2_Init+0xb0>)
 8002f4e:	f00a fffb 	bl	800df48 <HAL_TIM_PWM_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002f58:	f000 fad2 	bl	8003500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f64:	f107 031c 	add.w	r3, r7, #28
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4811      	ldr	r0, [pc, #68]	@ (8002fb0 <MX_TIM2_Init+0xb0>)
 8002f6c:	f00c fa04 	bl	800f378 <HAL_TIMEx_MasterConfigSynchronization>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002f76:	f000 fac3 	bl	8003500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f7a:	2360      	movs	r3, #96	@ 0x60
 8002f7c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f8a:	463b      	mov	r3, r7
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4807      	ldr	r0, [pc, #28]	@ (8002fb0 <MX_TIM2_Init+0xb0>)
 8002f92:	f00b fad7 	bl	800e544 <HAL_TIM_PWM_ConfigChannel>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002f9c:	f000 fab0 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002fa0:	4803      	ldr	r0, [pc, #12]	@ (8002fb0 <MX_TIM2_Init+0xb0>)
 8002fa2:	f000 fefb 	bl	8003d9c <HAL_TIM_MspPostInit>

}
 8002fa6:	bf00      	nop
 8002fa8:	3728      	adds	r7, #40	@ 0x28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	24000f10 	.word	0x24000f10

08002fb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fba:	f107 0314 	add.w	r3, r7, #20
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fd2:	4b20      	ldr	r3, [pc, #128]	@ (8003054 <MX_TIM3_Init+0xa0>)
 8002fd4:	4a20      	ldr	r2, [pc, #128]	@ (8003058 <MX_TIM3_Init+0xa4>)
 8002fd6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8003054 <MX_TIM3_Init+0xa0>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fde:	4b1d      	ldr	r3, [pc, #116]	@ (8003054 <MX_TIM3_Init+0xa0>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8003054 <MX_TIM3_Init+0xa0>)
 8002fe6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fec:	4b19      	ldr	r3, [pc, #100]	@ (8003054 <MX_TIM3_Init+0xa0>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff2:	4b18      	ldr	r3, [pc, #96]	@ (8003054 <MX_TIM3_Init+0xa0>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002ff8:	4816      	ldr	r0, [pc, #88]	@ (8003054 <MX_TIM3_Init+0xa0>)
 8002ffa:	f00b f9af 	bl	800e35c <HAL_TIM_IC_Init>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003004:	f000 fa7c 	bl	8003500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800300c:	2300      	movs	r3, #0
 800300e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	4619      	mov	r1, r3
 8003016:	480f      	ldr	r0, [pc, #60]	@ (8003054 <MX_TIM3_Init+0xa0>)
 8003018:	f00c f9ae 	bl	800f378 <HAL_TIMEx_MasterConfigSynchronization>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8003022:	f000 fa6d 	bl	8003500 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003026:	2300      	movs	r3, #0
 8003028:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800302a:	2301      	movs	r3, #1
 800302c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	2200      	movs	r2, #0
 800303a:	4619      	mov	r1, r3
 800303c:	4805      	ldr	r0, [pc, #20]	@ (8003054 <MX_TIM3_Init+0xa0>)
 800303e:	f00b f9e4 	bl	800e40a <HAL_TIM_IC_ConfigChannel>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003048:	f000 fa5a 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800304c:	bf00      	nop
 800304e:	3720      	adds	r7, #32
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	24000f5c 	.word	0x24000f5c
 8003058:	40000400 	.word	0x40000400

0800305c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	@ 0x28
 8003060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003062:	f107 031c 	add.w	r3, r7, #28
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800306e:	463b      	mov	r3, r7
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	611a      	str	r2, [r3, #16]
 800307c:	615a      	str	r2, [r3, #20]
 800307e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003080:	4b21      	ldr	r3, [pc, #132]	@ (8003108 <MX_TIM4_Init+0xac>)
 8003082:	4a22      	ldr	r2, [pc, #136]	@ (800310c <MX_TIM4_Init+0xb0>)
 8003084:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003086:	4b20      	ldr	r3, [pc, #128]	@ (8003108 <MX_TIM4_Init+0xac>)
 8003088:	2200      	movs	r2, #0
 800308a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800308c:	4b1e      	ldr	r3, [pc, #120]	@ (8003108 <MX_TIM4_Init+0xac>)
 800308e:	2200      	movs	r2, #0
 8003090:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003092:	4b1d      	ldr	r3, [pc, #116]	@ (8003108 <MX_TIM4_Init+0xac>)
 8003094:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003098:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800309a:	4b1b      	ldr	r3, [pc, #108]	@ (8003108 <MX_TIM4_Init+0xac>)
 800309c:	2200      	movs	r2, #0
 800309e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a0:	4b19      	ldr	r3, [pc, #100]	@ (8003108 <MX_TIM4_Init+0xac>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80030a6:	4818      	ldr	r0, [pc, #96]	@ (8003108 <MX_TIM4_Init+0xac>)
 80030a8:	f00a ff4e 	bl	800df48 <HAL_TIM_PWM_Init>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80030b2:	f000 fa25 	bl	8003500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030be:	f107 031c 	add.w	r3, r7, #28
 80030c2:	4619      	mov	r1, r3
 80030c4:	4810      	ldr	r0, [pc, #64]	@ (8003108 <MX_TIM4_Init+0xac>)
 80030c6:	f00c f957 	bl	800f378 <HAL_TIMEx_MasterConfigSynchronization>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80030d0:	f000 fa16 	bl	8003500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030d4:	2360      	movs	r3, #96	@ 0x60
 80030d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030dc:	2300      	movs	r3, #0
 80030de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030e4:	463b      	mov	r3, r7
 80030e6:	2200      	movs	r2, #0
 80030e8:	4619      	mov	r1, r3
 80030ea:	4807      	ldr	r0, [pc, #28]	@ (8003108 <MX_TIM4_Init+0xac>)
 80030ec:	f00b fa2a 	bl	800e544 <HAL_TIM_PWM_ConfigChannel>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80030f6:	f000 fa03 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80030fa:	4803      	ldr	r0, [pc, #12]	@ (8003108 <MX_TIM4_Init+0xac>)
 80030fc:	f000 fe4e 	bl	8003d9c <HAL_TIM_MspPostInit>

}
 8003100:	bf00      	nop
 8003102:	3728      	adds	r7, #40	@ 0x28
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	24000fa8 	.word	0x24000fa8
 800310c:	40000800 	.word	0x40000800

08003110 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003116:	f107 0314 	add.w	r3, r7, #20
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	605a      	str	r2, [r3, #4]
 8003120:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003122:	1d3b      	adds	r3, r7, #4
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800312e:	4b22      	ldr	r3, [pc, #136]	@ (80031b8 <MX_TIM15_Init+0xa8>)
 8003130:	4a22      	ldr	r2, [pc, #136]	@ (80031bc <MX_TIM15_Init+0xac>)
 8003132:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003134:	4b20      	ldr	r3, [pc, #128]	@ (80031b8 <MX_TIM15_Init+0xa8>)
 8003136:	2200      	movs	r2, #0
 8003138:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800313a:	4b1f      	ldr	r3, [pc, #124]	@ (80031b8 <MX_TIM15_Init+0xa8>)
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003140:	4b1d      	ldr	r3, [pc, #116]	@ (80031b8 <MX_TIM15_Init+0xa8>)
 8003142:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003146:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003148:	4b1b      	ldr	r3, [pc, #108]	@ (80031b8 <MX_TIM15_Init+0xa8>)
 800314a:	2200      	movs	r2, #0
 800314c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800314e:	4b1a      	ldr	r3, [pc, #104]	@ (80031b8 <MX_TIM15_Init+0xa8>)
 8003150:	2200      	movs	r2, #0
 8003152:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003154:	4b18      	ldr	r3, [pc, #96]	@ (80031b8 <MX_TIM15_Init+0xa8>)
 8003156:	2200      	movs	r2, #0
 8003158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800315a:	4817      	ldr	r0, [pc, #92]	@ (80031b8 <MX_TIM15_Init+0xa8>)
 800315c:	f00b f8fe 	bl	800e35c <HAL_TIM_IC_Init>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8003166:	f000 f9cb 	bl	8003500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003172:	f107 0314 	add.w	r3, r7, #20
 8003176:	4619      	mov	r1, r3
 8003178:	480f      	ldr	r0, [pc, #60]	@ (80031b8 <MX_TIM15_Init+0xa8>)
 800317a:	f00c f8fd 	bl	800f378 <HAL_TIMEx_MasterConfigSynchronization>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8003184:	f000 f9bc 	bl	8003500 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003188:	2300      	movs	r3, #0
 800318a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800318c:	2301      	movs	r3, #1
 800318e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003198:	1d3b      	adds	r3, r7, #4
 800319a:	2200      	movs	r2, #0
 800319c:	4619      	mov	r1, r3
 800319e:	4806      	ldr	r0, [pc, #24]	@ (80031b8 <MX_TIM15_Init+0xa8>)
 80031a0:	f00b f933 	bl	800e40a <HAL_TIM_IC_ConfigChannel>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 80031aa:	f000 f9a9 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80031ae:	bf00      	nop
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	24000ff4 	.word	0x24000ff4
 80031bc:	40014000 	.word	0x40014000

080031c0 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031d6:	4b11      	ldr	r3, [pc, #68]	@ (800321c <MX_DMA_Init+0x4c>)
 80031d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80031dc:	4a0f      	ldr	r2, [pc, #60]	@ (800321c <MX_DMA_Init+0x4c>)
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80031e6:	4b0d      	ldr	r3, [pc, #52]	@ (800321c <MX_DMA_Init+0x4c>)
 80031e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80031f4:	2200      	movs	r2, #0
 80031f6:	2100      	movs	r1, #0
 80031f8:	200c      	movs	r0, #12
 80031fa:	f004 fa20 	bl	800763e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80031fe:	200c      	movs	r0, #12
 8003200:	f004 fa37 	bl	8007672 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003204:	2200      	movs	r2, #0
 8003206:	2100      	movs	r1, #0
 8003208:	200d      	movs	r0, #13
 800320a:	f004 fa18 	bl	800763e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800320e:	200d      	movs	r0, #13
 8003210:	f004 fa2f 	bl	8007672 <HAL_NVIC_EnableIRQ>

}
 8003214:	bf00      	nop
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	58024400 	.word	0x58024400

08003220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08e      	sub	sp, #56	@ 0x38
 8003224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	609a      	str	r2, [r3, #8]
 8003232:	60da      	str	r2, [r3, #12]
 8003234:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003236:	4bab      	ldr	r3, [pc, #684]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 8003238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800323c:	4aa9      	ldr	r2, [pc, #676]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 800323e:	f043 0310 	orr.w	r3, r3, #16
 8003242:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003246:	4ba7      	ldr	r3, [pc, #668]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 8003248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	623b      	str	r3, [r7, #32]
 8003252:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003254:	4ba3      	ldr	r3, [pc, #652]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 8003256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800325a:	4aa2      	ldr	r2, [pc, #648]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 800325c:	f043 0304 	orr.w	r3, r3, #4
 8003260:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003264:	4b9f      	ldr	r3, [pc, #636]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 8003266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003272:	4b9c      	ldr	r3, [pc, #624]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 8003274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003278:	4a9a      	ldr	r2, [pc, #616]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 800327a:	f043 0320 	orr.w	r3, r3, #32
 800327e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003282:	4b98      	ldr	r3, [pc, #608]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 8003284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003290:	4b94      	ldr	r3, [pc, #592]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 8003292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003296:	4a93      	ldr	r2, [pc, #588]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 8003298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800329c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032a0:	4b90      	ldr	r3, [pc, #576]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 80032a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	4b8d      	ldr	r3, [pc, #564]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 80032b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032b4:	4a8b      	ldr	r2, [pc, #556]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032be:	4b89      	ldr	r3, [pc, #548]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 80032c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032cc:	4b85      	ldr	r3, [pc, #532]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 80032ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032d2:	4a84      	ldr	r2, [pc, #528]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032dc:	4b81      	ldr	r3, [pc, #516]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 80032de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032ea:	4b7e      	ldr	r3, [pc, #504]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 80032ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032f0:	4a7c      	ldr	r2, [pc, #496]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 80032f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032fa:	4b7a      	ldr	r3, [pc, #488]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 80032fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003308:	4b76      	ldr	r3, [pc, #472]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 800330a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800330e:	4a75      	ldr	r2, [pc, #468]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 8003310:	f043 0308 	orr.w	r3, r3, #8
 8003314:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003318:	4b72      	ldr	r3, [pc, #456]	@ (80034e4 <MX_GPIO_Init+0x2c4>)
 800331a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	607b      	str	r3, [r7, #4]
 8003324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_SET);
 8003326:	2201      	movs	r2, #1
 8003328:	f640 0105 	movw	r1, #2053	@ 0x805
 800332c:	486e      	ldr	r0, [pc, #440]	@ (80034e8 <MX_GPIO_Init+0x2c8>)
 800332e:	f007 fa51 	bl	800a7d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
 8003332:	2200      	movs	r2, #0
 8003334:	2102      	movs	r1, #2
 8003336:	486d      	ldr	r0, [pc, #436]	@ (80034ec <MX_GPIO_Init+0x2cc>)
 8003338:	f007 fa4c 	bl	800a7d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800333c:	2200      	movs	r2, #0
 800333e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003342:	4869      	ldr	r0, [pc, #420]	@ (80034e8 <MX_GPIO_Init+0x2c8>)
 8003344:	f007 fa46 	bl	800a7d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 8003348:	2201      	movs	r2, #1
 800334a:	2101      	movs	r1, #1
 800334c:	4868      	ldr	r0, [pc, #416]	@ (80034f0 <MX_GPIO_Init+0x2d0>)
 800334e:	f007 fa41 	bl	800a7d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);
 8003352:	2201      	movs	r2, #1
 8003354:	2101      	movs	r1, #1
 8003356:	4867      	ldr	r0, [pc, #412]	@ (80034f4 <MX_GPIO_Init+0x2d4>)
 8003358:	f007 fa3c 	bl	800a7d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800335c:	2200      	movs	r2, #0
 800335e:	2102      	movs	r1, #2
 8003360:	4864      	ldr	r0, [pc, #400]	@ (80034f4 <MX_GPIO_Init+0x2d4>)
 8003362:	f007 fa37 	bl	800a7d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003366:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800336c:	2300      	movs	r3, #0
 800336e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003374:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003378:	4619      	mov	r1, r3
 800337a:	485f      	ldr	r0, [pc, #380]	@ (80034f8 <MX_GPIO_Init+0x2d8>)
 800337c:	f007 f86a 	bl	800a454 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin|LED_RED_Pin;
 8003380:	f644 0305 	movw	r3, #18437	@ 0x4805
 8003384:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003386:	2301      	movs	r3, #1
 8003388:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	2300      	movs	r3, #0
 8003390:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003396:	4619      	mov	r1, r3
 8003398:	4853      	ldr	r0, [pc, #332]	@ (80034e8 <MX_GPIO_Init+0x2c8>)
 800339a:	f007 f85b 	bl	800a454 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_500V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_500V_ENABLE_Pin;
 800339e:	2301      	movs	r3, #1
 80033a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033a2:	2300      	movs	r3, #0
 80033a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_500V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80033aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033ae:	4619      	mov	r1, r3
 80033b0:	484e      	ldr	r0, [pc, #312]	@ (80034ec <MX_GPIO_Init+0x2cc>)
 80033b2:	f007 f84f 	bl	800a454 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUTPUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_Pin;
 80033b6:	2302      	movs	r3, #2
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ba:	2301      	movs	r3, #1
 80033bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c2:	2300      	movs	r3, #0
 80033c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TEST_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80033c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033ca:	4619      	mov	r1, r3
 80033cc:	4847      	ldr	r0, [pc, #284]	@ (80034ec <MX_GPIO_Init+0x2cc>)
 80033ce:	f007 f841 	bl	800a454 <HAL_GPIO_Init>

  /*Configure GPIO pin : TURN_PLASMA_ON_Pin */
  GPIO_InitStruct.Pin = TURN_PLASMA_ON_Pin;
 80033d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033d8:	2300      	movs	r3, #0
 80033da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TURN_PLASMA_ON_GPIO_Port, &GPIO_InitStruct);
 80033e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033e4:	4619      	mov	r1, r3
 80033e6:	4843      	ldr	r0, [pc, #268]	@ (80034f4 <MX_GPIO_Init+0x2d4>)
 80033e8:	f007 f834 	bl	800a454 <HAL_GPIO_Init>

  /*Configure GPIO pin : INP_COMP_IRQ_Pin */
  GPIO_InitStruct.Pin = INP_COMP_IRQ_Pin;
 80033ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80033f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80033f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INP_COMP_IRQ_GPIO_Port, &GPIO_InitStruct);
 80033fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003400:	4619      	mov	r1, r3
 8003402:	483c      	ldr	r0, [pc, #240]	@ (80034f4 <MX_GPIO_Init+0x2d4>)
 8003404:	f007 f826 	bl	800a454 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_OFF_IRQ_Pin */
  GPIO_InitStruct.Pin = POWER_OFF_IRQ_Pin;
 8003408:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800340c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800340e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003412:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003414:	2300      	movs	r3, #0
 8003416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(POWER_OFF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003418:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800341c:	4619      	mov	r1, r3
 800341e:	4835      	ldr	r0, [pc, #212]	@ (80034f4 <MX_GPIO_Init+0x2d4>)
 8003420:	f007 f818 	bl	800a454 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8003424:	2380      	movs	r3, #128	@ 0x80
 8003426:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003428:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800342c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	2300      	movs	r3, #0
 8003430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8003432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003436:	4619      	mov	r1, r3
 8003438:	482c      	ldr	r0, [pc, #176]	@ (80034ec <MX_GPIO_Init+0x2cc>)
 800343a:	f007 f80b 	bl	800a454 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800343e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003444:	2300      	movs	r3, #0
 8003446:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800344c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003450:	4619      	mov	r1, r3
 8003452:	482a      	ldr	r0, [pc, #168]	@ (80034fc <MX_GPIO_Init+0x2dc>)
 8003454:	f006 fffe 	bl	800a454 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8003458:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345e:	2302      	movs	r3, #2
 8003460:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003466:	2300      	movs	r3, #0
 8003468:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800346a:	230a      	movs	r3, #10
 800346c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800346e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003472:	4619      	mov	r1, r3
 8003474:	4821      	ldr	r0, [pc, #132]	@ (80034fc <MX_GPIO_Init+0x2dc>)
 8003476:	f006 ffed 	bl	800a454 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_3V3_SWITCH_Pin */
  GPIO_InitStruct.Pin = OUT_3V3_SWITCH_Pin;
 800347a:	2301      	movs	r3, #1
 800347c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800347e:	2301      	movs	r3, #1
 8003480:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003486:	2300      	movs	r3, #0
 8003488:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(OUT_3V3_SWITCH_GPIO_Port, &GPIO_InitStruct);
 800348a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800348e:	4619      	mov	r1, r3
 8003490:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <MX_GPIO_Init+0x2d0>)
 8003492:	f006 ffdf 	bl	800a454 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_15V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_15V_ENABLE_Pin;
 8003496:	2302      	movs	r3, #2
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800349a:	2300      	movs	r3, #0
 800349c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_15V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80034a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034a6:	4619      	mov	r1, r3
 80034a8:	4811      	ldr	r0, [pc, #68]	@ (80034f0 <MX_GPIO_Init+0x2d0>)
 80034aa:	f006 ffd3 	bl	800a454 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ACTIVE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_ACTIVE_Pin|LED_YELLOW_Pin;
 80034ae:	2303      	movs	r3, #3
 80034b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b2:	2301      	movs	r3, #1
 80034b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ba:	2300      	movs	r3, #0
 80034bc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034c2:	4619      	mov	r1, r3
 80034c4:	480b      	ldr	r0, [pc, #44]	@ (80034f4 <MX_GPIO_Init+0x2d4>)
 80034c6:	f006 ffc5 	bl	800a454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80034ca:	2200      	movs	r2, #0
 80034cc:	2100      	movs	r1, #0
 80034ce:	2028      	movs	r0, #40	@ 0x28
 80034d0:	f004 f8b5 	bl	800763e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80034d4:	2028      	movs	r0, #40	@ 0x28
 80034d6:	f004 f8cc 	bl	8007672 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80034da:	bf00      	nop
 80034dc:	3738      	adds	r7, #56	@ 0x38
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	58024400 	.word	0x58024400
 80034e8:	58020400 	.word	0x58020400
 80034ec:	58021800 	.word	0x58021800
 80034f0:	58020c00 	.word	0x58020c00
 80034f4:	58021000 	.word	0x58021000
 80034f8:	58020800 	.word	0x58020800
 80034fc:	58020000 	.word	0x58020000

08003500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003504:	b672      	cpsid	i
}
 8003506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003508:	bf00      	nop
 800350a:	e7fd      	b.n	8003508 <Error_Handler+0x8>

0800350c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003512:	4b0a      	ldr	r3, [pc, #40]	@ (800353c <HAL_MspInit+0x30>)
 8003514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003518:	4a08      	ldr	r2, [pc, #32]	@ (800353c <HAL_MspInit+0x30>)
 800351a:	f043 0302 	orr.w	r3, r3, #2
 800351e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003522:	4b06      	ldr	r3, [pc, #24]	@ (800353c <HAL_MspInit+0x30>)
 8003524:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	607b      	str	r3, [r7, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	58024400 	.word	0x58024400

08003540 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b090      	sub	sp, #64	@ 0x40
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003548:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4aaa      	ldr	r2, [pc, #680]	@ (8003808 <HAL_ADC_MspInit+0x2c8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d16b      	bne.n	800363a <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003562:	4baa      	ldr	r3, [pc, #680]	@ (800380c <HAL_ADC_MspInit+0x2cc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3301      	adds	r3, #1
 8003568:	4aa8      	ldr	r2, [pc, #672]	@ (800380c <HAL_ADC_MspInit+0x2cc>)
 800356a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800356c:	4ba7      	ldr	r3, [pc, #668]	@ (800380c <HAL_ADC_MspInit+0x2cc>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d10e      	bne.n	8003592 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003574:	4ba6      	ldr	r3, [pc, #664]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 8003576:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800357a:	4aa5      	ldr	r2, [pc, #660]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 800357c:	f043 0320 	orr.w	r3, r3, #32
 8003580:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003584:	4ba2      	ldr	r3, [pc, #648]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 8003586:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003592:	4b9f      	ldr	r3, [pc, #636]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 8003594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003598:	4a9d      	ldr	r2, [pc, #628]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035a2:	4b9b      	ldr	r3, [pc, #620]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 80035a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 80035b0:	2319      	movs	r3, #25
 80035b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035b4:	2303      	movs	r3, #3
 80035b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035c0:	4619      	mov	r1, r3
 80035c2:	4894      	ldr	r0, [pc, #592]	@ (8003814 <HAL_ADC_MspInit+0x2d4>)
 80035c4:	f006 ff46 	bl	800a454 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 80035c8:	4b93      	ldr	r3, [pc, #588]	@ (8003818 <HAL_ADC_MspInit+0x2d8>)
 80035ca:	4a94      	ldr	r2, [pc, #592]	@ (800381c <HAL_ADC_MspInit+0x2dc>)
 80035cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80035ce:	4b92      	ldr	r3, [pc, #584]	@ (8003818 <HAL_ADC_MspInit+0x2d8>)
 80035d0:	2209      	movs	r2, #9
 80035d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035d4:	4b90      	ldr	r3, [pc, #576]	@ (8003818 <HAL_ADC_MspInit+0x2d8>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035da:	4b8f      	ldr	r3, [pc, #572]	@ (8003818 <HAL_ADC_MspInit+0x2d8>)
 80035dc:	2200      	movs	r2, #0
 80035de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80035e0:	4b8d      	ldr	r3, [pc, #564]	@ (8003818 <HAL_ADC_MspInit+0x2d8>)
 80035e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80035e8:	4b8b      	ldr	r3, [pc, #556]	@ (8003818 <HAL_ADC_MspInit+0x2d8>)
 80035ea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80035f0:	4b89      	ldr	r3, [pc, #548]	@ (8003818 <HAL_ADC_MspInit+0x2d8>)
 80035f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80035f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80035f8:	4b87      	ldr	r3, [pc, #540]	@ (8003818 <HAL_ADC_MspInit+0x2d8>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80035fe:	4b86      	ldr	r3, [pc, #536]	@ (8003818 <HAL_ADC_MspInit+0x2d8>)
 8003600:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003604:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003606:	4b84      	ldr	r3, [pc, #528]	@ (8003818 <HAL_ADC_MspInit+0x2d8>)
 8003608:	2200      	movs	r2, #0
 800360a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800360c:	4882      	ldr	r0, [pc, #520]	@ (8003818 <HAL_ADC_MspInit+0x2d8>)
 800360e:	f004 f84b 	bl	80076a8 <HAL_DMA_Init>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8003618:	f7ff ff72 	bl	8003500 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a7e      	ldr	r2, [pc, #504]	@ (8003818 <HAL_ADC_MspInit+0x2d8>)
 8003620:	659a      	str	r2, [r3, #88]	@ 0x58
 8003622:	4a7d      	ldr	r2, [pc, #500]	@ (8003818 <HAL_ADC_MspInit+0x2d8>)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003628:	2200      	movs	r2, #0
 800362a:	2100      	movs	r1, #0
 800362c:	2012      	movs	r0, #18
 800362e:	f004 f806 	bl	800763e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003632:	2012      	movs	r0, #18
 8003634:	f004 f81d 	bl	8007672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003638:	e0e2      	b.n	8003800 <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC2)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a78      	ldr	r2, [pc, #480]	@ (8003820 <HAL_ADC_MspInit+0x2e0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d156      	bne.n	80036f2 <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003644:	4b71      	ldr	r3, [pc, #452]	@ (800380c <HAL_ADC_MspInit+0x2cc>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	4a70      	ldr	r2, [pc, #448]	@ (800380c <HAL_ADC_MspInit+0x2cc>)
 800364c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800364e:	4b6f      	ldr	r3, [pc, #444]	@ (800380c <HAL_ADC_MspInit+0x2cc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d10e      	bne.n	8003674 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003656:	4b6e      	ldr	r3, [pc, #440]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 8003658:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800365c:	4a6c      	ldr	r2, [pc, #432]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 800365e:	f043 0320 	orr.w	r3, r3, #32
 8003662:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003666:	4b6a      	ldr	r3, [pc, #424]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 8003668:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	623b      	str	r3, [r7, #32]
 8003672:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003674:	4b66      	ldr	r3, [pc, #408]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 8003676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800367a:	4a65      	ldr	r2, [pc, #404]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003684:	4b62      	ldr	r3, [pc, #392]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 8003686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	61fb      	str	r3, [r7, #28]
 8003690:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003692:	4b5f      	ldr	r3, [pc, #380]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 8003694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003698:	4a5d      	ldr	r2, [pc, #372]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 800369a:	f043 0302 	orr.w	r3, r3, #2
 800369e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 80036a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80036b0:	2360      	movs	r3, #96	@ 0x60
 80036b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036b4:	2303      	movs	r3, #3
 80036b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036c0:	4619      	mov	r1, r3
 80036c2:	4854      	ldr	r0, [pc, #336]	@ (8003814 <HAL_ADC_MspInit+0x2d4>)
 80036c4:	f006 fec6 	bl	800a454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80036c8:	2302      	movs	r3, #2
 80036ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036cc:	2303      	movs	r3, #3
 80036ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036d8:	4619      	mov	r1, r3
 80036da:	4852      	ldr	r0, [pc, #328]	@ (8003824 <HAL_ADC_MspInit+0x2e4>)
 80036dc:	f006 feba 	bl	800a454 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80036e0:	2200      	movs	r2, #0
 80036e2:	2100      	movs	r1, #0
 80036e4:	2012      	movs	r0, #18
 80036e6:	f003 ffaa 	bl	800763e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80036ea:	2012      	movs	r0, #18
 80036ec:	f003 ffc1 	bl	8007672 <HAL_NVIC_EnableIRQ>
}
 80036f0:	e086      	b.n	8003800 <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC3)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a4c      	ldr	r2, [pc, #304]	@ (8003828 <HAL_ADC_MspInit+0x2e8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	f040 8081 	bne.w	8003800 <HAL_ADC_MspInit+0x2c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80036fe:	4b44      	ldr	r3, [pc, #272]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 8003700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003704:	4a42      	ldr	r2, [pc, #264]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 8003706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800370a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800370e:	4b40      	ldr	r3, [pc, #256]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 8003710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003714:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800371c:	4b3c      	ldr	r3, [pc, #240]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 800371e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003722:	4a3b      	ldr	r2, [pc, #236]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 8003724:	f043 0320 	orr.w	r3, r3, #32
 8003728:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800372c:	4b38      	ldr	r3, [pc, #224]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 800372e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800373a:	4b35      	ldr	r3, [pc, #212]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 800373c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003740:	4a33      	ldr	r2, [pc, #204]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 8003742:	f043 0304 	orr.w	r3, r3, #4
 8003746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800374a:	4b31      	ldr	r3, [pc, #196]	@ (8003810 <HAL_ADC_MspInit+0x2d0>)
 800374c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8003758:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 800375c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800375e:	2303      	movs	r3, #3
 8003760:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2300      	movs	r3, #0
 8003764:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003766:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800376a:	4619      	mov	r1, r3
 800376c:	482f      	ldr	r0, [pc, #188]	@ (800382c <HAL_ADC_MspInit+0x2ec>)
 800376e:	f006 fe71 	bl	800a454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003772:	2301      	movs	r3, #1
 8003774:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003776:	2303      	movs	r3, #3
 8003778:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377a:	2300      	movs	r3, #0
 800377c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800377e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003782:	4619      	mov	r1, r3
 8003784:	482a      	ldr	r0, [pc, #168]	@ (8003830 <HAL_ADC_MspInit+0x2f0>)
 8003786:	f006 fe65 	bl	800a454 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800378a:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 800378e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8003792:	f000 fe21 	bl	80043d8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003796:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800379a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800379e:	f000 fe1b 	bl	80043d8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 80037a2:	4b24      	ldr	r3, [pc, #144]	@ (8003834 <HAL_ADC_MspInit+0x2f4>)
 80037a4:	4a24      	ldr	r2, [pc, #144]	@ (8003838 <HAL_ADC_MspInit+0x2f8>)
 80037a6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80037a8:	4b22      	ldr	r3, [pc, #136]	@ (8003834 <HAL_ADC_MspInit+0x2f4>)
 80037aa:	2273      	movs	r2, #115	@ 0x73
 80037ac:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037ae:	4b21      	ldr	r3, [pc, #132]	@ (8003834 <HAL_ADC_MspInit+0x2f4>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80037b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003834 <HAL_ADC_MspInit+0x2f4>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80037ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003834 <HAL_ADC_MspInit+0x2f4>)
 80037bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037c0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003834 <HAL_ADC_MspInit+0x2f4>)
 80037c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037c8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003834 <HAL_ADC_MspInit+0x2f4>)
 80037cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037d0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80037d2:	4b18      	ldr	r3, [pc, #96]	@ (8003834 <HAL_ADC_MspInit+0x2f4>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80037d8:	4b16      	ldr	r3, [pc, #88]	@ (8003834 <HAL_ADC_MspInit+0x2f4>)
 80037da:	2200      	movs	r2, #0
 80037dc:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037de:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <HAL_ADC_MspInit+0x2f4>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80037e4:	4813      	ldr	r0, [pc, #76]	@ (8003834 <HAL_ADC_MspInit+0x2f4>)
 80037e6:	f003 ff5f 	bl	80076a8 <HAL_DMA_Init>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_ADC_MspInit+0x2b4>
      Error_Handler();
 80037f0:	f7ff fe86 	bl	8003500 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003834 <HAL_ADC_MspInit+0x2f4>)
 80037f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80037fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003834 <HAL_ADC_MspInit+0x2f4>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003800:	bf00      	nop
 8003802:	3740      	adds	r7, #64	@ 0x40
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40022000 	.word	0x40022000
 800380c:	24001048 	.word	0x24001048
 8003810:	58024400 	.word	0x58024400
 8003814:	58020000 	.word	0x58020000
 8003818:	24000bd0 	.word	0x24000bd0
 800381c:	40020040 	.word	0x40020040
 8003820:	40022100 	.word	0x40022100
 8003824:	58020400 	.word	0x58020400
 8003828:	58026000 	.word	0x58026000
 800382c:	58021400 	.word	0x58021400
 8003830:	58020800 	.word	0x58020800
 8003834:	24000c48 	.word	0x24000c48
 8003838:	40020028 	.word	0x40020028

0800383c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08a      	sub	sp, #40	@ 0x28
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003844:	f107 0314 	add.w	r3, r7, #20
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a21      	ldr	r2, [pc, #132]	@ (80038e0 <HAL_COMP_MspInit+0xa4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d13b      	bne.n	80038d6 <HAL_COMP_MspInit+0x9a>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 800385e:	4b21      	ldr	r3, [pc, #132]	@ (80038e4 <HAL_COMP_MspInit+0xa8>)
 8003860:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003864:	4a1f      	ldr	r2, [pc, #124]	@ (80038e4 <HAL_COMP_MspInit+0xa8>)
 8003866:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800386a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800386e:	4b1d      	ldr	r3, [pc, #116]	@ (80038e4 <HAL_COMP_MspInit+0xa8>)
 8003870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003874:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800387c:	4b19      	ldr	r3, [pc, #100]	@ (80038e4 <HAL_COMP_MspInit+0xa8>)
 800387e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003882:	4a18      	ldr	r2, [pc, #96]	@ (80038e4 <HAL_COMP_MspInit+0xa8>)
 8003884:	f043 0310 	orr.w	r3, r3, #16
 8003888:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800388c:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <HAL_COMP_MspInit+0xa8>)
 800388e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE7     ------> COMP2_INM
    PE11     ------> COMP2_INP
    PE13     ------> COMP2_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 800389a:	f44f 6308 	mov.w	r3, #2176	@ 0x880
 800389e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038a0:	2303      	movs	r3, #3
 80038a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	4619      	mov	r1, r3
 80038ae:	480e      	ldr	r0, [pc, #56]	@ (80038e8 <HAL_COMP_MspInit+0xac>)
 80038b0:	f006 fdd0 	bl	800a454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80038b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ba:	2302      	movs	r3, #2
 80038bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c2:	2300      	movs	r3, #0
 80038c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_COMP2;
 80038c6:	230d      	movs	r3, #13
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038ca:	f107 0314 	add.w	r3, r7, #20
 80038ce:	4619      	mov	r1, r3
 80038d0:	4805      	ldr	r0, [pc, #20]	@ (80038e8 <HAL_COMP_MspInit+0xac>)
 80038d2:	f006 fdbf 	bl	800a454 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 80038d6:	bf00      	nop
 80038d8:	3728      	adds	r7, #40	@ 0x28
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	58003810 	.word	0x58003810
 80038e4:	58024400 	.word	0x58024400
 80038e8:	58021000 	.word	0x58021000

080038ec <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08e      	sub	sp, #56	@ 0x38
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	60da      	str	r2, [r3, #12]
 8003902:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a59      	ldr	r2, [pc, #356]	@ (8003a70 <HAL_ETH_MspInit+0x184>)
 800390a:	4293      	cmp	r3, r2
 800390c:	f040 80ab 	bne.w	8003a66 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003910:	4b58      	ldr	r3, [pc, #352]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 8003912:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003916:	4a57      	ldr	r2, [pc, #348]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 8003918:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800391c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003920:	4b54      	ldr	r3, [pc, #336]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 8003922:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003926:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800392e:	4b51      	ldr	r3, [pc, #324]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 8003930:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003934:	4a4f      	ldr	r2, [pc, #316]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 8003936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800393a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800393e:	4b4d      	ldr	r3, [pc, #308]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 8003940:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003948:	61fb      	str	r3, [r7, #28]
 800394a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800394c:	4b49      	ldr	r3, [pc, #292]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 800394e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003952:	4a48      	ldr	r2, [pc, #288]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 8003954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003958:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800395c:	4b45      	ldr	r3, [pc, #276]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 800395e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800396a:	4b42      	ldr	r3, [pc, #264]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 800396c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003970:	4a40      	ldr	r2, [pc, #256]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 8003972:	f043 0304 	orr.w	r3, r3, #4
 8003976:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800397a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 800397c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003988:	4b3a      	ldr	r3, [pc, #232]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 800398a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800398e:	4a39      	ldr	r2, [pc, #228]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003998:	4b36      	ldr	r3, [pc, #216]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 800399a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a6:	4b33      	ldr	r3, [pc, #204]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 80039a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039ac:	4a31      	ldr	r2, [pc, #196]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 80039ae:	f043 0302 	orr.w	r3, r3, #2
 80039b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 80039b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80039c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 80039c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 80039cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039d4:	4b27      	ldr	r3, [pc, #156]	@ (8003a74 <HAL_ETH_MspInit+0x188>)
 80039d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80039e2:	2332      	movs	r3, #50	@ 0x32
 80039e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e6:	2302      	movs	r3, #2
 80039e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ee:	2300      	movs	r3, #0
 80039f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80039f2:	230b      	movs	r3, #11
 80039f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039fa:	4619      	mov	r1, r3
 80039fc:	481e      	ldr	r0, [pc, #120]	@ (8003a78 <HAL_ETH_MspInit+0x18c>)
 80039fe:	f006 fd29 	bl	800a454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003a02:	2386      	movs	r3, #134	@ 0x86
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a06:	2302      	movs	r3, #2
 8003a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a12:	230b      	movs	r3, #11
 8003a14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4817      	ldr	r0, [pc, #92]	@ (8003a7c <HAL_ETH_MspInit+0x190>)
 8003a1e:	f006 fd19 	bl	800a454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003a22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a30:	2300      	movs	r3, #0
 8003a32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a34:	230b      	movs	r3, #11
 8003a36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4810      	ldr	r0, [pc, #64]	@ (8003a80 <HAL_ETH_MspInit+0x194>)
 8003a40:	f006 fd08 	bl	800a454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003a44:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003a48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a52:	2300      	movs	r3, #0
 8003a54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a56:	230b      	movs	r3, #11
 8003a58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4808      	ldr	r0, [pc, #32]	@ (8003a84 <HAL_ETH_MspInit+0x198>)
 8003a62:	f006 fcf7 	bl	800a454 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003a66:	bf00      	nop
 8003a68:	3738      	adds	r7, #56	@ 0x38
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40028000 	.word	0x40028000
 8003a74:	58024400 	.word	0x58024400
 8003a78:	58020800 	.word	0x58020800
 8003a7c:	58020000 	.word	0x58020000
 8003a80:	58020400 	.word	0x58020400
 8003a84:	58021800 	.word	0x58021800

08003a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b0ba      	sub	sp, #232	@ 0xe8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a90:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	60da      	str	r2, [r3, #12]
 8003a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003aa0:	f107 0318 	add.w	r3, r7, #24
 8003aa4:	22b8      	movs	r2, #184	@ 0xb8
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f00d ff36 	bl	801191a <memset>
  if(huart->Instance==LPUART1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a4d      	ldr	r2, [pc, #308]	@ (8003be8 <HAL_UART_MspInit+0x160>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d146      	bne.n	8003b46 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003ab8:	f04f 0204 	mov.w	r2, #4
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aca:	f107 0318 	add.w	r3, r7, #24
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f007 fe54 	bl	800b77c <HAL_RCCEx_PeriphCLKConfig>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003ada:	f7ff fd11 	bl	8003500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003ade:	4b43      	ldr	r3, [pc, #268]	@ (8003bec <HAL_UART_MspInit+0x164>)
 8003ae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ae4:	4a41      	ldr	r2, [pc, #260]	@ (8003bec <HAL_UART_MspInit+0x164>)
 8003ae6:	f043 0308 	orr.w	r3, r3, #8
 8003aea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003aee:	4b3f      	ldr	r3, [pc, #252]	@ (8003bec <HAL_UART_MspInit+0x164>)
 8003af0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bec <HAL_UART_MspInit+0x164>)
 8003afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b02:	4a3a      	ldr	r2, [pc, #232]	@ (8003bec <HAL_UART_MspInit+0x164>)
 8003b04:	f043 0302 	orr.w	r3, r3, #2
 8003b08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b0c:	4b37      	ldr	r3, [pc, #220]	@ (8003bec <HAL_UART_MspInit+0x164>)
 8003b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b1a:	23c0      	movs	r3, #192	@ 0xc0
 8003b1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b20:	2302      	movs	r3, #2
 8003b22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8003b32:	2308      	movs	r3, #8
 8003b34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b38:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	482c      	ldr	r0, [pc, #176]	@ (8003bf0 <HAL_UART_MspInit+0x168>)
 8003b40:	f006 fc88 	bl	800a454 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003b44:	e04b      	b.n	8003bde <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8003bf4 <HAL_UART_MspInit+0x16c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d146      	bne.n	8003bde <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003b50:	f04f 0202 	mov.w	r2, #2
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b62:	f107 0318 	add.w	r3, r7, #24
 8003b66:	4618      	mov	r0, r3
 8003b68:	f007 fe08 	bl	800b77c <HAL_RCCEx_PeriphCLKConfig>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8003b72:	f7ff fcc5 	bl	8003500 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b76:	4b1d      	ldr	r3, [pc, #116]	@ (8003bec <HAL_UART_MspInit+0x164>)
 8003b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bec <HAL_UART_MspInit+0x164>)
 8003b7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b86:	4b19      	ldr	r3, [pc, #100]	@ (8003bec <HAL_UART_MspInit+0x164>)
 8003b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b94:	4b15      	ldr	r3, [pc, #84]	@ (8003bec <HAL_UART_MspInit+0x164>)
 8003b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b9a:	4a14      	ldr	r2, [pc, #80]	@ (8003bec <HAL_UART_MspInit+0x164>)
 8003b9c:	f043 0308 	orr.w	r3, r3, #8
 8003ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ba4:	4b11      	ldr	r3, [pc, #68]	@ (8003bec <HAL_UART_MspInit+0x164>)
 8003ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8003bb2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003bcc:	2307      	movs	r3, #7
 8003bce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bd2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4807      	ldr	r0, [pc, #28]	@ (8003bf8 <HAL_UART_MspInit+0x170>)
 8003bda:	f006 fc3b 	bl	800a454 <HAL_GPIO_Init>
}
 8003bde:	bf00      	nop
 8003be0:	37e8      	adds	r7, #232	@ 0xe8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	58000c00 	.word	0x58000c00
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	58020400 	.word	0x58020400
 8003bf4:	40004800 	.word	0x40004800
 8003bf8:	58020c00 	.word	0x58020c00

08003bfc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a20      	ldr	r2, [pc, #128]	@ (8003c8c <HAL_TIM_PWM_MspInit+0x90>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d10f      	bne.n	8003c2e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c0e:	4b20      	ldr	r3, [pc, #128]	@ (8003c90 <HAL_TIM_PWM_MspInit+0x94>)
 8003c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c14:	4a1e      	ldr	r2, [pc, #120]	@ (8003c90 <HAL_TIM_PWM_MspInit+0x94>)
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8003c90 <HAL_TIM_PWM_MspInit+0x94>)
 8003c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003c2c:	e028      	b.n	8003c80 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM2)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c36:	d10f      	bne.n	8003c58 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c38:	4b15      	ldr	r3, [pc, #84]	@ (8003c90 <HAL_TIM_PWM_MspInit+0x94>)
 8003c3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c3e:	4a14      	ldr	r2, [pc, #80]	@ (8003c90 <HAL_TIM_PWM_MspInit+0x94>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003c48:	4b11      	ldr	r3, [pc, #68]	@ (8003c90 <HAL_TIM_PWM_MspInit+0x94>)
 8003c4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	693b      	ldr	r3, [r7, #16]
}
 8003c56:	e013      	b.n	8003c80 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c94 <HAL_TIM_PWM_MspInit+0x98>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d10e      	bne.n	8003c80 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c62:	4b0b      	ldr	r3, [pc, #44]	@ (8003c90 <HAL_TIM_PWM_MspInit+0x94>)
 8003c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c68:	4a09      	ldr	r2, [pc, #36]	@ (8003c90 <HAL_TIM_PWM_MspInit+0x94>)
 8003c6a:	f043 0304 	orr.w	r3, r3, #4
 8003c6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003c72:	4b07      	ldr	r3, [pc, #28]	@ (8003c90 <HAL_TIM_PWM_MspInit+0x94>)
 8003c74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
}
 8003c80:	bf00      	nop
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40010000 	.word	0x40010000
 8003c90:	58024400 	.word	0x58024400
 8003c94:	40000800 	.word	0x40000800

08003c98 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08c      	sub	sp, #48	@ 0x30
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	f107 031c 	add.w	r3, r7, #28
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a34      	ldr	r2, [pc, #208]	@ (8003d88 <HAL_TIM_IC_MspInit+0xf0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d12e      	bne.n	8003d18 <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cba:	4b34      	ldr	r3, [pc, #208]	@ (8003d8c <HAL_TIM_IC_MspInit+0xf4>)
 8003cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003cc0:	4a32      	ldr	r2, [pc, #200]	@ (8003d8c <HAL_TIM_IC_MspInit+0xf4>)
 8003cc2:	f043 0302 	orr.w	r3, r3, #2
 8003cc6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003cca:	4b30      	ldr	r3, [pc, #192]	@ (8003d8c <HAL_TIM_IC_MspInit+0xf4>)
 8003ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8003d8c <HAL_TIM_IC_MspInit+0xf4>)
 8003cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cde:	4a2b      	ldr	r2, [pc, #172]	@ (8003d8c <HAL_TIM_IC_MspInit+0xf4>)
 8003ce0:	f043 0304 	orr.w	r3, r3, #4
 8003ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ce8:	4b28      	ldr	r3, [pc, #160]	@ (8003d8c <HAL_TIM_IC_MspInit+0xf4>)
 8003cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003cf6:	2340      	movs	r3, #64	@ 0x40
 8003cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d02:	2300      	movs	r3, #0
 8003d04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d06:	2302      	movs	r3, #2
 8003d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d0a:	f107 031c 	add.w	r3, r7, #28
 8003d0e:	4619      	mov	r1, r3
 8003d10:	481f      	ldr	r0, [pc, #124]	@ (8003d90 <HAL_TIM_IC_MspInit+0xf8>)
 8003d12:	f006 fb9f 	bl	800a454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003d16:	e032      	b.n	8003d7e <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM15)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003d94 <HAL_TIM_IC_MspInit+0xfc>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d12d      	bne.n	8003d7e <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003d22:	4b1a      	ldr	r3, [pc, #104]	@ (8003d8c <HAL_TIM_IC_MspInit+0xf4>)
 8003d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d28:	4a18      	ldr	r2, [pc, #96]	@ (8003d8c <HAL_TIM_IC_MspInit+0xf4>)
 8003d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d32:	4b16      	ldr	r3, [pc, #88]	@ (8003d8c <HAL_TIM_IC_MspInit+0xf4>)
 8003d34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d40:	4b12      	ldr	r3, [pc, #72]	@ (8003d8c <HAL_TIM_IC_MspInit+0xf4>)
 8003d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d46:	4a11      	ldr	r2, [pc, #68]	@ (8003d8c <HAL_TIM_IC_MspInit+0xf4>)
 8003d48:	f043 0310 	orr.w	r3, r3, #16
 8003d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d50:	4b0e      	ldr	r3, [pc, #56]	@ (8003d8c <HAL_TIM_IC_MspInit+0xf4>)
 8003d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003d5e:	2320      	movs	r3, #32
 8003d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d62:	2302      	movs	r3, #2
 8003d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d66:	2301      	movs	r3, #1
 8003d68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003d6e:	2304      	movs	r3, #4
 8003d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d72:	f107 031c 	add.w	r3, r7, #28
 8003d76:	4619      	mov	r1, r3
 8003d78:	4807      	ldr	r0, [pc, #28]	@ (8003d98 <HAL_TIM_IC_MspInit+0x100>)
 8003d7a:	f006 fb6b 	bl	800a454 <HAL_GPIO_Init>
}
 8003d7e:	bf00      	nop
 8003d80:	3730      	adds	r7, #48	@ 0x30
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40000400 	.word	0x40000400
 8003d8c:	58024400 	.word	0x58024400
 8003d90:	58020800 	.word	0x58020800
 8003d94:	40014000 	.word	0x40014000
 8003d98:	58021000 	.word	0x58021000

08003d9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08a      	sub	sp, #40	@ 0x28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da4:	f107 0314 	add.w	r3, r7, #20
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	60da      	str	r2, [r3, #12]
 8003db2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a39      	ldr	r2, [pc, #228]	@ (8003ea0 <HAL_TIM_MspPostInit+0x104>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d120      	bne.n	8003e00 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003dbe:	4b39      	ldr	r3, [pc, #228]	@ (8003ea4 <HAL_TIM_MspPostInit+0x108>)
 8003dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003dc4:	4a37      	ldr	r2, [pc, #220]	@ (8003ea4 <HAL_TIM_MspPostInit+0x108>)
 8003dc6:	f043 0310 	orr.w	r3, r3, #16
 8003dca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003dce:	4b35      	ldr	r3, [pc, #212]	@ (8003ea4 <HAL_TIM_MspPostInit+0x108>)
 8003dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8003ddc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de2:	2302      	movs	r3, #2
 8003de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dea:	2300      	movs	r3, #0
 8003dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003dee:	2301      	movs	r3, #1
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003df2:	f107 0314 	add.w	r3, r7, #20
 8003df6:	4619      	mov	r1, r3
 8003df8:	482b      	ldr	r0, [pc, #172]	@ (8003ea8 <HAL_TIM_MspPostInit+0x10c>)
 8003dfa:	f006 fb2b 	bl	800a454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003dfe:	e04a      	b.n	8003e96 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM2)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e08:	d120      	bne.n	8003e4c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0a:	4b26      	ldr	r3, [pc, #152]	@ (8003ea4 <HAL_TIM_MspPostInit+0x108>)
 8003e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e10:	4a24      	ldr	r2, [pc, #144]	@ (8003ea4 <HAL_TIM_MspPostInit+0x108>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e1a:	4b22      	ldr	r3, [pc, #136]	@ (8003ea4 <HAL_TIM_MspPostInit+0x108>)
 8003e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e2e:	2312      	movs	r3, #18
 8003e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e36:	2300      	movs	r3, #0
 8003e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e3e:	f107 0314 	add.w	r3, r7, #20
 8003e42:	4619      	mov	r1, r3
 8003e44:	4819      	ldr	r0, [pc, #100]	@ (8003eac <HAL_TIM_MspPostInit+0x110>)
 8003e46:	f006 fb05 	bl	800a454 <HAL_GPIO_Init>
}
 8003e4a:	e024      	b.n	8003e96 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a17      	ldr	r2, [pc, #92]	@ (8003eb0 <HAL_TIM_MspPostInit+0x114>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d11f      	bne.n	8003e96 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e56:	4b13      	ldr	r3, [pc, #76]	@ (8003ea4 <HAL_TIM_MspPostInit+0x108>)
 8003e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e5c:	4a11      	ldr	r2, [pc, #68]	@ (8003ea4 <HAL_TIM_MspPostInit+0x108>)
 8003e5e:	f043 0308 	orr.w	r3, r3, #8
 8003e62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e66:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea4 <HAL_TIM_MspPostInit+0x108>)
 8003e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003e74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e7a:	2312      	movs	r3, #18
 8003e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e82:	2300      	movs	r3, #0
 8003e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003e86:	2302      	movs	r3, #2
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e8a:	f107 0314 	add.w	r3, r7, #20
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4808      	ldr	r0, [pc, #32]	@ (8003eb4 <HAL_TIM_MspPostInit+0x118>)
 8003e92:	f006 fadf 	bl	800a454 <HAL_GPIO_Init>
}
 8003e96:	bf00      	nop
 8003e98:	3728      	adds	r7, #40	@ 0x28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40010000 	.word	0x40010000
 8003ea4:	58024400 	.word	0x58024400
 8003ea8:	58021000 	.word	0x58021000
 8003eac:	58020000 	.word	0x58020000
 8003eb0:	40000800 	.word	0x40000800
 8003eb4:	58020c00 	.word	0x58020c00

08003eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ebc:	bf00      	nop
 8003ebe:	e7fd      	b.n	8003ebc <NMI_Handler+0x4>

08003ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ec4:	bf00      	nop
 8003ec6:	e7fd      	b.n	8003ec4 <HardFault_Handler+0x4>

08003ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ecc:	bf00      	nop
 8003ece:	e7fd      	b.n	8003ecc <MemManage_Handler+0x4>

08003ed0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ed4:	bf00      	nop
 8003ed6:	e7fd      	b.n	8003ed4 <BusFault_Handler+0x4>

08003ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003edc:	bf00      	nop
 8003ede:	e7fd      	b.n	8003edc <UsageFault_Handler+0x4>

08003ee0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ef2:	bf00      	nop
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f00:	bf00      	nop
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f0e:	f000 fa0b 	bl	8004328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003f1c:	4802      	ldr	r0, [pc, #8]	@ (8003f28 <DMA1_Stream1_IRQHandler+0x10>)
 8003f1e:	f004 f985 	bl	800822c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	24000c48 	.word	0x24000c48

08003f2c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f30:	4802      	ldr	r0, [pc, #8]	@ (8003f3c <DMA1_Stream2_IRQHandler+0x10>)
 8003f32:	f004 f97b 	bl	800822c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	24000bd0 	.word	0x24000bd0

08003f40 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003f44:	4803      	ldr	r0, [pc, #12]	@ (8003f54 <ADC_IRQHandler+0x14>)
 8003f46:	f001 f969 	bl	800521c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003f4a:	4803      	ldr	r0, [pc, #12]	@ (8003f58 <ADC_IRQHandler+0x18>)
 8003f4c:	f001 f966 	bl	800521c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003f50:	bf00      	nop
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	24000a80 	.word	0x24000a80
 8003f58:	24000af0 	.word	0x24000af0

08003f5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INP_COMP_IRQ_Pin);
 8003f60:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003f64:	f006 fc4f 	bl	800a806 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(POWER_OFF_IRQ_Pin);
 8003f68:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003f6c:	f006 fc4b 	bl	800a806 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return 1;
 8003f78:	2301      	movs	r3, #1
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <_kill>:

int _kill(int pid, int sig)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f8e:	f00d fd25 	bl	80119dc <__errno>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2216      	movs	r2, #22
 8003f96:	601a      	str	r2, [r3, #0]
  return -1;
 8003f98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <_exit>:

void _exit (int status)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff ffe7 	bl	8003f84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fb6:	bf00      	nop
 8003fb8:	e7fd      	b.n	8003fb6 <_exit+0x12>

08003fba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b086      	sub	sp, #24
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	e00a      	b.n	8003fe2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fcc:	f3af 8000 	nop.w
 8003fd0:	4601      	mov	r1, r0
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	60ba      	str	r2, [r7, #8]
 8003fd8:	b2ca      	uxtb	r2, r1
 8003fda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	dbf0      	blt.n	8003fcc <_read+0x12>
  }

  return len;
 8003fea:	687b      	ldr	r3, [r7, #4]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e009      	b.n	800401a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	60ba      	str	r2, [r7, #8]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	3301      	adds	r3, #1
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	429a      	cmp	r2, r3
 8004020:	dbf1      	blt.n	8004006 <_write+0x12>
  }
  return len;
 8004022:	687b      	ldr	r3, [r7, #4]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <_close>:

int _close(int file)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004034:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004054:	605a      	str	r2, [r3, #4]
  return 0;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <_isatty>:

int _isatty(int file)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800406c:	2301      	movs	r3, #1
}
 800406e:	4618      	mov	r0, r3
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800407a:	b480      	push	{r7}
 800407c:	b085      	sub	sp, #20
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800409c:	4a14      	ldr	r2, [pc, #80]	@ (80040f0 <_sbrk+0x5c>)
 800409e:	4b15      	ldr	r3, [pc, #84]	@ (80040f4 <_sbrk+0x60>)
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040a8:	4b13      	ldr	r3, [pc, #76]	@ (80040f8 <_sbrk+0x64>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d102      	bne.n	80040b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040b0:	4b11      	ldr	r3, [pc, #68]	@ (80040f8 <_sbrk+0x64>)
 80040b2:	4a12      	ldr	r2, [pc, #72]	@ (80040fc <_sbrk+0x68>)
 80040b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040b6:	4b10      	ldr	r3, [pc, #64]	@ (80040f8 <_sbrk+0x64>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4413      	add	r3, r2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d207      	bcs.n	80040d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040c4:	f00d fc8a 	bl	80119dc <__errno>
 80040c8:	4603      	mov	r3, r0
 80040ca:	220c      	movs	r2, #12
 80040cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040d2:	e009      	b.n	80040e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040d4:	4b08      	ldr	r3, [pc, #32]	@ (80040f8 <_sbrk+0x64>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040da:	4b07      	ldr	r3, [pc, #28]	@ (80040f8 <_sbrk+0x64>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4413      	add	r3, r2
 80040e2:	4a05      	ldr	r2, [pc, #20]	@ (80040f8 <_sbrk+0x64>)
 80040e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040e6:	68fb      	ldr	r3, [r7, #12]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	24050000 	.word	0x24050000
 80040f4:	00000400 	.word	0x00000400
 80040f8:	2400104c 	.word	0x2400104c
 80040fc:	240011c0 	.word	0x240011c0

08004100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004104:	4b32      	ldr	r3, [pc, #200]	@ (80041d0 <SystemInit+0xd0>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410a:	4a31      	ldr	r2, [pc, #196]	@ (80041d0 <SystemInit+0xd0>)
 800410c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004114:	4b2f      	ldr	r3, [pc, #188]	@ (80041d4 <SystemInit+0xd4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	2b06      	cmp	r3, #6
 800411e:	d807      	bhi.n	8004130 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004120:	4b2c      	ldr	r3, [pc, #176]	@ (80041d4 <SystemInit+0xd4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f023 030f 	bic.w	r3, r3, #15
 8004128:	4a2a      	ldr	r2, [pc, #168]	@ (80041d4 <SystemInit+0xd4>)
 800412a:	f043 0307 	orr.w	r3, r3, #7
 800412e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004130:	4b29      	ldr	r3, [pc, #164]	@ (80041d8 <SystemInit+0xd8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a28      	ldr	r2, [pc, #160]	@ (80041d8 <SystemInit+0xd8>)
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800413c:	4b26      	ldr	r3, [pc, #152]	@ (80041d8 <SystemInit+0xd8>)
 800413e:	2200      	movs	r2, #0
 8004140:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004142:	4b25      	ldr	r3, [pc, #148]	@ (80041d8 <SystemInit+0xd8>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4924      	ldr	r1, [pc, #144]	@ (80041d8 <SystemInit+0xd8>)
 8004148:	4b24      	ldr	r3, [pc, #144]	@ (80041dc <SystemInit+0xdc>)
 800414a:	4013      	ands	r3, r2
 800414c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800414e:	4b21      	ldr	r3, [pc, #132]	@ (80041d4 <SystemInit+0xd4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d007      	beq.n	800416a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800415a:	4b1e      	ldr	r3, [pc, #120]	@ (80041d4 <SystemInit+0xd4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 030f 	bic.w	r3, r3, #15
 8004162:	4a1c      	ldr	r2, [pc, #112]	@ (80041d4 <SystemInit+0xd4>)
 8004164:	f043 0307 	orr.w	r3, r3, #7
 8004168:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800416a:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <SystemInit+0xd8>)
 800416c:	2200      	movs	r2, #0
 800416e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004170:	4b19      	ldr	r3, [pc, #100]	@ (80041d8 <SystemInit+0xd8>)
 8004172:	2200      	movs	r2, #0
 8004174:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004176:	4b18      	ldr	r3, [pc, #96]	@ (80041d8 <SystemInit+0xd8>)
 8004178:	2200      	movs	r2, #0
 800417a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800417c:	4b16      	ldr	r3, [pc, #88]	@ (80041d8 <SystemInit+0xd8>)
 800417e:	4a18      	ldr	r2, [pc, #96]	@ (80041e0 <SystemInit+0xe0>)
 8004180:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004182:	4b15      	ldr	r3, [pc, #84]	@ (80041d8 <SystemInit+0xd8>)
 8004184:	4a17      	ldr	r2, [pc, #92]	@ (80041e4 <SystemInit+0xe4>)
 8004186:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004188:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <SystemInit+0xd8>)
 800418a:	4a17      	ldr	r2, [pc, #92]	@ (80041e8 <SystemInit+0xe8>)
 800418c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800418e:	4b12      	ldr	r3, [pc, #72]	@ (80041d8 <SystemInit+0xd8>)
 8004190:	2200      	movs	r2, #0
 8004192:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004194:	4b10      	ldr	r3, [pc, #64]	@ (80041d8 <SystemInit+0xd8>)
 8004196:	4a14      	ldr	r2, [pc, #80]	@ (80041e8 <SystemInit+0xe8>)
 8004198:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800419a:	4b0f      	ldr	r3, [pc, #60]	@ (80041d8 <SystemInit+0xd8>)
 800419c:	2200      	movs	r2, #0
 800419e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80041a0:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <SystemInit+0xd8>)
 80041a2:	4a11      	ldr	r2, [pc, #68]	@ (80041e8 <SystemInit+0xe8>)
 80041a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80041a6:	4b0c      	ldr	r3, [pc, #48]	@ (80041d8 <SystemInit+0xd8>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80041ac:	4b0a      	ldr	r3, [pc, #40]	@ (80041d8 <SystemInit+0xd8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a09      	ldr	r2, [pc, #36]	@ (80041d8 <SystemInit+0xd8>)
 80041b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80041b8:	4b07      	ldr	r3, [pc, #28]	@ (80041d8 <SystemInit+0xd8>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80041be:	4b0b      	ldr	r3, [pc, #44]	@ (80041ec <SystemInit+0xec>)
 80041c0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80041c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80041c6:	bf00      	nop
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	e000ed00 	.word	0xe000ed00
 80041d4:	52002000 	.word	0x52002000
 80041d8:	58024400 	.word	0x58024400
 80041dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80041e0:	02020200 	.word	0x02020200
 80041e4:	01ff0000 	.word	0x01ff0000
 80041e8:	01010280 	.word	0x01010280
 80041ec:	52004000 	.word	0x52004000

080041f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80041f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004228 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80041f4:	f7ff ff84 	bl	8004100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041f8:	480c      	ldr	r0, [pc, #48]	@ (800422c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80041fa:	490d      	ldr	r1, [pc, #52]	@ (8004230 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80041fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004234 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80041fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004200:	e002      	b.n	8004208 <LoopCopyDataInit>

08004202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004206:	3304      	adds	r3, #4

08004208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800420a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800420c:	d3f9      	bcc.n	8004202 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800420e:	4a0a      	ldr	r2, [pc, #40]	@ (8004238 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004210:	4c0a      	ldr	r4, [pc, #40]	@ (800423c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004214:	e001      	b.n	800421a <LoopFillZerobss>

08004216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004218:	3204      	adds	r2, #4

0800421a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800421a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800421c:	d3fb      	bcc.n	8004216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800421e:	f00d fbe3 	bl	80119e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004222:	f7fe f9a7 	bl	8002574 <main>
  bx  lr
 8004226:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004228:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800422c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004230:	24000210 	.word	0x24000210
  ldr r2, =_sidata
 8004234:	08014700 	.word	0x08014700
  ldr r2, =_sbss
 8004238:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 800423c:	240011bc 	.word	0x240011bc

08004240 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004240:	e7fe      	b.n	8004240 <ADC3_IRQHandler>
	...

08004244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800424a:	2003      	movs	r0, #3
 800424c:	f003 f9ec 	bl	8007628 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004250:	f007 f8be 	bl	800b3d0 <HAL_RCC_GetSysClockFreq>
 8004254:	4602      	mov	r2, r0
 8004256:	4b15      	ldr	r3, [pc, #84]	@ (80042ac <HAL_Init+0x68>)
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	0a1b      	lsrs	r3, r3, #8
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	4913      	ldr	r1, [pc, #76]	@ (80042b0 <HAL_Init+0x6c>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
 800426c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800426e:	4b0f      	ldr	r3, [pc, #60]	@ (80042ac <HAL_Init+0x68>)
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	4a0e      	ldr	r2, [pc, #56]	@ (80042b0 <HAL_Init+0x6c>)
 8004278:	5cd3      	ldrb	r3, [r2, r3]
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
 8004284:	4a0b      	ldr	r2, [pc, #44]	@ (80042b4 <HAL_Init+0x70>)
 8004286:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004288:	4a0b      	ldr	r2, [pc, #44]	@ (80042b8 <HAL_Init+0x74>)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800428e:	2000      	movs	r0, #0
 8004290:	f000 f814 	bl	80042bc <HAL_InitTick>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e002      	b.n	80042a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800429e:	f7ff f935 	bl	800350c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	58024400 	.word	0x58024400
 80042b0:	08014318 	.word	0x08014318
 80042b4:	2400003c 	.word	0x2400003c
 80042b8:	24000038 	.word	0x24000038

080042bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80042c4:	4b15      	ldr	r3, [pc, #84]	@ (800431c <HAL_InitTick+0x60>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e021      	b.n	8004314 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80042d0:	4b13      	ldr	r3, [pc, #76]	@ (8004320 <HAL_InitTick+0x64>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4b11      	ldr	r3, [pc, #68]	@ (800431c <HAL_InitTick+0x60>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	4619      	mov	r1, r3
 80042da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042de:	fbb3 f3f1 	udiv	r3, r3, r1
 80042e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e6:	4618      	mov	r0, r3
 80042e8:	f003 f9d1 	bl	800768e <HAL_SYSTICK_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e00e      	b.n	8004314 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b0f      	cmp	r3, #15
 80042fa:	d80a      	bhi.n	8004312 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042fc:	2200      	movs	r2, #0
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004304:	f003 f99b 	bl	800763e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004308:	4a06      	ldr	r2, [pc, #24]	@ (8004324 <HAL_InitTick+0x68>)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	e000      	b.n	8004314 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	24000044 	.word	0x24000044
 8004320:	24000038 	.word	0x24000038
 8004324:	24000040 	.word	0x24000040

08004328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800432c:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <HAL_IncTick+0x20>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	4b06      	ldr	r3, [pc, #24]	@ (800434c <HAL_IncTick+0x24>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4413      	add	r3, r2
 8004338:	4a04      	ldr	r2, [pc, #16]	@ (800434c <HAL_IncTick+0x24>)
 800433a:	6013      	str	r3, [r2, #0]
}
 800433c:	bf00      	nop
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	24000044 	.word	0x24000044
 800434c:	24001050 	.word	0x24001050

08004350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  return uwTick;
 8004354:	4b03      	ldr	r3, [pc, #12]	@ (8004364 <HAL_GetTick+0x14>)
 8004356:	681b      	ldr	r3, [r3, #0]
}
 8004358:	4618      	mov	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	24001050 	.word	0x24001050

08004368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004370:	f7ff ffee 	bl	8004350 <HAL_GetTick>
 8004374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004380:	d005      	beq.n	800438e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004382:	4b0a      	ldr	r3, [pc, #40]	@ (80043ac <HAL_Delay+0x44>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800438e:	bf00      	nop
 8004390:	f7ff ffde 	bl	8004350 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	429a      	cmp	r2, r3
 800439e:	d8f7      	bhi.n	8004390 <HAL_Delay+0x28>
  {
  }
}
 80043a0:	bf00      	nop
 80043a2:	bf00      	nop
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	24000044 	.word	0x24000044

080043b0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80043b8:	4b06      	ldr	r3, [pc, #24]	@ (80043d4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80043c0:	4904      	ldr	r1, [pc, #16]	@ (80043d4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	604b      	str	r3, [r1, #4]
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	58000400 	.word	0x58000400

080043d8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80043e2:	4b07      	ldr	r3, [pc, #28]	@ (8004400 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	43db      	mvns	r3, r3
 80043ea:	401a      	ands	r2, r3
 80043ec:	4904      	ldr	r1, [pc, #16]	@ (8004400 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	604b      	str	r3, [r1, #4]
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	58000400 	.word	0x58000400

08004404 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	609a      	str	r2, [r3, #8]
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	609a      	str	r2, [r3, #8]
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3360      	adds	r3, #96	@ 0x60
 800447e:	461a      	mov	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4a10      	ldr	r2, [pc, #64]	@ (80044cc <LL_ADC_SetOffset+0x60>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d10b      	bne.n	80044a8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	4313      	orrs	r3, r2
 800449e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80044a6:	e00b      	b.n	80044c0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	430b      	orrs	r3, r1
 80044ba:	431a      	orrs	r2, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	601a      	str	r2, [r3, #0]
}
 80044c0:	bf00      	nop
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	58026000 	.word	0x58026000

080044d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3360      	adds	r3, #96	@ 0x60
 80044de:	461a      	mov	r2, r3
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f003 031f 	and.w	r3, r3, #31
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	fa01 f303 	lsl.w	r3, r1, r3
 800451c:	431a      	orrs	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	611a      	str	r2, [r3, #16]
}
 8004522:	bf00      	nop
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4a0c      	ldr	r2, [pc, #48]	@ (8004570 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00e      	beq.n	8004562 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3360      	adds	r3, #96	@ 0x60
 8004548:	461a      	mov	r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	431a      	orrs	r2, r3
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	601a      	str	r2, [r3, #0]
  }
}
 8004562:	bf00      	nop
 8004564:	371c      	adds	r7, #28
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	58026000 	.word	0x58026000

08004574 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4a0c      	ldr	r2, [pc, #48]	@ (80045b4 <LL_ADC_SetOffsetSaturation+0x40>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d10e      	bne.n	80045a6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3360      	adds	r3, #96	@ 0x60
 800458c:	461a      	mov	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	431a      	orrs	r2, r3
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80045a6:	bf00      	nop
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	58026000 	.word	0x58026000

080045b8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4a0c      	ldr	r2, [pc, #48]	@ (80045f8 <LL_ADC_SetOffsetSign+0x40>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d10e      	bne.n	80045ea <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3360      	adds	r3, #96	@ 0x60
 80045d0:	461a      	mov	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	431a      	orrs	r2, r3
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	58026000 	.word	0x58026000

080045fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3360      	adds	r3, #96	@ 0x60
 800460c:	461a      	mov	r2, r3
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4a0c      	ldr	r2, [pc, #48]	@ (800464c <LL_ADC_SetOffsetState+0x50>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d108      	bne.n	8004630 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	431a      	orrs	r2, r3
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800462e:	e007      	b.n	8004640 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	431a      	orrs	r2, r3
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	601a      	str	r2, [r3, #0]
}
 8004640:	bf00      	nop
 8004642:	371c      	adds	r7, #28
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	58026000 	.word	0x58026000

08004650 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004676:	b480      	push	{r7}
 8004678:	b087      	sub	sp, #28
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3330      	adds	r3, #48	@ 0x30
 8004686:	461a      	mov	r2, r3
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	0a1b      	lsrs	r3, r3, #8
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	f003 030c 	and.w	r3, r3, #12
 8004692:	4413      	add	r3, r2
 8004694:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	211f      	movs	r1, #31
 80046a2:	fa01 f303 	lsl.w	r3, r1, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	401a      	ands	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	0e9b      	lsrs	r3, r3, #26
 80046ae:	f003 011f 	and.w	r1, r3, #31
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f003 031f 	and.w	r3, r3, #31
 80046b8:	fa01 f303 	lsl.w	r3, r1, r3
 80046bc:	431a      	orrs	r2, r3
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80046c2:	bf00      	nop
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f023 0203 	bic.w	r2, r3, #3
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	60da      	str	r2, [r3, #12]
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f043 0201 	orr.w	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	60da      	str	r2, [r3, #12]
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a08      	ldr	r2, [pc, #32]	@ (8004744 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d107      	bne.n	8004736 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f023 0203 	bic.w	r2, r3, #3
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60da      	str	r2, [r3, #12]
  }
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	58026000 	.word	0x58026000

08004748 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004754:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800476e:	b480      	push	{r7}
 8004770:	b087      	sub	sp, #28
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3314      	adds	r3, #20
 800477e:	461a      	mov	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	0e5b      	lsrs	r3, r3, #25
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	f003 0304 	and.w	r3, r3, #4
 800478a:	4413      	add	r3, r2
 800478c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	0d1b      	lsrs	r3, r3, #20
 8004796:	f003 031f 	and.w	r3, r3, #31
 800479a:	2107      	movs	r1, #7
 800479c:	fa01 f303 	lsl.w	r3, r1, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	401a      	ands	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	0d1b      	lsrs	r3, r3, #20
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	fa01 f303 	lsl.w	r3, r1, r3
 80047b2:	431a      	orrs	r2, r3
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80047b8:	bf00      	nop
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4a1a      	ldr	r2, [pc, #104]	@ (800483c <LL_ADC_SetChannelSingleDiff+0x78>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d115      	bne.n	8004804 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047e4:	43db      	mvns	r3, r3
 80047e6:	401a      	ands	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f003 0318 	and.w	r3, r3, #24
 80047ee:	4914      	ldr	r1, [pc, #80]	@ (8004840 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80047f0:	40d9      	lsrs	r1, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	400b      	ands	r3, r1
 80047f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047fa:	431a      	orrs	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004802:	e014      	b.n	800482e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004810:	43db      	mvns	r3, r3
 8004812:	401a      	ands	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f003 0318 	and.w	r3, r3, #24
 800481a:	4909      	ldr	r1, [pc, #36]	@ (8004840 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800481c:	40d9      	lsrs	r1, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	400b      	ands	r3, r1
 8004822:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004826:	431a      	orrs	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800482e:	bf00      	nop
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	58026000 	.word	0x58026000
 8004840:	000fffff 	.word	0x000fffff

08004844 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
  *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	330c      	adds	r3, #12
 8004854:	4618      	mov	r0, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	0d1b      	lsrs	r3, r3, #20
 800485a:	f003 0103 	and.w	r1, r3, #3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f003 0201 	and.w	r2, r3, #1
 8004864:	4613      	mov	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4403      	add	r3, r0
 8004872:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	4b08      	ldr	r3, [pc, #32]	@ (800489c <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 800487c:	400b      	ands	r3, r1
 800487e:	43db      	mvns	r3, r3
 8004880:	401a      	ands	r2, r3
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	400b      	ands	r3, r1
 8004888:	431a      	orrs	r2, r3
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 800488e:	bf00      	nop
 8004890:	371c      	adds	r7, #28
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	7dcfffff 	.word	0x7dcfffff

080048a0 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b089      	sub	sp, #36	@ 0x24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  if (ADCx == ADC3)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4a29      	ldr	r2, [pc, #164]	@ (8004958 <LL_ADC_ConfigAnalogWDThresholds+0xb8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d115      	bne.n	80048e2 <LL_ADC_ConfigAnalogWDThresholds+0x42>
  {
    uint32_t __IO *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3320      	adds	r3, #32
 80048ba:	461a      	mov	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	0d1b      	lsrs	r3, r3, #20
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	4413      	add	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 22f0 	and.w	r2, r3, #4026593280	@ 0xf000f000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	0419      	lsls	r1, r3, #16
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	430b      	orrs	r3, r1
 80048da:	431a      	orrs	r2, r3
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	601a      	str	r2, [r3, #0]
                                                         + (LL_ADC_AWD_THRESHOLD_HIGH));

    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
  }
}
 80048e0:	e034      	b.n	800494c <LL_ADC_ConfigAnalogWDThresholds+0xac>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3320      	adds	r3, #32
 80048e6:	4618      	mov	r0, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	0d1b      	lsrs	r3, r3, #20
 80048ec:	f003 0103 	and.w	r1, r3, #3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0201 	and.w	r2, r3, #1
 80048f6:	4613      	mov	r3, r2
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	4413      	add	r3, r2
 80048fc:	440b      	add	r3, r1
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4403      	add	r3, r0
 8004904:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *preg2 = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3320      	adds	r3, #32
 800490a:	4618      	mov	r0, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	0d1b      	lsrs	r3, r3, #20
 8004910:	f003 0103 	and.w	r1, r3, #3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 0201 	and.w	r2, r3, #1
 800491a:	4613      	mov	r3, r2
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	4413      	add	r3, r2
 8004920:	440b      	add	r3, r1
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	3301      	adds	r3, #1
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4403      	add	r3, r0
 800492a:	61bb      	str	r3, [r7, #24]
    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	431a      	orrs	r2, r3
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	431a      	orrs	r2, r3
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	601a      	str	r2, [r3, #0]
}
 800494c:	bf00      	nop
 800494e:	3724      	adds	r7, #36	@ 0x24
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	58026000 	.word	0x58026000

0800495c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 031f 	and.w	r3, r3, #31
}
 800496c:	4618      	mov	r0, r3
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	4b04      	ldr	r3, [pc, #16]	@ (80049b4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80049a2:	4013      	ands	r3, r2
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6093      	str	r3, [r2, #8]
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	5fffffc0 	.word	0x5fffffc0

080049b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049cc:	d101      	bne.n	80049d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	4b05      	ldr	r3, [pc, #20]	@ (8004a04 <LL_ADC_EnableInternalRegulator+0x24>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	6fffffc0 	.word	0x6fffffc0

08004a08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a1c:	d101      	bne.n	8004a22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	4b05      	ldr	r3, [pc, #20]	@ (8004a54 <LL_ADC_Enable+0x24>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	f043 0201 	orr.w	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	7fffffc0 	.word	0x7fffffc0

08004a58 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	4b05      	ldr	r3, [pc, #20]	@ (8004a7c <LL_ADC_Disable+0x24>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	f043 0202 	orr.w	r2, r3, #2
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	7fffffc0 	.word	0x7fffffc0

08004a80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <LL_ADC_IsEnabled+0x18>
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <LL_ADC_IsEnabled+0x1a>
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d101      	bne.n	8004abe <LL_ADC_IsDisableOngoing+0x18>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <LL_ADC_IsDisableOngoing+0x1a>
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	4b05      	ldr	r3, [pc, #20]	@ (8004af0 <LL_ADC_REG_StartConversion+0x24>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	f043 0204 	orr.w	r2, r3, #4
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	7fffffc0 	.word	0x7fffffc0

08004af4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d101      	bne.n	8004b0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e000      	b.n	8004b0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d101      	bne.n	8004b32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2280      	movs	r2, #128	@ 0x80
 8004b4c:	601a      	str	r2, [r3, #0]
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b68:	601a      	str	r2, [r3, #0]
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b84:	601a      	str	r2, [r3, #0]
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	605a      	str	r2, [r3, #4]
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	605a      	str	r2, [r3, #4]
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	605a      	str	r2, [r3, #4]
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	605a      	str	r2, [r3, #4]
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	605a      	str	r2, [r3, #4]
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	605a      	str	r2, [r3, #4]
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
	...

08004c54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c54:	b590      	push	{r4, r7, lr}
 8004c56:	b089      	sub	sp, #36	@ 0x24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e1ee      	b.n	800504c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d109      	bne.n	8004c90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7fe fc5f 	bl	8003540 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fe8f 	bl	80049b8 <LL_ADC_IsDeepPowerDownEnabled>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d004      	beq.n	8004caa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff fe75 	bl	8004994 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff feaa 	bl	8004a08 <LL_ADC_IsInternalRegulatorEnabled>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d114      	bne.n	8004ce4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fe8e 	bl	80049e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cc4:	4b8e      	ldr	r3, [pc, #568]	@ (8004f00 <HAL_ADC_Init+0x2ac>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	099b      	lsrs	r3, r3, #6
 8004cca:	4a8e      	ldr	r2, [pc, #568]	@ (8004f04 <HAL_ADC_Init+0x2b0>)
 8004ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd0:	099b      	lsrs	r3, r3, #6
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004cd6:	e002      	b.n	8004cde <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1f9      	bne.n	8004cd8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff fe8d 	bl	8004a08 <LL_ADC_IsInternalRegulatorEnabled>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10d      	bne.n	8004d10 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf8:	f043 0210 	orr.w	r2, r3, #16
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d04:	f043 0201 	orr.w	r2, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff feed 	bl	8004af4 <LL_ADC_REG_IsConversionOngoing>
 8004d1a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f040 8188 	bne.w	800503a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f040 8184 	bne.w	800503a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d36:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004d3a:	f043 0202 	orr.w	r2, r3, #2
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff fe9a 	bl	8004a80 <LL_ADC_IsEnabled>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d136      	bne.n	8004dc0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a6c      	ldr	r2, [pc, #432]	@ (8004f08 <HAL_ADC_Init+0x2b4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d004      	beq.n	8004d66 <HAL_ADC_Init+0x112>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a6a      	ldr	r2, [pc, #424]	@ (8004f0c <HAL_ADC_Init+0x2b8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d10e      	bne.n	8004d84 <HAL_ADC_Init+0x130>
 8004d66:	4868      	ldr	r0, [pc, #416]	@ (8004f08 <HAL_ADC_Init+0x2b4>)
 8004d68:	f7ff fe8a 	bl	8004a80 <LL_ADC_IsEnabled>
 8004d6c:	4604      	mov	r4, r0
 8004d6e:	4867      	ldr	r0, [pc, #412]	@ (8004f0c <HAL_ADC_Init+0x2b8>)
 8004d70:	f7ff fe86 	bl	8004a80 <LL_ADC_IsEnabled>
 8004d74:	4603      	mov	r3, r0
 8004d76:	4323      	orrs	r3, r4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bf0c      	ite	eq
 8004d7c:	2301      	moveq	r3, #1
 8004d7e:	2300      	movne	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	e008      	b.n	8004d96 <HAL_ADC_Init+0x142>
 8004d84:	4862      	ldr	r0, [pc, #392]	@ (8004f10 <HAL_ADC_Init+0x2bc>)
 8004d86:	f7ff fe7b 	bl	8004a80 <LL_ADC_IsEnabled>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bf0c      	ite	eq
 8004d90:	2301      	moveq	r3, #1
 8004d92:	2300      	movne	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d012      	beq.n	8004dc0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a5a      	ldr	r2, [pc, #360]	@ (8004f08 <HAL_ADC_Init+0x2b4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_ADC_Init+0x15a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a58      	ldr	r2, [pc, #352]	@ (8004f0c <HAL_ADC_Init+0x2b8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d101      	bne.n	8004db2 <HAL_ADC_Init+0x15e>
 8004dae:	4a59      	ldr	r2, [pc, #356]	@ (8004f14 <HAL_ADC_Init+0x2c0>)
 8004db0:	e000      	b.n	8004db4 <HAL_ADC_Init+0x160>
 8004db2:	4a59      	ldr	r2, [pc, #356]	@ (8004f18 <HAL_ADC_Init+0x2c4>)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f7ff fb22 	bl	8004404 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a52      	ldr	r2, [pc, #328]	@ (8004f10 <HAL_ADC_Init+0x2bc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d129      	bne.n	8004e1e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	7e5b      	ldrb	r3, [r3, #25]
 8004dce:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004dd4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004dda:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d013      	beq.n	8004e0c <HAL_ADC_Init+0x1b8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b0c      	cmp	r3, #12
 8004dea:	d00d      	beq.n	8004e08 <HAL_ADC_Init+0x1b4>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b1c      	cmp	r3, #28
 8004df2:	d007      	beq.n	8004e04 <HAL_ADC_Init+0x1b0>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2b18      	cmp	r3, #24
 8004dfa:	d101      	bne.n	8004e00 <HAL_ADC_Init+0x1ac>
 8004dfc:	2318      	movs	r3, #24
 8004dfe:	e006      	b.n	8004e0e <HAL_ADC_Init+0x1ba>
 8004e00:	2300      	movs	r3, #0
 8004e02:	e004      	b.n	8004e0e <HAL_ADC_Init+0x1ba>
 8004e04:	2310      	movs	r3, #16
 8004e06:	e002      	b.n	8004e0e <HAL_ADC_Init+0x1ba>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	e000      	b.n	8004e0e <HAL_ADC_Init+0x1ba>
 8004e0c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004e0e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e16:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	e00e      	b.n	8004e3c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	7e5b      	ldrb	r3, [r3, #25]
 8004e22:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e28:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004e2e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e36:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d106      	bne.n	8004e54 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	045b      	lsls	r3, r3, #17
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d009      	beq.n	8004e70 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e60:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a26      	ldr	r2, [pc, #152]	@ (8004f10 <HAL_ADC_Init+0x2bc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d115      	bne.n	8004ea6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	4b26      	ldr	r3, [pc, #152]	@ (8004f1c <HAL_ADC_Init+0x2c8>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	69b9      	ldr	r1, [r7, #24]
 8004e8a:	430b      	orrs	r3, r1
 8004e8c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	611a      	str	r2, [r3, #16]
 8004ea4:	e009      	b.n	8004eba <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	4b1c      	ldr	r3, [pc, #112]	@ (8004f20 <HAL_ADC_Init+0x2cc>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	69b9      	ldr	r1, [r7, #24]
 8004eb6:	430b      	orrs	r3, r1
 8004eb8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff fe18 	bl	8004af4 <LL_ADC_REG_IsConversionOngoing>
 8004ec4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff fe25 	bl	8004b1a <LL_ADC_INJ_IsConversionOngoing>
 8004ed0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f040 808e 	bne.w	8004ff6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f040 808a 	bne.w	8004ff6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8004f10 <HAL_ADC_Init+0x2bc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d11b      	bne.n	8004f24 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	7e1b      	ldrb	r3, [r3, #24]
 8004ef0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ef8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	e018      	b.n	8004f32 <HAL_ADC_Init+0x2de>
 8004f00:	24000038 	.word	0x24000038
 8004f04:	053e2d63 	.word	0x053e2d63
 8004f08:	40022000 	.word	0x40022000
 8004f0c:	40022100 	.word	0x40022100
 8004f10:	58026000 	.word	0x58026000
 8004f14:	40022300 	.word	0x40022300
 8004f18:	58026300 	.word	0x58026300
 8004f1c:	fff04007 	.word	0xfff04007
 8004f20:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	7e1b      	ldrb	r3, [r3, #24]
 8004f28:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	4b46      	ldr	r3, [pc, #280]	@ (8005054 <HAL_ADC_Init+0x400>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	69b9      	ldr	r1, [r7, #24]
 8004f42:	430b      	orrs	r3, r1
 8004f44:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d137      	bne.n	8004fc0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f54:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a3f      	ldr	r2, [pc, #252]	@ (8005058 <HAL_ADC_Init+0x404>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d116      	bne.n	8004f8e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	4b3d      	ldr	r3, [pc, #244]	@ (800505c <HAL_ADC_Init+0x408>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004f72:	4311      	orrs	r1, r2
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f78:	4311      	orrs	r1, r2
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	611a      	str	r2, [r3, #16]
 8004f8c:	e020      	b.n	8004fd0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	4b32      	ldr	r3, [pc, #200]	@ (8005060 <HAL_ADC_Init+0x40c>)
 8004f96:	4013      	ands	r3, r2
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f9c:	3a01      	subs	r2, #1
 8004f9e:	0411      	lsls	r1, r2, #16
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004fa4:	4311      	orrs	r1, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004faa:	4311      	orrs	r1, r2
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0201 	orr.w	r2, r2, #1
 8004fbc:	611a      	str	r2, [r3, #16]
 8004fbe:	e007      	b.n	8004fd0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691a      	ldr	r2, [r3, #16]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0201 	bic.w	r2, r2, #1
 8004fce:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1b      	ldr	r2, [pc, #108]	@ (8005058 <HAL_ADC_Init+0x404>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d002      	beq.n	8004ff6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f001 fd99 	bl	8006b28 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d10c      	bne.n	8005018 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005004:	f023 010f 	bic.w	r1, r3, #15
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	1e5a      	subs	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	631a      	str	r2, [r3, #48]	@ 0x30
 8005016:	e007      	b.n	8005028 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 020f 	bic.w	r2, r2, #15
 8005026:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800502c:	f023 0303 	bic.w	r3, r3, #3
 8005030:	f043 0201 	orr.w	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	661a      	str	r2, [r3, #96]	@ 0x60
 8005038:	e007      	b.n	800504a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800503e:	f043 0210 	orr.w	r2, r3, #16
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800504a:	7ffb      	ldrb	r3, [r7, #31]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3724      	adds	r7, #36	@ 0x24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd90      	pop	{r4, r7, pc}
 8005054:	ffffbffc 	.word	0xffffbffc
 8005058:	58026000 	.word	0x58026000
 800505c:	fc00f81f 	.word	0xfc00f81f
 8005060:	fc00f81e 	.word	0xfc00f81e

08005064 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a60      	ldr	r2, [pc, #384]	@ (80051f8 <HAL_ADC_Start_DMA+0x194>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <HAL_ADC_Start_DMA+0x20>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a5f      	ldr	r2, [pc, #380]	@ (80051fc <HAL_ADC_Start_DMA+0x198>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d101      	bne.n	8005088 <HAL_ADC_Start_DMA+0x24>
 8005084:	4b5e      	ldr	r3, [pc, #376]	@ (8005200 <HAL_ADC_Start_DMA+0x19c>)
 8005086:	e000      	b.n	800508a <HAL_ADC_Start_DMA+0x26>
 8005088:	4b5e      	ldr	r3, [pc, #376]	@ (8005204 <HAL_ADC_Start_DMA+0x1a0>)
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fc66 	bl	800495c <LL_ADC_GetMultimode>
 8005090:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff fd2c 	bl	8004af4 <LL_ADC_REG_IsConversionOngoing>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f040 80a2 	bne.w	80051e8 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_ADC_Start_DMA+0x4e>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e09d      	b.n	80051ee <HAL_ADC_Start_DMA+0x18a>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d006      	beq.n	80050ce <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2b05      	cmp	r3, #5
 80050c4:	d003      	beq.n	80050ce <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b09      	cmp	r3, #9
 80050ca:	f040 8086 	bne.w	80051da <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f001 fbac 	bl	800682c <ADC_Enable>
 80050d4:	4603      	mov	r3, r0
 80050d6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80050d8:	7dfb      	ldrb	r3, [r7, #23]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d178      	bne.n	80051d0 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80050e2:	4b49      	ldr	r3, [pc, #292]	@ (8005208 <HAL_ADC_Start_DMA+0x1a4>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a42      	ldr	r2, [pc, #264]	@ (80051fc <HAL_ADC_Start_DMA+0x198>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d002      	beq.n	80050fe <HAL_ADC_Start_DMA+0x9a>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	e000      	b.n	8005100 <HAL_ADC_Start_DMA+0x9c>
 80050fe:	4b3e      	ldr	r3, [pc, #248]	@ (80051f8 <HAL_ADC_Start_DMA+0x194>)
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	6812      	ldr	r2, [r2, #0]
 8005104:	4293      	cmp	r3, r2
 8005106:	d002      	beq.n	800510e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d105      	bne.n	800511a <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005112:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800511e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d006      	beq.n	8005134 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800512a:	f023 0206 	bic.w	r2, r3, #6
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	665a      	str	r2, [r3, #100]	@ 0x64
 8005132:	e002      	b.n	800513a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800513e:	4a33      	ldr	r2, [pc, #204]	@ (800520c <HAL_ADC_Start_DMA+0x1a8>)
 8005140:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005146:	4a32      	ldr	r2, [pc, #200]	@ (8005210 <HAL_ADC_Start_DMA+0x1ac>)
 8005148:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800514e:	4a31      	ldr	r2, [pc, #196]	@ (8005214 <HAL_ADC_Start_DMA+0x1b0>)
 8005150:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	221c      	movs	r2, #28
 8005158:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0210 	orr.w	r2, r2, #16
 8005170:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a28      	ldr	r2, [pc, #160]	@ (8005218 <HAL_ADC_Start_DMA+0x1b4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d10f      	bne.n	800519c <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f7ff fac2 	bl	8004714 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff faad 	bl	80046f4 <LL_ADC_EnableDMAReq>
 800519a:	e007      	b.n	80051ac <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a4:	4619      	mov	r1, r3
 80051a6:	4610      	mov	r0, r2
 80051a8:	f7ff fa91 	bl	80046ce <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3340      	adds	r3, #64	@ 0x40
 80051b6:	4619      	mov	r1, r3
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f002 fdcc 	bl	8007d58 <HAL_DMA_Start_IT>
 80051c0:	4603      	mov	r3, r0
 80051c2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff fc7f 	bl	8004acc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80051ce:	e00d      	b.n	80051ec <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80051d8:	e008      	b.n	80051ec <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80051e6:	e001      	b.n	80051ec <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80051e8:	2302      	movs	r3, #2
 80051ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80051ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40022000 	.word	0x40022000
 80051fc:	40022100 	.word	0x40022100
 8005200:	40022300 	.word	0x40022300
 8005204:	58026300 	.word	0x58026300
 8005208:	fffff0fe 	.word	0xfffff0fe
 800520c:	080069ff 	.word	0x080069ff
 8005210:	08006ad7 	.word	0x08006ad7
 8005214:	08006af3 	.word	0x08006af3
 8005218:	58026000 	.word	0x58026000

0800521c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	@ 0x28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005224:	2300      	movs	r3, #0
 8005226:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a87      	ldr	r2, [pc, #540]	@ (800545c <HAL_ADC_IRQHandler+0x240>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d004      	beq.n	800524c <HAL_ADC_IRQHandler+0x30>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a86      	ldr	r2, [pc, #536]	@ (8005460 <HAL_ADC_IRQHandler+0x244>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d101      	bne.n	8005250 <HAL_ADC_IRQHandler+0x34>
 800524c:	4b85      	ldr	r3, [pc, #532]	@ (8005464 <HAL_ADC_IRQHandler+0x248>)
 800524e:	e000      	b.n	8005252 <HAL_ADC_IRQHandler+0x36>
 8005250:	4b85      	ldr	r3, [pc, #532]	@ (8005468 <HAL_ADC_IRQHandler+0x24c>)
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff fb82 	bl	800495c <LL_ADC_GetMultimode>
 8005258:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d017      	beq.n	8005294 <HAL_ADC_IRQHandler+0x78>
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d012      	beq.n	8005294 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005272:	f003 0310 	and.w	r3, r3, #16
 8005276:	2b00      	cmp	r3, #0
 8005278:	d105      	bne.n	8005286 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800527e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f001 fee8 	bl	800705c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2202      	movs	r2, #2
 8005292:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b00      	cmp	r3, #0
 800529c:	d004      	beq.n	80052a8 <HAL_ADC_IRQHandler+0x8c>
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 8083 	beq.w	80053ba <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d07d      	beq.n	80053ba <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c2:	f003 0310 	and.w	r3, r3, #16
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d105      	bne.n	80052d6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff f9b8 	bl	8004650 <LL_ADC_REG_IsTriggerSourceSWStart>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d062      	beq.n	80053ac <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a5d      	ldr	r2, [pc, #372]	@ (8005460 <HAL_ADC_IRQHandler+0x244>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d002      	beq.n	80052f6 <HAL_ADC_IRQHandler+0xda>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	e000      	b.n	80052f8 <HAL_ADC_IRQHandler+0xdc>
 80052f6:	4b59      	ldr	r3, [pc, #356]	@ (800545c <HAL_ADC_IRQHandler+0x240>)
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d008      	beq.n	8005312 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d005      	beq.n	8005312 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b05      	cmp	r3, #5
 800530a:	d002      	beq.n	8005312 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2b09      	cmp	r3, #9
 8005310:	d104      	bne.n	800531c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	623b      	str	r3, [r7, #32]
 800531a:	e00c      	b.n	8005336 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a4f      	ldr	r2, [pc, #316]	@ (8005460 <HAL_ADC_IRQHandler+0x244>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d002      	beq.n	800532c <HAL_ADC_IRQHandler+0x110>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	e000      	b.n	800532e <HAL_ADC_IRQHandler+0x112>
 800532c:	4b4b      	ldr	r3, [pc, #300]	@ (800545c <HAL_ADC_IRQHandler+0x240>)
 800532e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d135      	bne.n	80053ac <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b08      	cmp	r3, #8
 800534c:	d12e      	bne.n	80053ac <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fbce 	bl	8004af4 <LL_ADC_REG_IsConversionOngoing>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d11a      	bne.n	8005394 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 020c 	bic.w	r2, r2, #12
 800536c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005372:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800537e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d112      	bne.n	80053ac <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800538a:	f043 0201 	orr.w	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	661a      	str	r2, [r3, #96]	@ 0x60
 8005392:	e00b      	b.n	80053ac <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005398:	f043 0210 	orr.w	r2, r3, #16
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053a4:	f043 0201 	orr.w	r2, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7fc fc49 	bl	8001c44 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	220c      	movs	r2, #12
 80053b8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d004      	beq.n	80053ce <HAL_ADC_IRQHandler+0x1b2>
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10b      	bne.n	80053e6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 80a0 	beq.w	800551a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 809a 	beq.w	800551a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ea:	f003 0310 	and.w	r3, r3, #16
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d105      	bne.n	80053fe <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053f6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff f9a0 	bl	8004748 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005408:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff f91e 	bl	8004650 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005414:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a11      	ldr	r2, [pc, #68]	@ (8005460 <HAL_ADC_IRQHandler+0x244>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d002      	beq.n	8005426 <HAL_ADC_IRQHandler+0x20a>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	e000      	b.n	8005428 <HAL_ADC_IRQHandler+0x20c>
 8005426:	4b0d      	ldr	r3, [pc, #52]	@ (800545c <HAL_ADC_IRQHandler+0x240>)
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6812      	ldr	r2, [r2, #0]
 800542c:	4293      	cmp	r3, r2
 800542e:	d008      	beq.n	8005442 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2b06      	cmp	r3, #6
 800543a:	d002      	beq.n	8005442 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b07      	cmp	r3, #7
 8005440:	d104      	bne.n	800544c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	623b      	str	r3, [r7, #32]
 800544a:	e014      	b.n	8005476 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a03      	ldr	r2, [pc, #12]	@ (8005460 <HAL_ADC_IRQHandler+0x244>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00a      	beq.n	800546c <HAL_ADC_IRQHandler+0x250>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	e008      	b.n	800546e <HAL_ADC_IRQHandler+0x252>
 800545c:	40022000 	.word	0x40022000
 8005460:	40022100 	.word	0x40022100
 8005464:	40022300 	.word	0x40022300
 8005468:	58026300 	.word	0x58026300
 800546c:	4b84      	ldr	r3, [pc, #528]	@ (8005680 <HAL_ADC_IRQHandler+0x464>)
 800546e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d047      	beq.n	800550c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d007      	beq.n	8005496 <HAL_ADC_IRQHandler+0x27a>
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d03f      	beq.n	800550c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005492:	2b00      	cmp	r3, #0
 8005494:	d13a      	bne.n	800550c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a0:	2b40      	cmp	r3, #64	@ 0x40
 80054a2:	d133      	bne.n	800550c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d12e      	bne.n	800550c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff fb31 	bl	8004b1a <LL_ADC_INJ_IsConversionOngoing>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d11a      	bne.n	80054f4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80054cc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d112      	bne.n	800550c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ea:	f043 0201 	orr.w	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	661a      	str	r2, [r3, #96]	@ 0x60
 80054f2:	e00b      	b.n	800550c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054f8:	f043 0210 	orr.w	r2, r3, #16
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005504:	f043 0201 	orr.w	r2, r3, #1
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f001 fd7d 	bl	800700c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2260      	movs	r2, #96	@ 0x60
 8005518:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005520:	2b00      	cmp	r3, #0
 8005522:	d011      	beq.n	8005548 <HAL_ADC_IRQHandler+0x32c>
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00c      	beq.n	8005548 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005532:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f8b2 	bl	80056a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2280      	movs	r2, #128	@ 0x80
 8005546:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800554e:	2b00      	cmp	r3, #0
 8005550:	d012      	beq.n	8005578 <HAL_ADC_IRQHandler+0x35c>
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00d      	beq.n	8005578 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005560:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f001 fd63 	bl	8007034 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005576:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800557e:	2b00      	cmp	r3, #0
 8005580:	d012      	beq.n	80055a8 <HAL_ADC_IRQHandler+0x38c>
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00d      	beq.n	80055a8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005590:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f001 fd55 	bl	8007048 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d043      	beq.n	800563a <HAL_ADC_IRQHandler+0x41e>
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	f003 0310 	and.w	r3, r3, #16
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d03e      	beq.n	800563a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d102      	bne.n	80055ca <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80055c4:	2301      	movs	r3, #1
 80055c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80055c8:	e021      	b.n	800560e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d015      	beq.n	80055fc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a2a      	ldr	r2, [pc, #168]	@ (8005680 <HAL_ADC_IRQHandler+0x464>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d004      	beq.n	80055e4 <HAL_ADC_IRQHandler+0x3c8>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a29      	ldr	r2, [pc, #164]	@ (8005684 <HAL_ADC_IRQHandler+0x468>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d101      	bne.n	80055e8 <HAL_ADC_IRQHandler+0x3cc>
 80055e4:	4b28      	ldr	r3, [pc, #160]	@ (8005688 <HAL_ADC_IRQHandler+0x46c>)
 80055e6:	e000      	b.n	80055ea <HAL_ADC_IRQHandler+0x3ce>
 80055e8:	4b28      	ldr	r3, [pc, #160]	@ (800568c <HAL_ADC_IRQHandler+0x470>)
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff f9c4 	bl	8004978 <LL_ADC_GetMultiDMATransfer>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00b      	beq.n	800560e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80055f6:	2301      	movs	r3, #1
 80055f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055fa:	e008      	b.n	800560e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800560a:	2301      	movs	r3, #1
 800560c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	2b01      	cmp	r3, #1
 8005612:	d10e      	bne.n	8005632 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005618:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005624:	f043 0202 	orr.w	r2, r3, #2
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7fc fadd 	bl	8001bec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2210      	movs	r2, #16
 8005638:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005640:	2b00      	cmp	r3, #0
 8005642:	d018      	beq.n	8005676 <HAL_ADC_IRQHandler+0x45a>
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800564a:	2b00      	cmp	r3, #0
 800564c:	d013      	beq.n	8005676 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005652:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800565e:	f043 0208 	orr.w	r2, r3, #8
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800566e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f001 fcd5 	bl	8007020 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005676:	bf00      	nop
 8005678:	3728      	adds	r7, #40	@ 0x28
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40022000 	.word	0x40022000
 8005684:	40022100 	.word	0x40022100
 8005688:	40022300 	.word	0x40022300
 800568c:	58026300 	.word	0x58026300

08005690 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80056b8:	b590      	push	{r4, r7, lr}
 80056ba:	b0b9      	sub	sp, #228	@ 0xe4
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056d2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4aa9      	ldr	r2, [pc, #676]	@ (8005980 <HAL_ADC_ConfigChannel+0x2c8>)
 80056da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d102      	bne.n	80056ec <HAL_ADC_ConfigChannel+0x34>
 80056e6:	2302      	movs	r3, #2
 80056e8:	f000 bcfa 	b.w	80060e0 <HAL_ADC_ConfigChannel+0xa28>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff f9fb 	bl	8004af4 <LL_ADC_REG_IsConversionOngoing>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	f040 84de 	bne.w	80060c2 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a9e      	ldr	r2, [pc, #632]	@ (8005984 <HAL_ADC_ConfigChannel+0x2cc>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d033      	beq.n	8005778 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005718:	2b00      	cmp	r3, #0
 800571a:	d108      	bne.n	800572e <HAL_ADC_ConfigChannel+0x76>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	0e9b      	lsrs	r3, r3, #26
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	2201      	movs	r2, #1
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	e01d      	b.n	800576a <HAL_ADC_ConfigChannel+0xb2>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005736:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800573a:	fa93 f3a3 	rbit	r3, r3
 800573e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005742:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005746:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800574a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8005752:	2320      	movs	r3, #32
 8005754:	e004      	b.n	8005760 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8005756:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800575a:	fab3 f383 	clz	r3, r3
 800575e:	b2db      	uxtb	r3, r3
 8005760:	f003 031f 	and.w	r3, r3, #31
 8005764:	2201      	movs	r2, #1
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6812      	ldr	r2, [r2, #0]
 800576e:	69d1      	ldr	r1, [r2, #28]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	430b      	orrs	r3, r1
 8005776:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	6859      	ldr	r1, [r3, #4]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	f7fe ff76 	bl	8004676 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff f9b0 	bl	8004af4 <LL_ADC_REG_IsConversionOngoing>
 8005794:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff f9bc 	bl	8004b1a <LL_ADC_INJ_IsConversionOngoing>
 80057a2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80057a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f040 8270 	bne.w	8005c90 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80057b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f040 826b 	bne.w	8005c90 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	6819      	ldr	r1, [r3, #0]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f7fe ffd1 	bl	800476e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a6c      	ldr	r2, [pc, #432]	@ (8005984 <HAL_ADC_ConfigChannel+0x2cc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d10d      	bne.n	80057f2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	695a      	ldr	r2, [r3, #20]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	08db      	lsrs	r3, r3, #3
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80057f0:	e032      	b.n	8005858 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80057f2:	4b65      	ldr	r3, [pc, #404]	@ (8005988 <HAL_ADC_ConfigChannel+0x2d0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80057fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057fe:	d10b      	bne.n	8005818 <HAL_ADC_ConfigChannel+0x160>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	695a      	ldr	r2, [r3, #20]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	089b      	lsrs	r3, r3, #2
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	fa02 f303 	lsl.w	r3, r2, r3
 8005816:	e01d      	b.n	8005854 <HAL_ADC_ConfigChannel+0x19c>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f003 0310 	and.w	r3, r3, #16
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10b      	bne.n	800583e <HAL_ADC_ConfigChannel+0x186>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	695a      	ldr	r2, [r3, #20]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	089b      	lsrs	r3, r3, #2
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	e00a      	b.n	8005854 <HAL_ADC_ConfigChannel+0x19c>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	695a      	ldr	r2, [r3, #20]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	089b      	lsrs	r3, r3, #2
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	2b04      	cmp	r3, #4
 800585e:	d048      	beq.n	80058f2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6818      	ldr	r0, [r3, #0]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	6919      	ldr	r1, [r3, #16]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005870:	f7fe fdfc 	bl	800446c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a42      	ldr	r2, [pc, #264]	@ (8005984 <HAL_ADC_ConfigChannel+0x2cc>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d119      	bne.n	80058b2 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6919      	ldr	r1, [r3, #16]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	461a      	mov	r2, r3
 800588c:	f7fe fe94 	bl	80045b8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	6919      	ldr	r1, [r3, #16]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d102      	bne.n	80058a8 <HAL_ADC_ConfigChannel+0x1f0>
 80058a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058a6:	e000      	b.n	80058aa <HAL_ADC_ConfigChannel+0x1f2>
 80058a8:	2300      	movs	r3, #0
 80058aa:	461a      	mov	r2, r3
 80058ac:	f7fe fe62 	bl	8004574 <LL_ADC_SetOffsetSaturation>
 80058b0:	e1ee      	b.n	8005c90 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6919      	ldr	r1, [r3, #16]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d102      	bne.n	80058ca <HAL_ADC_ConfigChannel+0x212>
 80058c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80058c8:	e000      	b.n	80058cc <HAL_ADC_ConfigChannel+0x214>
 80058ca:	2300      	movs	r3, #0
 80058cc:	461a      	mov	r2, r3
 80058ce:	f7fe fe2f 	bl	8004530 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6919      	ldr	r1, [r3, #16]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	7e1b      	ldrb	r3, [r3, #24]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d102      	bne.n	80058e8 <HAL_ADC_ConfigChannel+0x230>
 80058e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80058e6:	e000      	b.n	80058ea <HAL_ADC_ConfigChannel+0x232>
 80058e8:	2300      	movs	r3, #0
 80058ea:	461a      	mov	r2, r3
 80058ec:	f7fe fe06 	bl	80044fc <LL_ADC_SetDataRightShift>
 80058f0:	e1ce      	b.n	8005c90 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a23      	ldr	r2, [pc, #140]	@ (8005984 <HAL_ADC_ConfigChannel+0x2cc>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	f040 8181 	bne.w	8005c00 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2100      	movs	r1, #0
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe fde3 	bl	80044d0 <LL_ADC_GetOffsetChannel>
 800590a:	4603      	mov	r3, r0
 800590c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <HAL_ADC_ConfigChannel+0x272>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2100      	movs	r1, #0
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe fdd8 	bl	80044d0 <LL_ADC_GetOffsetChannel>
 8005920:	4603      	mov	r3, r0
 8005922:	0e9b      	lsrs	r3, r3, #26
 8005924:	f003 021f 	and.w	r2, r3, #31
 8005928:	e01e      	b.n	8005968 <HAL_ADC_ConfigChannel+0x2b0>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2100      	movs	r1, #0
 8005930:	4618      	mov	r0, r3
 8005932:	f7fe fdcd 	bl	80044d0 <LL_ADC_GetOffsetChannel>
 8005936:	4603      	mov	r3, r0
 8005938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005940:	fa93 f3a3 	rbit	r3, r3
 8005944:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8005948:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800594c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8005950:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8005958:	2320      	movs	r3, #32
 800595a:	e004      	b.n	8005966 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800595c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005960:	fab3 f383 	clz	r3, r3
 8005964:	b2db      	uxtb	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10b      	bne.n	800598c <HAL_ADC_ConfigChannel+0x2d4>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	0e9b      	lsrs	r3, r3, #26
 800597a:	f003 031f 	and.w	r3, r3, #31
 800597e:	e01e      	b.n	80059be <HAL_ADC_ConfigChannel+0x306>
 8005980:	47ff0000 	.word	0x47ff0000
 8005984:	58026000 	.word	0x58026000
 8005988:	5c001000 	.word	0x5c001000
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005994:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005998:	fa93 f3a3 	rbit	r3, r3
 800599c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80059a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80059a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80059a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80059b0:	2320      	movs	r3, #32
 80059b2:	e004      	b.n	80059be <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80059b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80059b8:	fab3 f383 	clz	r3, r3
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	429a      	cmp	r2, r3
 80059c0:	d106      	bne.n	80059d0 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2200      	movs	r2, #0
 80059c8:	2100      	movs	r1, #0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe fe16 	bl	80045fc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2101      	movs	r1, #1
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe fd7a 	bl	80044d0 <LL_ADC_GetOffsetChannel>
 80059dc:	4603      	mov	r3, r0
 80059de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10a      	bne.n	80059fc <HAL_ADC_ConfigChannel+0x344>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2101      	movs	r1, #1
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fe fd6f 	bl	80044d0 <LL_ADC_GetOffsetChannel>
 80059f2:	4603      	mov	r3, r0
 80059f4:	0e9b      	lsrs	r3, r3, #26
 80059f6:	f003 021f 	and.w	r2, r3, #31
 80059fa:	e01e      	b.n	8005a3a <HAL_ADC_ConfigChannel+0x382>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2101      	movs	r1, #1
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fe fd64 	bl	80044d0 <LL_ADC_GetOffsetChannel>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a12:	fa93 f3a3 	rbit	r3, r3
 8005a16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005a1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005a22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8005a2a:	2320      	movs	r3, #32
 8005a2c:	e004      	b.n	8005a38 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8005a2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005a32:	fab3 f383 	clz	r3, r3
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	461a      	mov	r2, r3
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d105      	bne.n	8005a52 <HAL_ADC_ConfigChannel+0x39a>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	0e9b      	lsrs	r3, r3, #26
 8005a4c:	f003 031f 	and.w	r3, r3, #31
 8005a50:	e018      	b.n	8005a84 <HAL_ADC_ConfigChannel+0x3cc>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a5e:	fa93 f3a3 	rbit	r3, r3
 8005a62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8005a66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a6a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005a6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8005a76:	2320      	movs	r3, #32
 8005a78:	e004      	b.n	8005a84 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8005a7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a7e:	fab3 f383 	clz	r3, r3
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d106      	bne.n	8005a96 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2101      	movs	r1, #1
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fe fdb3 	bl	80045fc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2102      	movs	r1, #2
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fe fd17 	bl	80044d0 <LL_ADC_GetOffsetChannel>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10a      	bne.n	8005ac2 <HAL_ADC_ConfigChannel+0x40a>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2102      	movs	r1, #2
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe fd0c 	bl	80044d0 <LL_ADC_GetOffsetChannel>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	0e9b      	lsrs	r3, r3, #26
 8005abc:	f003 021f 	and.w	r2, r3, #31
 8005ac0:	e01e      	b.n	8005b00 <HAL_ADC_ConfigChannel+0x448>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2102      	movs	r1, #2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fe fd01 	bl	80044d0 <LL_ADC_GetOffsetChannel>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ad8:	fa93 f3a3 	rbit	r3, r3
 8005adc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ae4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8005af0:	2320      	movs	r3, #32
 8005af2:	e004      	b.n	8005afe <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8005af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005af8:	fab3 f383 	clz	r3, r3
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d105      	bne.n	8005b18 <HAL_ADC_ConfigChannel+0x460>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	0e9b      	lsrs	r3, r3, #26
 8005b12:	f003 031f 	and.w	r3, r3, #31
 8005b16:	e014      	b.n	8005b42 <HAL_ADC_ConfigChannel+0x48a>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b20:	fa93 f3a3 	rbit	r3, r3
 8005b24:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8005b26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005b2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8005b34:	2320      	movs	r3, #32
 8005b36:	e004      	b.n	8005b42 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8005b38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b3c:	fab3 f383 	clz	r3, r3
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d106      	bne.n	8005b54 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2102      	movs	r1, #2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fe fd54 	bl	80045fc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2103      	movs	r1, #3
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fe fcb8 	bl	80044d0 <LL_ADC_GetOffsetChannel>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10a      	bne.n	8005b80 <HAL_ADC_ConfigChannel+0x4c8>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2103      	movs	r1, #3
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fe fcad 	bl	80044d0 <LL_ADC_GetOffsetChannel>
 8005b76:	4603      	mov	r3, r0
 8005b78:	0e9b      	lsrs	r3, r3, #26
 8005b7a:	f003 021f 	and.w	r2, r3, #31
 8005b7e:	e017      	b.n	8005bb0 <HAL_ADC_ConfigChannel+0x4f8>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2103      	movs	r1, #3
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fe fca2 	bl	80044d0 <LL_ADC_GetOffsetChannel>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b92:	fa93 f3a3 	rbit	r3, r3
 8005b96:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b9a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005b9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005ba2:	2320      	movs	r3, #32
 8005ba4:	e003      	b.n	8005bae <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005ba6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ba8:	fab3 f383 	clz	r3, r3
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d105      	bne.n	8005bc8 <HAL_ADC_ConfigChannel+0x510>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	0e9b      	lsrs	r3, r3, #26
 8005bc2:	f003 031f 	and.w	r3, r3, #31
 8005bc6:	e011      	b.n	8005bec <HAL_ADC_ConfigChannel+0x534>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bd0:	fa93 f3a3 	rbit	r3, r3
 8005bd4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005bd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bd8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005bda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8005be0:	2320      	movs	r3, #32
 8005be2:	e003      	b.n	8005bec <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8005be4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005be6:	fab3 f383 	clz	r3, r3
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d14f      	bne.n	8005c90 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2103      	movs	r1, #3
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fe fcff 	bl	80045fc <LL_ADC_SetOffsetState>
 8005bfe:	e047      	b.n	8005c90 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	069b      	lsls	r3, r3, #26
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d107      	bne.n	8005c24 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005c22:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	069b      	lsls	r3, r3, #26
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d107      	bne.n	8005c48 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005c46:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	069b      	lsls	r3, r3, #26
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d107      	bne.n	8005c6c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005c6a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	069b      	lsls	r3, r3, #26
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d107      	bne.n	8005c90 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005c8e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fe fef3 	bl	8004a80 <LL_ADC_IsEnabled>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f040 8219 	bne.w	80060d4 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6818      	ldr	r0, [r3, #0]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	6819      	ldr	r1, [r3, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f7fe fd88 	bl	80047c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	4aa1      	ldr	r2, [pc, #644]	@ (8005f40 <HAL_ADC_ConfigChannel+0x888>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	f040 812e 	bne.w	8005f1c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10b      	bne.n	8005ce8 <HAL_ADC_ConfigChannel+0x630>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	0e9b      	lsrs	r3, r3, #26
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	f003 031f 	and.w	r3, r3, #31
 8005cdc:	2b09      	cmp	r3, #9
 8005cde:	bf94      	ite	ls
 8005ce0:	2301      	movls	r3, #1
 8005ce2:	2300      	movhi	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	e019      	b.n	8005d1c <HAL_ADC_ConfigChannel+0x664>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cf0:	fa93 f3a3 	rbit	r3, r3
 8005cf4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005cfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8005d00:	2320      	movs	r3, #32
 8005d02:	e003      	b.n	8005d0c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8005d04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d06:	fab3 f383 	clz	r3, r3
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	f003 031f 	and.w	r3, r3, #31
 8005d12:	2b09      	cmp	r3, #9
 8005d14:	bf94      	ite	ls
 8005d16:	2301      	movls	r3, #1
 8005d18:	2300      	movhi	r3, #0
 8005d1a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d079      	beq.n	8005e14 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d107      	bne.n	8005d3c <HAL_ADC_ConfigChannel+0x684>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	0e9b      	lsrs	r3, r3, #26
 8005d32:	3301      	adds	r3, #1
 8005d34:	069b      	lsls	r3, r3, #26
 8005d36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005d3a:	e015      	b.n	8005d68 <HAL_ADC_ConfigChannel+0x6b0>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d44:	fa93 f3a3 	rbit	r3, r3
 8005d48:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d4c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005d4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8005d54:	2320      	movs	r3, #32
 8005d56:	e003      	b.n	8005d60 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8005d58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d5a:	fab3 f383 	clz	r3, r3
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	3301      	adds	r3, #1
 8005d62:	069b      	lsls	r3, r3, #26
 8005d64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d109      	bne.n	8005d88 <HAL_ADC_ConfigChannel+0x6d0>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	0e9b      	lsrs	r3, r3, #26
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	f003 031f 	and.w	r3, r3, #31
 8005d80:	2101      	movs	r1, #1
 8005d82:	fa01 f303 	lsl.w	r3, r1, r3
 8005d86:	e017      	b.n	8005db8 <HAL_ADC_ConfigChannel+0x700>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d90:	fa93 f3a3 	rbit	r3, r3
 8005d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d98:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005da0:	2320      	movs	r3, #32
 8005da2:	e003      	b.n	8005dac <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8005da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005da6:	fab3 f383 	clz	r3, r3
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	3301      	adds	r3, #1
 8005dae:	f003 031f 	and.w	r3, r3, #31
 8005db2:	2101      	movs	r1, #1
 8005db4:	fa01 f303 	lsl.w	r3, r1, r3
 8005db8:	ea42 0103 	orr.w	r1, r2, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <HAL_ADC_ConfigChannel+0x726>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	0e9b      	lsrs	r3, r3, #26
 8005dce:	3301      	adds	r3, #1
 8005dd0:	f003 021f 	and.w	r2, r3, #31
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	4413      	add	r3, r2
 8005dda:	051b      	lsls	r3, r3, #20
 8005ddc:	e018      	b.n	8005e10 <HAL_ADC_ConfigChannel+0x758>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005de6:	fa93 f3a3 	rbit	r3, r3
 8005dea:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dee:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8005df6:	2320      	movs	r3, #32
 8005df8:	e003      	b.n	8005e02 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfc:	fab3 f383 	clz	r3, r3
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	3301      	adds	r3, #1
 8005e04:	f003 021f 	and.w	r2, r3, #31
 8005e08:	4613      	mov	r3, r2
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	4413      	add	r3, r2
 8005e0e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e10:	430b      	orrs	r3, r1
 8005e12:	e07e      	b.n	8005f12 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d107      	bne.n	8005e30 <HAL_ADC_ConfigChannel+0x778>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	0e9b      	lsrs	r3, r3, #26
 8005e26:	3301      	adds	r3, #1
 8005e28:	069b      	lsls	r3, r3, #26
 8005e2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e2e:	e015      	b.n	8005e5c <HAL_ADC_ConfigChannel+0x7a4>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e38:	fa93 f3a3 	rbit	r3, r3
 8005e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8005e48:	2320      	movs	r3, #32
 8005e4a:	e003      	b.n	8005e54 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8005e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4e:	fab3 f383 	clz	r3, r3
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	3301      	adds	r3, #1
 8005e56:	069b      	lsls	r3, r3, #26
 8005e58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d109      	bne.n	8005e7c <HAL_ADC_ConfigChannel+0x7c4>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	0e9b      	lsrs	r3, r3, #26
 8005e6e:	3301      	adds	r3, #1
 8005e70:	f003 031f 	and.w	r3, r3, #31
 8005e74:	2101      	movs	r1, #1
 8005e76:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7a:	e017      	b.n	8005eac <HAL_ADC_ConfigChannel+0x7f4>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	fa93 f3a3 	rbit	r3, r3
 8005e88:	61bb      	str	r3, [r7, #24]
  return result;
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8005e94:	2320      	movs	r3, #32
 8005e96:	e003      	b.n	8005ea0 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	fab3 f383 	clz	r3, r3
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	f003 031f 	and.w	r3, r3, #31
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8005eac:	ea42 0103 	orr.w	r1, r2, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10d      	bne.n	8005ed8 <HAL_ADC_ConfigChannel+0x820>
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	0e9b      	lsrs	r3, r3, #26
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	f003 021f 	and.w	r2, r3, #31
 8005ec8:	4613      	mov	r3, r2
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	4413      	add	r3, r2
 8005ece:	3b1e      	subs	r3, #30
 8005ed0:	051b      	lsls	r3, r3, #20
 8005ed2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005ed6:	e01b      	b.n	8005f10 <HAL_ADC_ConfigChannel+0x858>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	fa93 f3a3 	rbit	r3, r3
 8005ee4:	60fb      	str	r3, [r7, #12]
  return result;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005ef0:	2320      	movs	r3, #32
 8005ef2:	e003      	b.n	8005efc <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	fab3 f383 	clz	r3, r3
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	3301      	adds	r3, #1
 8005efe:	f003 021f 	and.w	r2, r3, #31
 8005f02:	4613      	mov	r3, r2
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	4413      	add	r3, r2
 8005f08:	3b1e      	subs	r3, #30
 8005f0a:	051b      	lsls	r3, r3, #20
 8005f0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f10:	430b      	orrs	r3, r1
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	6892      	ldr	r2, [r2, #8]
 8005f16:	4619      	mov	r1, r3
 8005f18:	f7fe fc29 	bl	800476e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f280 80d7 	bge.w	80060d4 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a06      	ldr	r2, [pc, #24]	@ (8005f44 <HAL_ADC_ConfigChannel+0x88c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d004      	beq.n	8005f3a <HAL_ADC_ConfigChannel+0x882>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a04      	ldr	r2, [pc, #16]	@ (8005f48 <HAL_ADC_ConfigChannel+0x890>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d10a      	bne.n	8005f50 <HAL_ADC_ConfigChannel+0x898>
 8005f3a:	4b04      	ldr	r3, [pc, #16]	@ (8005f4c <HAL_ADC_ConfigChannel+0x894>)
 8005f3c:	e009      	b.n	8005f52 <HAL_ADC_ConfigChannel+0x89a>
 8005f3e:	bf00      	nop
 8005f40:	47ff0000 	.word	0x47ff0000
 8005f44:	40022000 	.word	0x40022000
 8005f48:	40022100 	.word	0x40022100
 8005f4c:	40022300 	.word	0x40022300
 8005f50:	4b65      	ldr	r3, [pc, #404]	@ (80060e8 <HAL_ADC_ConfigChannel+0xa30>)
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe fa7c 	bl	8004450 <LL_ADC_GetCommonPathInternalCh>
 8005f58:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a62      	ldr	r2, [pc, #392]	@ (80060ec <HAL_ADC_ConfigChannel+0xa34>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d004      	beq.n	8005f70 <HAL_ADC_ConfigChannel+0x8b8>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a61      	ldr	r2, [pc, #388]	@ (80060f0 <HAL_ADC_ConfigChannel+0xa38>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d10e      	bne.n	8005f8e <HAL_ADC_ConfigChannel+0x8d6>
 8005f70:	485e      	ldr	r0, [pc, #376]	@ (80060ec <HAL_ADC_ConfigChannel+0xa34>)
 8005f72:	f7fe fd85 	bl	8004a80 <LL_ADC_IsEnabled>
 8005f76:	4604      	mov	r4, r0
 8005f78:	485d      	ldr	r0, [pc, #372]	@ (80060f0 <HAL_ADC_ConfigChannel+0xa38>)
 8005f7a:	f7fe fd81 	bl	8004a80 <LL_ADC_IsEnabled>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	4323      	orrs	r3, r4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	bf0c      	ite	eq
 8005f86:	2301      	moveq	r3, #1
 8005f88:	2300      	movne	r3, #0
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	e008      	b.n	8005fa0 <HAL_ADC_ConfigChannel+0x8e8>
 8005f8e:	4859      	ldr	r0, [pc, #356]	@ (80060f4 <HAL_ADC_ConfigChannel+0xa3c>)
 8005f90:	f7fe fd76 	bl	8004a80 <LL_ADC_IsEnabled>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	bf0c      	ite	eq
 8005f9a:	2301      	moveq	r3, #1
 8005f9c:	2300      	movne	r3, #0
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 8084 	beq.w	80060ae <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a53      	ldr	r2, [pc, #332]	@ (80060f8 <HAL_ADC_ConfigChannel+0xa40>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d132      	bne.n	8006016 <HAL_ADC_ConfigChannel+0x95e>
 8005fb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d12c      	bne.n	8006016 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a4c      	ldr	r2, [pc, #304]	@ (80060f4 <HAL_ADC_ConfigChannel+0xa3c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	f040 8086 	bne.w	80060d4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a47      	ldr	r2, [pc, #284]	@ (80060ec <HAL_ADC_ConfigChannel+0xa34>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d004      	beq.n	8005fdc <HAL_ADC_ConfigChannel+0x924>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a46      	ldr	r2, [pc, #280]	@ (80060f0 <HAL_ADC_ConfigChannel+0xa38>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d101      	bne.n	8005fe0 <HAL_ADC_ConfigChannel+0x928>
 8005fdc:	4a47      	ldr	r2, [pc, #284]	@ (80060fc <HAL_ADC_ConfigChannel+0xa44>)
 8005fde:	e000      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x92a>
 8005fe0:	4a41      	ldr	r2, [pc, #260]	@ (80060e8 <HAL_ADC_ConfigChannel+0xa30>)
 8005fe2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fe6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005fea:	4619      	mov	r1, r3
 8005fec:	4610      	mov	r0, r2
 8005fee:	f7fe fa1c 	bl	800442a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ff2:	4b43      	ldr	r3, [pc, #268]	@ (8006100 <HAL_ADC_ConfigChannel+0xa48>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	099b      	lsrs	r3, r3, #6
 8005ff8:	4a42      	ldr	r2, [pc, #264]	@ (8006104 <HAL_ADC_ConfigChannel+0xa4c>)
 8005ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffe:	099b      	lsrs	r3, r3, #6
 8006000:	3301      	adds	r3, #1
 8006002:	005b      	lsls	r3, r3, #1
 8006004:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006006:	e002      	b.n	800600e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	3b01      	subs	r3, #1
 800600c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1f9      	bne.n	8006008 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006014:	e05e      	b.n	80060d4 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a3b      	ldr	r2, [pc, #236]	@ (8006108 <HAL_ADC_ConfigChannel+0xa50>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d120      	bne.n	8006062 <HAL_ADC_ConfigChannel+0x9aa>
 8006020:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006024:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d11a      	bne.n	8006062 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a30      	ldr	r2, [pc, #192]	@ (80060f4 <HAL_ADC_ConfigChannel+0xa3c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d14e      	bne.n	80060d4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a2c      	ldr	r2, [pc, #176]	@ (80060ec <HAL_ADC_ConfigChannel+0xa34>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d004      	beq.n	800604a <HAL_ADC_ConfigChannel+0x992>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a2a      	ldr	r2, [pc, #168]	@ (80060f0 <HAL_ADC_ConfigChannel+0xa38>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d101      	bne.n	800604e <HAL_ADC_ConfigChannel+0x996>
 800604a:	4a2c      	ldr	r2, [pc, #176]	@ (80060fc <HAL_ADC_ConfigChannel+0xa44>)
 800604c:	e000      	b.n	8006050 <HAL_ADC_ConfigChannel+0x998>
 800604e:	4a26      	ldr	r2, [pc, #152]	@ (80060e8 <HAL_ADC_ConfigChannel+0xa30>)
 8006050:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006054:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006058:	4619      	mov	r1, r3
 800605a:	4610      	mov	r0, r2
 800605c:	f7fe f9e5 	bl	800442a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006060:	e038      	b.n	80060d4 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a29      	ldr	r2, [pc, #164]	@ (800610c <HAL_ADC_ConfigChannel+0xa54>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d133      	bne.n	80060d4 <HAL_ADC_ConfigChannel+0xa1c>
 800606c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006070:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d12d      	bne.n	80060d4 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1d      	ldr	r2, [pc, #116]	@ (80060f4 <HAL_ADC_ConfigChannel+0xa3c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d128      	bne.n	80060d4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a19      	ldr	r2, [pc, #100]	@ (80060ec <HAL_ADC_ConfigChannel+0xa34>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d004      	beq.n	8006096 <HAL_ADC_ConfigChannel+0x9de>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a17      	ldr	r2, [pc, #92]	@ (80060f0 <HAL_ADC_ConfigChannel+0xa38>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d101      	bne.n	800609a <HAL_ADC_ConfigChannel+0x9e2>
 8006096:	4a19      	ldr	r2, [pc, #100]	@ (80060fc <HAL_ADC_ConfigChannel+0xa44>)
 8006098:	e000      	b.n	800609c <HAL_ADC_ConfigChannel+0x9e4>
 800609a:	4a13      	ldr	r2, [pc, #76]	@ (80060e8 <HAL_ADC_ConfigChannel+0xa30>)
 800609c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80060a4:	4619      	mov	r1, r3
 80060a6:	4610      	mov	r0, r2
 80060a8:	f7fe f9bf 	bl	800442a <LL_ADC_SetCommonPathInternalCh>
 80060ac:	e012      	b.n	80060d4 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060b2:	f043 0220 	orr.w	r2, r3, #32
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80060c0:	e008      	b.n	80060d4 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c6:	f043 0220 	orr.w	r2, r3, #32
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80060dc:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	37e4      	adds	r7, #228	@ 0xe4
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd90      	pop	{r4, r7, pc}
 80060e8:	58026300 	.word	0x58026300
 80060ec:	40022000 	.word	0x40022000
 80060f0:	40022100 	.word	0x40022100
 80060f4:	58026000 	.word	0x58026000
 80060f8:	c7520000 	.word	0xc7520000
 80060fc:	40022300 	.word	0x40022300
 8006100:	24000038 	.word	0x24000038
 8006104:	053e2d63 	.word	0x053e2d63
 8006108:	c3210000 	.word	0xc3210000
 800610c:	cb840000 	.word	0xcb840000

08006110 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b094      	sub	sp, #80	@ 0x50
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006128:	d003      	beq.n	8006132 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800612e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }

#if defined(ADC_VER_V5_V90)

  if (hadc->Instance == ADC3)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a8c      	ldr	r2, [pc, #560]	@ (8006368 <HAL_ADC_AnalogWDGConfig+0x258>)
 8006138:	4293      	cmp	r3, r2
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_ADC_AnalogWDGConfig+0x38>
 8006144:	2302      	movs	r3, #2
 8006146:	e36b      	b.n	8006820 <HAL_ADC_AnalogWDGConfig+0x710>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4618      	mov	r0, r3
 8006156:	f7fe fccd 	bl	8004af4 <LL_ADC_REG_IsConversionOngoing>
 800615a:	6438      	str	r0, [r7, #64]	@ 0x40
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f7fe fcda 	bl	8004b1a <LL_ADC_INJ_IsConversionOngoing>
 8006166:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	f040 8349 	bne.w	8006802 <HAL_ADC_AnalogWDGConfig+0x6f2>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006172:	2b00      	cmp	r3, #0
 8006174:	f040 8345 	bne.w	8006802 <HAL_ADC_AnalogWDGConfig+0x6f2>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a7b      	ldr	r2, [pc, #492]	@ (800636c <HAL_ADC_AnalogWDGConfig+0x25c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	f040 8131 	bne.w	80063e6 <HAL_ADC_AnalogWDGConfig+0x2d6>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 800618c:	d034      	beq.n	80061f8 <HAL_ADC_AnalogWDGConfig+0xe8>
 800618e:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006192:	d856      	bhi.n	8006242 <HAL_ADC_AnalogWDGConfig+0x132>
 8006194:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006198:	d04b      	beq.n	8006232 <HAL_ADC_AnalogWDGConfig+0x122>
 800619a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800619e:	d850      	bhi.n	8006242 <HAL_ADC_AnalogWDGConfig+0x132>
 80061a0:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80061a4:	d01b      	beq.n	80061de <HAL_ADC_AnalogWDGConfig+0xce>
 80061a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80061aa:	d84a      	bhi.n	8006242 <HAL_ADC_AnalogWDGConfig+0x132>
 80061ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061b0:	d037      	beq.n	8006222 <HAL_ADC_AnalogWDGConfig+0x112>
 80061b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061b6:	d844      	bhi.n	8006242 <HAL_ADC_AnalogWDGConfig+0x132>
 80061b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061bc:	d029      	beq.n	8006212 <HAL_ADC_AnalogWDGConfig+0x102>
 80061be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061c2:	d13e      	bne.n	8006242 <HAL_ADC_AnalogWDGConfig+0x132>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80061d0:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 80061d4:	461a      	mov	r2, r3
 80061d6:	4965      	ldr	r1, [pc, #404]	@ (800636c <HAL_ADC_AnalogWDGConfig+0x25c>)
 80061d8:	f7fe fb34 	bl	8004844 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 80061dc:	e039      	b.n	8006252 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6818      	ldr	r0, [r3, #0]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80061ea:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 80061ee:	461a      	mov	r2, r3
 80061f0:	495e      	ldr	r1, [pc, #376]	@ (800636c <HAL_ADC_AnalogWDGConfig+0x25c>)
 80061f2:	f7fe fb27 	bl	8004844 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 80061f6:	e02c      	b.n	8006252 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006204:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 8006208:	461a      	mov	r2, r3
 800620a:	4958      	ldr	r1, [pc, #352]	@ (800636c <HAL_ADC_AnalogWDGConfig+0x25c>)
 800620c:	f7fe fb1a 	bl	8004844 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8006210:	e01f      	b.n	8006252 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a56      	ldr	r2, [pc, #344]	@ (8006370 <HAL_ADC_AnalogWDGConfig+0x260>)
 8006218:	4954      	ldr	r1, [pc, #336]	@ (800636c <HAL_ADC_AnalogWDGConfig+0x25c>)
 800621a:	4618      	mov	r0, r3
 800621c:	f7fe fb12 	bl	8004844 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006220:	e017      	b.n	8006252 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a53      	ldr	r2, [pc, #332]	@ (8006374 <HAL_ADC_AnalogWDGConfig+0x264>)
 8006228:	4950      	ldr	r1, [pc, #320]	@ (800636c <HAL_ADC_AnalogWDGConfig+0x25c>)
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe fb0a 	bl	8004844 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006230:	e00f      	b.n	8006252 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a50      	ldr	r2, [pc, #320]	@ (8006378 <HAL_ADC_AnalogWDGConfig+0x268>)
 8006238:	494c      	ldr	r1, [pc, #304]	@ (800636c <HAL_ADC_AnalogWDGConfig+0x25c>)
 800623a:	4618      	mov	r0, r3
 800623c:	f7fe fb02 	bl	8004844 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006240:	e007      	b.n	8006252 <HAL_ADC_AnalogWDGConfig+0x142>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2200      	movs	r2, #0
 8006248:	4948      	ldr	r1, [pc, #288]	@ (800636c <HAL_ADC_AnalogWDGConfig+0x25c>)
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe fafa 	bl	8004844 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006250:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006252:	4b4a      	ldr	r3, [pc, #296]	@ (800637c <HAL_ADC_AnalogWDGConfig+0x26c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800625a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800625e:	d10b      	bne.n	8006278 <HAL_ADC_AnalogWDGConfig+0x168>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	089b      	lsrs	r3, r3, #2
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	fa02 f303 	lsl.w	r3, r2, r3
 8006276:	e01d      	b.n	80062b4 <HAL_ADC_AnalogWDGConfig+0x1a4>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0310 	and.w	r3, r3, #16
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10b      	bne.n	800629e <HAL_ADC_AnalogWDGConfig+0x18e>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	691a      	ldr	r2, [r3, #16]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	089b      	lsrs	r3, r3, #2
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	fa02 f303 	lsl.w	r3, r2, r3
 800629c:	e00a      	b.n	80062b4 <HAL_ADC_AnalogWDGConfig+0x1a4>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	691a      	ldr	r2, [r3, #16]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	089b      	lsrs	r3, r3, #2
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80062b6:	4b31      	ldr	r3, [pc, #196]	@ (800637c <HAL_ADC_AnalogWDGConfig+0x26c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80062be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062c2:	d10b      	bne.n	80062dc <HAL_ADC_AnalogWDGConfig+0x1cc>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	695a      	ldr	r2, [r3, #20]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	089b      	lsrs	r3, r3, #2
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	fa02 f303 	lsl.w	r3, r2, r3
 80062da:	e01d      	b.n	8006318 <HAL_ADC_AnalogWDGConfig+0x208>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f003 0310 	and.w	r3, r3, #16
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10b      	bne.n	8006302 <HAL_ADC_AnalogWDGConfig+0x1f2>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	695a      	ldr	r2, [r3, #20]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	089b      	lsrs	r3, r3, #2
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	e00a      	b.n	8006318 <HAL_ADC_AnalogWDGConfig+0x208>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	695a      	ldr	r2, [r3, #20]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	089b      	lsrs	r3, r3, #2
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	fa02 f303 	lsl.w	r3, r2, r3
 8006318:	647b      	str	r3, [r7, #68]	@ 0x44

      /* Set the high and low thresholds */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a12      	ldr	r2, [pc, #72]	@ (8006368 <HAL_ADC_AnalogWDGConfig+0x258>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d131      	bne.n	8006388 <HAL_ADC_AnalogWDGConfig+0x278>
      {
        MODIFY_REG(hadc->Instance->LTR1_TR1,
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	621a      	str	r2, [r3, #32]
                   ADC3_TR1_AWDFILT,
                   AnalogWDGConfig->FilteringConfig);
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_LT1, tmpAWDLowThresholdShifted);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6a1a      	ldr	r2, [r3, #32]
 8006340:	4b0f      	ldr	r3, [pc, #60]	@ (8006380 <HAL_ADC_AnalogWDGConfig+0x270>)
 8006342:	4013      	ands	r3, r2
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6812      	ldr	r2, [r2, #0]
 8006348:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800634a:	430b      	orrs	r3, r1
 800634c:	6213      	str	r3, [r2, #32]
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_HT1, (tmpAWDHighThresholdShifted << ADC3_TR1_HT1_Pos));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6a1a      	ldr	r2, [r3, #32]
 8006354:	4b0b      	ldr	r3, [pc, #44]	@ (8006384 <HAL_ADC_AnalogWDGConfig+0x274>)
 8006356:	4013      	ands	r3, r2
 8006358:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800635a:	0411      	lsls	r1, r2, #16
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	430b      	orrs	r3, r1
 8006362:	6213      	str	r3, [r2, #32]
 8006364:	e024      	b.n	80063b0 <HAL_ADC_AnalogWDGConfig+0x2a0>
 8006366:	bf00      	nop
 8006368:	58026000 	.word	0x58026000
 800636c:	7dc00000 	.word	0x7dc00000
 8006370:	008fffff 	.word	0x008fffff
 8006374:	010fffff 	.word	0x010fffff
 8006378:	018fffff 	.word	0x018fffff
 800637c:	5c001000 	.word	0x5c001000
 8006380:	fffff000 	.word	0xfffff000
 8006384:	f000ffff 	.word	0xf000ffff
      }
      else
      {

        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006398:	430a      	orrs	r2, r1
 800639a:	621a      	str	r2, [r3, #32]
        MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a2:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063ac:	430a      	orrs	r2, r1
 80063ae:	625a      	str	r2, [r3, #36]	@ 0x24
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
#endif

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fe fbbd 	bl	8004b40 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	7b1b      	ldrb	r3, [r3, #12]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d105      	bne.n	80063da <HAL_ADC_AnalogWDGConfig+0x2ca>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fe fbdd 	bl	8004b92 <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80063d8:	e21c      	b.n	8006814 <HAL_ADC_AnalogWDGConfig+0x704>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe fc07 	bl	8004bf2 <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80063e4:	e216      	b.n	8006814 <HAL_ADC_AnalogWDGConfig+0x704>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 80063ee:	d01f      	beq.n	8006430 <HAL_ADC_AnalogWDGConfig+0x320>
 80063f0:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 80063f4:	f200 80f4 	bhi.w	80065e0 <HAL_ADC_AnalogWDGConfig+0x4d0>
 80063f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063fc:	d07d      	beq.n	80064fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80063fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006402:	f200 80ed 	bhi.w	80065e0 <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006406:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800640a:	d011      	beq.n	8006430 <HAL_ADC_AnalogWDGConfig+0x320>
 800640c:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006410:	f200 80e6 	bhi.w	80065e0 <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006418:	d06f      	beq.n	80064fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 800641a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800641e:	f200 80df 	bhi.w	80065e0 <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006422:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006426:	d068      	beq.n	80064fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006428:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800642c:	f040 80d8 	bne.w	80065e0 <HAL_ADC_AnalogWDGConfig+0x4d0>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a9c      	ldr	r2, [pc, #624]	@ (80066a8 <HAL_ADC_AnalogWDGConfig+0x598>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d12f      	bne.n	800649a <HAL_ADC_AnalogWDGConfig+0x38a>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006442:	2b00      	cmp	r3, #0
 8006444:	d108      	bne.n	8006458 <HAL_ADC_AnalogWDGConfig+0x348>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	0e9b      	lsrs	r3, r3, #26
 800644c:	f003 031f 	and.w	r3, r3, #31
 8006450:	2201      	movs	r2, #1
 8006452:	fa02 f303 	lsl.w	r3, r2, r3
 8006456:	e016      	b.n	8006486 <HAL_ADC_AnalogWDGConfig+0x376>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800645e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006460:	fa93 f3a3 	rbit	r3, r3
 8006464:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8006466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006468:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800646a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <HAL_ADC_AnalogWDGConfig+0x364>
    return 32U;
 8006470:	2320      	movs	r3, #32
 8006472:	e003      	b.n	800647c <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 8006474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006476:	fab3 f383 	clz	r3, r3
 800647a:	b2db      	uxtb	r3, r3
 800647c:	f003 031f 	and.w	r3, r3, #31
 8006480:	2201      	movs	r2, #1
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	6812      	ldr	r2, [r2, #0]
 800648a:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6812      	ldr	r2, [r2, #0]
 8006492:	430b      	orrs	r3, r1
 8006494:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8006498:	e0ab      	b.n	80065f2 <HAL_ADC_AnalogWDGConfig+0x4e2>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d108      	bne.n	80064b8 <HAL_ADC_AnalogWDGConfig+0x3a8>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	0e9b      	lsrs	r3, r3, #26
 80064ac:	f003 031f 	and.w	r3, r3, #31
 80064b0:	2201      	movs	r2, #1
 80064b2:	fa02 f303 	lsl.w	r3, r2, r3
 80064b6:	e016      	b.n	80064e6 <HAL_ADC_AnalogWDGConfig+0x3d6>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c0:	fa93 f3a3 	rbit	r3, r3
 80064c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80064ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <HAL_ADC_AnalogWDGConfig+0x3c4>
    return 32U;
 80064d0:	2320      	movs	r3, #32
 80064d2:	e003      	b.n	80064dc <HAL_ADC_AnalogWDGConfig+0x3cc>
  return __builtin_clz(value);
 80064d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d6:	fab3 f383 	clz	r3, r3
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	2201      	movs	r2, #1
 80064e2:	fa02 f303 	lsl.w	r3, r2, r3
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6812      	ldr	r2, [r2, #0]
 80064ea:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6812      	ldr	r2, [r2, #0]
 80064f2:	430b      	orrs	r3, r1
 80064f4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 80064f8:	e07b      	b.n	80065f2 <HAL_ADC_AnalogWDGConfig+0x4e2>
        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:

#if defined(ADC_VER_V5_V90)
          if (hadc->Instance == ADC3)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a6b      	ldr	r2, [pc, #428]	@ (80066ac <HAL_ADC_AnalogWDGConfig+0x59c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d108      	bne.n	8006516 <HAL_ADC_AnalogWDGConfig+0x406>
          {

            LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6818      	ldr	r0, [r3, #0]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a68      	ldr	r2, [pc, #416]	@ (80066b0 <HAL_ADC_AnalogWDGConfig+0x5a0>)
 800650e:	4619      	mov	r1, r3
 8006510:	f7fe f998 	bl	8004844 <LL_ADC_SetAnalogWDMonitChannels>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
            }
#if defined(ADC_VER_V5_V90)
          }
#endif  /*ADC_VER_V5_V90*/
          break;
 8006514:	e06d      	b.n	80065f2 <HAL_ADC_AnalogWDGConfig+0x4e2>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a63      	ldr	r2, [pc, #396]	@ (80066a8 <HAL_ADC_AnalogWDGConfig+0x598>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d12f      	bne.n	8006580 <HAL_ADC_AnalogWDGConfig+0x470>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006528:	2b00      	cmp	r3, #0
 800652a:	d108      	bne.n	800653e <HAL_ADC_AnalogWDGConfig+0x42e>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	0e9b      	lsrs	r3, r3, #26
 8006532:	f003 031f 	and.w	r3, r3, #31
 8006536:	2201      	movs	r2, #1
 8006538:	fa02 f303 	lsl.w	r3, r2, r3
 800653c:	e016      	b.n	800656c <HAL_ADC_AnalogWDGConfig+0x45c>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	fa93 f3a3 	rbit	r3, r3
 800654a:	61bb      	str	r3, [r7, #24]
  return result;
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_ADC_AnalogWDGConfig+0x44a>
    return 32U;
 8006556:	2320      	movs	r3, #32
 8006558:	e003      	b.n	8006562 <HAL_ADC_AnalogWDGConfig+0x452>
  return __builtin_clz(value);
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	fab3 f383 	clz	r3, r3
 8006560:	b2db      	uxtb	r3, r3
 8006562:	f003 031f 	and.w	r3, r3, #31
 8006566:	2201      	movs	r2, #1
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	6812      	ldr	r2, [r2, #0]
 8006570:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	6812      	ldr	r2, [r2, #0]
 8006578:	430b      	orrs	r3, r1
 800657a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          break;
 800657e:	e038      	b.n	80065f2 <HAL_ADC_AnalogWDGConfig+0x4e2>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006588:	2b00      	cmp	r3, #0
 800658a:	d108      	bne.n	800659e <HAL_ADC_AnalogWDGConfig+0x48e>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	0e9b      	lsrs	r3, r3, #26
 8006592:	f003 031f 	and.w	r3, r3, #31
 8006596:	2201      	movs	r2, #1
 8006598:	fa02 f303 	lsl.w	r3, r2, r3
 800659c:	e016      	b.n	80065cc <HAL_ADC_AnalogWDGConfig+0x4bc>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	fa93 f3a3 	rbit	r3, r3
 80065aa:	60fb      	str	r3, [r7, #12]
  return result;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_ADC_AnalogWDGConfig+0x4aa>
    return 32U;
 80065b6:	2320      	movs	r3, #32
 80065b8:	e003      	b.n	80065c2 <HAL_ADC_AnalogWDGConfig+0x4b2>
  return __builtin_clz(value);
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	fab3 f383 	clz	r3, r3
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	f003 031f 	and.w	r3, r3, #31
 80065c6:	2201      	movs	r2, #1
 80065c8:	fa02 f303 	lsl.w	r3, r2, r3
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6812      	ldr	r2, [r2, #0]
 80065d0:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6812      	ldr	r2, [r2, #0]
 80065d8:	430b      	orrs	r3, r1
 80065da:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 80065de:	e008      	b.n	80065f2 <HAL_ADC_AnalogWDGConfig+0x4e2>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6818      	ldr	r0, [r3, #0]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2200      	movs	r2, #0
 80065ea:	4619      	mov	r1, r3
 80065ec:	f7fe f92a 	bl	8004844 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80065f0:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	f003 0310 	and.w	r3, r3, #16
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10b      	bne.n	8006618 <HAL_ADC_AnalogWDGConfig+0x508>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	691a      	ldr	r2, [r3, #16]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	089b      	lsrs	r3, r3, #2
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	fa02 f303 	lsl.w	r3, r2, r3
 8006616:	e00a      	b.n	800662e <HAL_ADC_AnalogWDGConfig+0x51e>
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	089b      	lsrs	r3, r3, #2
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f003 0310 	and.w	r3, r3, #16
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10b      	bne.n	8006656 <HAL_ADC_AnalogWDGConfig+0x546>
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	695a      	ldr	r2, [r3, #20]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	089b      	lsrs	r3, r3, #2
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	fa02 f303 	lsl.w	r3, r2, r3
 8006654:	e00a      	b.n	800666c <HAL_ADC_AnalogWDGConfig+0x55c>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	695a      	ldr	r2, [r3, #20]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	089b      	lsrs	r3, r3, #2
 8006662:	f003 0304 	and.w	r3, r3, #4
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	fa02 f303 	lsl.w	r3, r2, r3
 800666c:	647b      	str	r3, [r7, #68]	@ 0x44

#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a0e      	ldr	r2, [pc, #56]	@ (80066ac <HAL_ADC_AnalogWDGConfig+0x59c>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d153      	bne.n	8006720 <HAL_ADC_AnalogWDGConfig+0x610>
      {

        /* Analog watchdog thresholds configuration */
        if (AnalogWDGConfig->WatchdogNumber != ADC_ANALOGWATCHDOG_1)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a0d      	ldr	r2, [pc, #52]	@ (80066b4 <HAL_ADC_AnalogWDGConfig+0x5a4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d045      	beq.n	800670e <HAL_ADC_AnalogWDGConfig+0x5fe>
        {
          /* Shift the offset with respect to the selected ADC resolution:        */
          /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
          /* are set to 0.                                                        */
          tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0310 	and.w	r3, r3, #16
 800668c:	2b00      	cmp	r3, #0
 800668e:	d113      	bne.n	80066b8 <HAL_ADC_AnalogWDGConfig+0x5a8>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	089b      	lsrs	r3, r3, #2
 800669c:	f003 0307 	and.w	r3, r3, #7
 80066a0:	005b      	lsls	r3, r3, #1
 80066a2:	fa02 f303 	lsl.w	r3, r2, r3
 80066a6:	e012      	b.n	80066ce <HAL_ADC_AnalogWDGConfig+0x5be>
 80066a8:	001fffff 	.word	0x001fffff
 80066ac:	58026000 	.word	0x58026000
 80066b0:	018fffff 	.word	0x018fffff
 80066b4:	7dc00000 	.word	0x7dc00000
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	691a      	ldr	r2, [r3, #16]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	089b      	lsrs	r3, r3, #2
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	fa02 f303 	lsl.w	r3, r2, r3
 80066ce:	64bb      	str	r3, [r7, #72]	@ 0x48
          tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f003 0310 	and.w	r3, r3, #16
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10b      	bne.n	80066f6 <HAL_ADC_AnalogWDGConfig+0x5e6>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	695a      	ldr	r2, [r3, #20]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	089b      	lsrs	r3, r3, #2
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	fa02 f303 	lsl.w	r3, r2, r3
 80066f4:	e00a      	b.n	800670c <HAL_ADC_AnalogWDGConfig+0x5fc>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	695a      	ldr	r2, [r3, #20]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	089b      	lsrs	r3, r3, #2
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	fa02 f303 	lsl.w	r3, r2, r3
 800670c:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	6819      	ldr	r1, [r3, #0]
 8006716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006718:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800671a:	f7fe f8c1 	bl	80048a0 <LL_ADC_ConfigAnalogWDThresholds>
 800671e:	e035      	b.n	800678c <HAL_ADC_AnalogWDGConfig+0x67c>

      }
      else
      {

        if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a40      	ldr	r2, [pc, #256]	@ (8006828 <HAL_ADC_AnalogWDGConfig+0x718>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d118      	bne.n	800675c <HAL_ADC_AnalogWDGConfig+0x64c>
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR2_DIFSEL,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006732:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800673c:	430a      	orrs	r2, r1
 800673e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
          MODIFY_REG(hadc->Instance->HTR2_CALFACT,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800674a:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006754:	430a      	orrs	r2, r1
 8006756:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 800675a:	e017      	b.n	800678c <HAL_ADC_AnalogWDGConfig+0x67c>
        }
        else
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006764:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800676e:	430a      	orrs	r2, r1
 8006770:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
          MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800677c:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006786:	430a      	orrs	r2, r1
 8006788:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
      }

#endif
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a25      	ldr	r2, [pc, #148]	@ (8006828 <HAL_ADC_AnalogWDGConfig+0x718>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d11a      	bne.n	80067cc <HAL_ADC_AnalogWDGConfig+0x6bc>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800679a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fe f9d7 	bl	8004b5a <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	7b1b      	ldrb	r3, [r3, #12]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d105      	bne.n	80067c0 <HAL_ADC_AnalogWDGConfig+0x6b0>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fe f9fa 	bl	8004bb2 <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80067be:	e029      	b.n	8006814 <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe fa24 	bl	8004c12 <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80067ca:	e023      	b.n	8006814 <HAL_ADC_AnalogWDGConfig+0x704>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067d0:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fe f9ca 	bl	8004b76 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	7b1b      	ldrb	r3, [r3, #12]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d105      	bne.n	80067f6 <HAL_ADC_AnalogWDGConfig+0x6e6>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe f9ef 	bl	8004bd2 <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80067f4:	e00e      	b.n	8006814 <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fe fa19 	bl	8004c32 <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006800:	e008      	b.n	8006814 <HAL_ADC_AnalogWDGConfig+0x704>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006806:	f043 0220 	orr.w	r2, r3, #32
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800681c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8006820:	4618      	mov	r0, r3
 8006822:	3750      	adds	r7, #80	@ 0x50
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	001fffff 	.word	0x001fffff

0800682c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f7fe f921 	bl	8004a80 <LL_ADC_IsEnabled>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d16e      	bne.n	8006922 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689a      	ldr	r2, [r3, #8]
 800684a:	4b38      	ldr	r3, [pc, #224]	@ (800692c <ADC_Enable+0x100>)
 800684c:	4013      	ands	r3, r2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00d      	beq.n	800686e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006856:	f043 0210 	orr.w	r2, r3, #16
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006862:	f043 0201 	orr.w	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e05a      	b.n	8006924 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4618      	mov	r0, r3
 8006874:	f7fe f8dc 	bl	8004a30 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006878:	f7fd fd6a 	bl	8004350 <HAL_GetTick>
 800687c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a2b      	ldr	r2, [pc, #172]	@ (8006930 <ADC_Enable+0x104>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d004      	beq.n	8006892 <ADC_Enable+0x66>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a29      	ldr	r2, [pc, #164]	@ (8006934 <ADC_Enable+0x108>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d101      	bne.n	8006896 <ADC_Enable+0x6a>
 8006892:	4b29      	ldr	r3, [pc, #164]	@ (8006938 <ADC_Enable+0x10c>)
 8006894:	e000      	b.n	8006898 <ADC_Enable+0x6c>
 8006896:	4b29      	ldr	r3, [pc, #164]	@ (800693c <ADC_Enable+0x110>)
 8006898:	4618      	mov	r0, r3
 800689a:	f7fe f85f 	bl	800495c <LL_ADC_GetMultimode>
 800689e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a23      	ldr	r2, [pc, #140]	@ (8006934 <ADC_Enable+0x108>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d002      	beq.n	80068b0 <ADC_Enable+0x84>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	e000      	b.n	80068b2 <ADC_Enable+0x86>
 80068b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006930 <ADC_Enable+0x104>)
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d02c      	beq.n	8006914 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d130      	bne.n	8006922 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068c0:	e028      	b.n	8006914 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fe f8da 	bl	8004a80 <LL_ADC_IsEnabled>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d104      	bne.n	80068dc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe f8aa 	bl	8004a30 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80068dc:	f7fd fd38 	bl	8004350 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d914      	bls.n	8006914 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d00d      	beq.n	8006914 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068fc:	f043 0210 	orr.w	r2, r3, #16
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006908:	f043 0201 	orr.w	r2, r3, #1
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e007      	b.n	8006924 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b01      	cmp	r3, #1
 8006920:	d1cf      	bne.n	80068c2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	8000003f 	.word	0x8000003f
 8006930:	40022000 	.word	0x40022000
 8006934:	40022100 	.word	0x40022100
 8006938:	40022300 	.word	0x40022300
 800693c:	58026300 	.word	0x58026300

08006940 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4618      	mov	r0, r3
 800694e:	f7fe f8aa 	bl	8004aa6 <LL_ADC_IsDisableOngoing>
 8006952:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4618      	mov	r0, r3
 800695a:	f7fe f891 	bl	8004a80 <LL_ADC_IsEnabled>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d047      	beq.n	80069f4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d144      	bne.n	80069f4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f003 030d 	and.w	r3, r3, #13
 8006974:	2b01      	cmp	r3, #1
 8006976:	d10c      	bne.n	8006992 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4618      	mov	r0, r3
 800697e:	f7fe f86b 	bl	8004a58 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2203      	movs	r2, #3
 8006988:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800698a:	f7fd fce1 	bl	8004350 <HAL_GetTick>
 800698e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006990:	e029      	b.n	80069e6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006996:	f043 0210 	orr.w	r2, r3, #16
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069a2:	f043 0201 	orr.w	r2, r3, #1
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e023      	b.n	80069f6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80069ae:	f7fd fccf 	bl	8004350 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d914      	bls.n	80069e6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00d      	beq.n	80069e6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069ce:	f043 0210 	orr.w	r2, r3, #16
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069da:	f043 0201 	orr.w	r2, r3, #1
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e007      	b.n	80069f6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1dc      	bne.n	80069ae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b084      	sub	sp, #16
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a10:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d14b      	bne.n	8006ab0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a1c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0308 	and.w	r3, r3, #8
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d021      	beq.n	8006a76 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fd fe0a 	bl	8004650 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d032      	beq.n	8006aa8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d12b      	bne.n	8006aa8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d11f      	bne.n	8006aa8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a6c:	f043 0201 	orr.w	r2, r3, #1
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	661a      	str	r2, [r3, #96]	@ 0x60
 8006a74:	e018      	b.n	8006aa8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f003 0303 	and.w	r3, r3, #3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d111      	bne.n	8006aa8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d105      	bne.n	8006aa8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aa0:	f043 0201 	orr.w	r2, r3, #1
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f7fb f8cb 	bl	8001c44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006aae:	e00e      	b.n	8006ace <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ab4:	f003 0310 	and.w	r3, r3, #16
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f7fb f895 	bl	8001bec <HAL_ADC_ErrorCallback>
}
 8006ac2:	e004      	b.n	8006ace <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4798      	blx	r3
}
 8006ace:	bf00      	nop
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7fe fdd3 	bl	8005690 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006aea:	bf00      	nop
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b04:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b10:	f043 0204 	orr.w	r2, r3, #4
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f7fb f867 	bl	8001bec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b1e:	bf00      	nop
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a6c      	ldr	r2, [pc, #432]	@ (8006ce8 <ADC_ConfigureBoostMode+0x1c0>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d004      	beq.n	8006b44 <ADC_ConfigureBoostMode+0x1c>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a6b      	ldr	r2, [pc, #428]	@ (8006cec <ADC_ConfigureBoostMode+0x1c4>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d109      	bne.n	8006b58 <ADC_ConfigureBoostMode+0x30>
 8006b44:	4b6a      	ldr	r3, [pc, #424]	@ (8006cf0 <ADC_ConfigureBoostMode+0x1c8>)
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	bf14      	ite	ne
 8006b50:	2301      	movne	r3, #1
 8006b52:	2300      	moveq	r3, #0
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	e008      	b.n	8006b6a <ADC_ConfigureBoostMode+0x42>
 8006b58:	4b66      	ldr	r3, [pc, #408]	@ (8006cf4 <ADC_ConfigureBoostMode+0x1cc>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	bf14      	ite	ne
 8006b64:	2301      	movne	r3, #1
 8006b66:	2300      	moveq	r3, #0
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d01c      	beq.n	8006ba8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006b6e:	f004 fda9 	bl	800b6c4 <HAL_RCC_GetHCLKFreq>
 8006b72:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b7c:	d010      	beq.n	8006ba0 <ADC_ConfigureBoostMode+0x78>
 8006b7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b82:	d873      	bhi.n	8006c6c <ADC_ConfigureBoostMode+0x144>
 8006b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b88:	d002      	beq.n	8006b90 <ADC_ConfigureBoostMode+0x68>
 8006b8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b8e:	d16d      	bne.n	8006c6c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	0c1b      	lsrs	r3, r3, #16
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9c:	60fb      	str	r3, [r7, #12]
        break;
 8006b9e:	e068      	b.n	8006c72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	089b      	lsrs	r3, r3, #2
 8006ba4:	60fb      	str	r3, [r7, #12]
        break;
 8006ba6:	e064      	b.n	8006c72 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006ba8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006bac:	f04f 0100 	mov.w	r1, #0
 8006bb0:	f005 ff84 	bl	800cabc <HAL_RCCEx_GetPeriphCLKFreq>
 8006bb4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006bbe:	d051      	beq.n	8006c64 <ADC_ConfigureBoostMode+0x13c>
 8006bc0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006bc4:	d854      	bhi.n	8006c70 <ADC_ConfigureBoostMode+0x148>
 8006bc6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006bca:	d047      	beq.n	8006c5c <ADC_ConfigureBoostMode+0x134>
 8006bcc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006bd0:	d84e      	bhi.n	8006c70 <ADC_ConfigureBoostMode+0x148>
 8006bd2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006bd6:	d03d      	beq.n	8006c54 <ADC_ConfigureBoostMode+0x12c>
 8006bd8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006bdc:	d848      	bhi.n	8006c70 <ADC_ConfigureBoostMode+0x148>
 8006bde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006be2:	d033      	beq.n	8006c4c <ADC_ConfigureBoostMode+0x124>
 8006be4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006be8:	d842      	bhi.n	8006c70 <ADC_ConfigureBoostMode+0x148>
 8006bea:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006bee:	d029      	beq.n	8006c44 <ADC_ConfigureBoostMode+0x11c>
 8006bf0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006bf4:	d83c      	bhi.n	8006c70 <ADC_ConfigureBoostMode+0x148>
 8006bf6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006bfa:	d01a      	beq.n	8006c32 <ADC_ConfigureBoostMode+0x10a>
 8006bfc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006c00:	d836      	bhi.n	8006c70 <ADC_ConfigureBoostMode+0x148>
 8006c02:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006c06:	d014      	beq.n	8006c32 <ADC_ConfigureBoostMode+0x10a>
 8006c08:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006c0c:	d830      	bhi.n	8006c70 <ADC_ConfigureBoostMode+0x148>
 8006c0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c12:	d00e      	beq.n	8006c32 <ADC_ConfigureBoostMode+0x10a>
 8006c14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c18:	d82a      	bhi.n	8006c70 <ADC_ConfigureBoostMode+0x148>
 8006c1a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006c1e:	d008      	beq.n	8006c32 <ADC_ConfigureBoostMode+0x10a>
 8006c20:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006c24:	d824      	bhi.n	8006c70 <ADC_ConfigureBoostMode+0x148>
 8006c26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c2a:	d002      	beq.n	8006c32 <ADC_ConfigureBoostMode+0x10a>
 8006c2c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006c30:	d11e      	bne.n	8006c70 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	0c9b      	lsrs	r3, r3, #18
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c40:	60fb      	str	r3, [r7, #12]
        break;
 8006c42:	e016      	b.n	8006c72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	091b      	lsrs	r3, r3, #4
 8006c48:	60fb      	str	r3, [r7, #12]
        break;
 8006c4a:	e012      	b.n	8006c72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	095b      	lsrs	r3, r3, #5
 8006c50:	60fb      	str	r3, [r7, #12]
        break;
 8006c52:	e00e      	b.n	8006c72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	099b      	lsrs	r3, r3, #6
 8006c58:	60fb      	str	r3, [r7, #12]
        break;
 8006c5a:	e00a      	b.n	8006c72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	09db      	lsrs	r3, r3, #7
 8006c60:	60fb      	str	r3, [r7, #12]
        break;
 8006c62:	e006      	b.n	8006c72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	0a1b      	lsrs	r3, r3, #8
 8006c68:	60fb      	str	r3, [r7, #12]
        break;
 8006c6a:	e002      	b.n	8006c72 <ADC_ConfigureBoostMode+0x14a>
        break;
 8006c6c:	bf00      	nop
 8006c6e:	e000      	b.n	8006c72 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006c70:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	085b      	lsrs	r3, r3, #1
 8006c76:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8006cf8 <ADC_ConfigureBoostMode+0x1d0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d808      	bhi.n	8006c92 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006c8e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006c90:	e025      	b.n	8006cde <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4a19      	ldr	r2, [pc, #100]	@ (8006cfc <ADC_ConfigureBoostMode+0x1d4>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d80a      	bhi.n	8006cb0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006cac:	609a      	str	r2, [r3, #8]
}
 8006cae:	e016      	b.n	8006cde <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4a13      	ldr	r2, [pc, #76]	@ (8006d00 <ADC_ConfigureBoostMode+0x1d8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d80a      	bhi.n	8006cce <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cca:	609a      	str	r2, [r3, #8]
}
 8006ccc:	e007      	b.n	8006cde <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006cdc:	609a      	str	r2, [r3, #8]
}
 8006cde:	bf00      	nop
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	40022000 	.word	0x40022000
 8006cec:	40022100 	.word	0x40022100
 8006cf0:	40022300 	.word	0x40022300
 8006cf4:	58026300 	.word	0x58026300
 8006cf8:	005f5e10 	.word	0x005f5e10
 8006cfc:	00bebc20 	.word	0x00bebc20
 8006d00:	017d7840 	.word	0x017d7840

08006d04 <LL_ADC_IsEnabled>:
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d101      	bne.n	8006d1c <LL_ADC_IsEnabled+0x18>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e000      	b.n	8006d1e <LL_ADC_IsEnabled+0x1a>
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
	...

08006d2c <LL_ADC_StartCalibration>:
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	4b09      	ldr	r3, [pc, #36]	@ (8006d64 <LL_ADC_StartCalibration+0x38>)
 8006d3e:	4013      	ands	r3, r2
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	609a      	str	r2, [r3, #8]
}
 8006d58:	bf00      	nop
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	3ffeffc0 	.word	0x3ffeffc0

08006d68 <LL_ADC_IsCalibrationOnGoing>:
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d7c:	d101      	bne.n	8006d82 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e000      	b.n	8006d84 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <LL_ADC_REG_StartConversion>:
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	4b05      	ldr	r3, [pc, #20]	@ (8006db4 <LL_ADC_REG_StartConversion+0x24>)
 8006d9e:	4013      	ands	r3, r2
 8006da0:	f043 0204 	orr.w	r2, r3, #4
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	609a      	str	r2, [r3, #8]
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	7fffffc0 	.word	0x7fffffc0

08006db8 <LL_ADC_REG_IsConversionOngoing>:
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	d101      	bne.n	8006dd0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e000      	b.n	8006dd2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
	...

08006de0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006dec:	2300      	movs	r3, #0
 8006dee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d101      	bne.n	8006dfe <HAL_ADCEx_Calibration_Start+0x1e>
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	e04c      	b.n	8006e98 <HAL_ADCEx_Calibration_Start+0xb8>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f7ff fd9a 	bl	8006940 <ADC_Disable>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d135      	bne.n	8006e82 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006e1a:	4b21      	ldr	r3, [pc, #132]	@ (8006ea0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	f043 0202 	orr.w	r2, r3, #2
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff ff7c 	bl	8006d2c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006e34:	e014      	b.n	8006e60 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	4a19      	ldr	r2, [pc, #100]	@ (8006ea4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d30d      	bcc.n	8006e60 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e48:	f023 0312 	bic.w	r3, r3, #18
 8006e4c:	f043 0210 	orr.w	r2, r3, #16
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e01b      	b.n	8006e98 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff ff7f 	bl	8006d68 <LL_ADC_IsCalibrationOnGoing>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e2      	bne.n	8006e36 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e74:	f023 0303 	bic.w	r3, r3, #3
 8006e78:	f043 0201 	orr.w	r2, r3, #1
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	661a      	str	r2, [r3, #96]	@ 0x60
 8006e80:	e005      	b.n	8006e8e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e86:	f043 0210 	orr.w	r2, r3, #16
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	ffffeefd 	.word	0xffffeefd
 8006ea4:	25c3f800 	.word	0x25c3f800

08006ea8 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b0a2      	sub	sp, #136	@ 0x88
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff ff7d 	bl	8006db8 <LL_ADC_REG_IsConversionOngoing>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e08c      	b.n	8006fe2 <HAL_ADCEx_MultiModeStart_DMA+0x13a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d101      	bne.n	8006ed6 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	e085      	b.n	8006fe2 <HAL_ADCEx_MultiModeStart_DMA+0x13a>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	673b      	str	r3, [r7, #112]	@ 0x70
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	677b      	str	r3, [r7, #116]	@ 0x74
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a40      	ldr	r2, [pc, #256]	@ (8006fec <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d102      	bne.n	8006ef6 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8006ef0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ff0 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	e001      	b.n	8006efa <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	613b      	str	r3, [r7, #16]

    if (tmphadcSlave.Instance == NULL)
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f04:	f043 0220 	orr.w	r2, r3, #32
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e064      	b.n	8006fe2 <HAL_ADCEx_MultiModeStart_DMA+0x13a>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f7ff fc87 	bl	800682c <ADC_Enable>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (tmp_hal_status == HAL_OK)
 8006f24:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d107      	bne.n	8006f3c <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8006f2c:	f107 0310 	add.w	r3, r7, #16
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff fc7b 	bl	800682c <ADC_Enable>
 8006f36:	4603      	mov	r3, r0
 8006f38:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8006f3c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d148      	bne.n	8006fd6 <HAL_ADCEx_MultiModeStart_DMA+0x12e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006f48:	4b2a      	ldr	r3, [pc, #168]	@ (8006ff4 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	661a      	str	r2, [r3, #96]	@ 0x60
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f5e:	4a26      	ldr	r2, [pc, #152]	@ (8006ff8 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8006f60:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f66:	4a25      	ldr	r2, [pc, #148]	@ (8006ffc <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8006f68:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f6e:	4a24      	ldr	r2, [pc, #144]	@ (8007000 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8006f70:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a1d      	ldr	r2, [pc, #116]	@ (8006fec <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d004      	beq.n	8006f86 <HAL_ADCEx_MultiModeStart_DMA+0xde>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a1b      	ldr	r2, [pc, #108]	@ (8006ff0 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d101      	bne.n	8006f8a <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 8006f86:	4b1f      	ldr	r3, [pc, #124]	@ (8007004 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8006f88:	e000      	b.n	8006f8c <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 8006f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8007008 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8006f8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	221c      	movs	r2, #28
 8006f96:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0210 	orr.w	r2, r2, #16
 8006fae:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8006fb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006fb8:	330c      	adds	r3, #12
 8006fba:	4619      	mov	r1, r3
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f000 feca 	bl	8007d58 <HAL_DMA_Start_IT>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff fede 	bl	8006d90 <LL_ADC_REG_StartConversion>
 8006fd4:	e003      	b.n	8006fde <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    }

    /* Return function status */
    return tmp_hal_status;
 8006fde:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
  }
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3788      	adds	r7, #136	@ 0x88
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	40022000 	.word	0x40022000
 8006ff0:	40022100 	.word	0x40022100
 8006ff4:	fffff0fe 	.word	0xfffff0fe
 8006ff8:	080069ff 	.word	0x080069ff
 8006ffc:	08006ad7 	.word	0x08006ad7
 8007000:	08006af3 	.word	0x08006af3
 8007004:	40022300 	.word	0x40022300
 8007008:	58026300 	.word	0x58026300

0800700c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007070:	b590      	push	{r4, r7, lr}
 8007072:	b0a3      	sub	sp, #140	@ 0x8c
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007086:	2b01      	cmp	r3, #1
 8007088:	d101      	bne.n	800708e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800708a:	2302      	movs	r3, #2
 800708c:	e0c1      	b.n	8007212 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007096:	2300      	movs	r3, #0
 8007098:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800709a:	2300      	movs	r3, #0
 800709c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a5e      	ldr	r2, [pc, #376]	@ (800721c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d102      	bne.n	80070ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80070a8:	4b5d      	ldr	r3, [pc, #372]	@ (8007220 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	e001      	b.n	80070b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80070ae:	2300      	movs	r3, #0
 80070b0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10b      	bne.n	80070d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070bc:	f043 0220 	orr.w	r2, r3, #32
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e0a0      	b.n	8007212 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7ff fe70 	bl	8006db8 <LL_ADC_REG_IsConversionOngoing>
 80070d8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7ff fe69 	bl	8006db8 <LL_ADC_REG_IsConversionOngoing>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f040 8081 	bne.w	80071f0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80070ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d17c      	bne.n	80071f0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a48      	ldr	r2, [pc, #288]	@ (800721c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d004      	beq.n	800710a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a46      	ldr	r2, [pc, #280]	@ (8007220 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d101      	bne.n	800710e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800710a:	4b46      	ldr	r3, [pc, #280]	@ (8007224 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800710c:	e000      	b.n	8007110 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800710e:	4b46      	ldr	r3, [pc, #280]	@ (8007228 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007110:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d039      	beq.n	800718e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800711a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	431a      	orrs	r2, r3
 8007128:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800712a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a3a      	ldr	r2, [pc, #232]	@ (800721c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d004      	beq.n	8007140 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a39      	ldr	r2, [pc, #228]	@ (8007220 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d10e      	bne.n	800715e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8007140:	4836      	ldr	r0, [pc, #216]	@ (800721c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007142:	f7ff fddf 	bl	8006d04 <LL_ADC_IsEnabled>
 8007146:	4604      	mov	r4, r0
 8007148:	4835      	ldr	r0, [pc, #212]	@ (8007220 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800714a:	f7ff fddb 	bl	8006d04 <LL_ADC_IsEnabled>
 800714e:	4603      	mov	r3, r0
 8007150:	4323      	orrs	r3, r4
 8007152:	2b00      	cmp	r3, #0
 8007154:	bf0c      	ite	eq
 8007156:	2301      	moveq	r3, #1
 8007158:	2300      	movne	r3, #0
 800715a:	b2db      	uxtb	r3, r3
 800715c:	e008      	b.n	8007170 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800715e:	4833      	ldr	r0, [pc, #204]	@ (800722c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8007160:	f7ff fdd0 	bl	8006d04 <LL_ADC_IsEnabled>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	bf0c      	ite	eq
 800716a:	2301      	moveq	r3, #1
 800716c:	2300      	movne	r3, #0
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	d047      	beq.n	8007204 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007174:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	4b2d      	ldr	r3, [pc, #180]	@ (8007230 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800717a:	4013      	ands	r3, r2
 800717c:	683a      	ldr	r2, [r7, #0]
 800717e:	6811      	ldr	r1, [r2, #0]
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	6892      	ldr	r2, [r2, #8]
 8007184:	430a      	orrs	r2, r1
 8007186:	431a      	orrs	r2, r3
 8007188:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800718a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800718c:	e03a      	b.n	8007204 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800718e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007196:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007198:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a1f      	ldr	r2, [pc, #124]	@ (800721c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d004      	beq.n	80071ae <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007220 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d10e      	bne.n	80071cc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80071ae:	481b      	ldr	r0, [pc, #108]	@ (800721c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80071b0:	f7ff fda8 	bl	8006d04 <LL_ADC_IsEnabled>
 80071b4:	4604      	mov	r4, r0
 80071b6:	481a      	ldr	r0, [pc, #104]	@ (8007220 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80071b8:	f7ff fda4 	bl	8006d04 <LL_ADC_IsEnabled>
 80071bc:	4603      	mov	r3, r0
 80071be:	4323      	orrs	r3, r4
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bf0c      	ite	eq
 80071c4:	2301      	moveq	r3, #1
 80071c6:	2300      	movne	r3, #0
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	e008      	b.n	80071de <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80071cc:	4817      	ldr	r0, [pc, #92]	@ (800722c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80071ce:	f7ff fd99 	bl	8006d04 <LL_ADC_IsEnabled>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bf0c      	ite	eq
 80071d8:	2301      	moveq	r3, #1
 80071da:	2300      	movne	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d010      	beq.n	8007204 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80071e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	4b12      	ldr	r3, [pc, #72]	@ (8007230 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80071ec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80071ee:	e009      	b.n	8007204 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071f4:	f043 0220 	orr.w	r2, r3, #32
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8007202:	e000      	b.n	8007206 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007204:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800720e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8007212:	4618      	mov	r0, r3
 8007214:	378c      	adds	r7, #140	@ 0x8c
 8007216:	46bd      	mov	sp, r7
 8007218:	bd90      	pop	{r4, r7, pc}
 800721a:	bf00      	nop
 800721c:	40022000 	.word	0x40022000
 8007220:	40022100 	.word	0x40022100
 8007224:	40022300 	.word	0x40022300
 8007228:	58026300 	.word	0x58026300
 800722c:	58026000 	.word	0x58026000
 8007230:	fffff0e0 	.word	0xfffff0e0

08007234 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b088      	sub	sp, #32
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800723c:	2300      	movs	r3, #0
 800723e:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d102      	bne.n	8007250 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	77fb      	strb	r3, [r7, #31]
 800724e:	e10e      	b.n	800746e <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800725a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800725e:	d102      	bne.n	8007266 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	77fb      	strb	r3, [r7, #31]
 8007264:	e103      	b.n	800746e <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d109      	bne.n	8007286 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7fc fadb 	bl	800383c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0304 	and.w	r3, r3, #4
 8007290:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800729a:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 80072a0:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 80072a6:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 80072ac:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80072b2:	4313      	orrs	r3, r2
 80072b4:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	4b6e      	ldr	r3, [pc, #440]	@ (8007478 <HAL_COMP_Init+0x244>)
 80072be:	4013      	ands	r3, r2
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6812      	ldr	r2, [r2, #0]
 80072c4:	6979      	ldr	r1, [r7, #20]
 80072c6:	430b      	orrs	r3, r1
 80072c8:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2b10      	cmp	r3, #16
 80072d0:	d108      	bne.n	80072e4 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f042 0210 	orr.w	r2, r2, #16
 80072e0:	601a      	str	r2, [r3, #0]
 80072e2:	e007      	b.n	80072f4 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0210 	bic.w	r2, r2, #16
 80072f2:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0304 	and.w	r3, r3, #4
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d016      	beq.n	8007330 <HAL_COMP_Init+0xfc>
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d013      	beq.n	8007330 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007308:	4b5c      	ldr	r3, [pc, #368]	@ (800747c <HAL_COMP_Init+0x248>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	099b      	lsrs	r3, r3, #6
 800730e:	4a5c      	ldr	r2, [pc, #368]	@ (8007480 <HAL_COMP_Init+0x24c>)
 8007310:	fba2 2303 	umull	r2, r3, r2, r3
 8007314:	099b      	lsrs	r3, r3, #6
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	4613      	mov	r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8007322:	e002      	b.n	800732a <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3b01      	subs	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1f9      	bne.n	8007324 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a53      	ldr	r2, [pc, #332]	@ (8007484 <HAL_COMP_Init+0x250>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d102      	bne.n	8007340 <HAL_COMP_Init+0x10c>
 800733a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800733e:	e001      	b.n	8007344 <HAL_COMP_Init+0x110>
 8007340:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007344:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	f003 0303 	and.w	r3, r3, #3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d06d      	beq.n	800742e <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	f003 0310 	and.w	r3, r3, #16
 800735a:	2b00      	cmp	r3, #0
 800735c:	d008      	beq.n	8007370 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 800735e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	600b      	str	r3, [r1, #0]
 800736e:	e008      	b.n	8007382 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8007370:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	43db      	mvns	r3, r3
 800737a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800737e:	4013      	ands	r3, r2
 8007380:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	d008      	beq.n	80073a0 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 800738e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	4313      	orrs	r3, r2
 800739c:	604b      	str	r3, [r1, #4]
 800739e:	e008      	b.n	80073b2 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 80073a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	43db      	mvns	r3, r3
 80073aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073ae:	4013      	ands	r3, r2
 80073b0:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 80073b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00a      	beq.n	80073de <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 80073c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073cc:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80073d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 80073dc:	e00a      	b.n	80073f4 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 80073de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	43db      	mvns	r3, r3
 80073ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073ee:	4013      	ands	r3, r2
 80073f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8007400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007404:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007408:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	4313      	orrs	r3, r2
 8007410:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8007414:	e021      	b.n	800745a <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8007416:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800741a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	43db      	mvns	r3, r3
 8007422:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007426:	4013      	ands	r3, r2
 8007428:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 800742c:	e015      	b.n	800745a <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 800742e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007432:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	43db      	mvns	r3, r3
 800743a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800743e:	4013      	ands	r3, r2
 8007440:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8007444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007448:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	43db      	mvns	r3, r3
 8007450:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007454:	4013      	ands	r3, r2
 8007456:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d103      	bne.n	800746e <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 800746e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3720      	adds	r7, #32
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	f0e8cce1 	.word	0xf0e8cce1
 800747c:	24000038 	.word	0x24000038
 8007480:	053e2d63 	.word	0x053e2d63
 8007484:	5800380c 	.word	0x5800380c

08007488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007498:	4b0b      	ldr	r3, [pc, #44]	@ (80074c8 <__NVIC_SetPriorityGrouping+0x40>)
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80074a4:	4013      	ands	r3, r2
 80074a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80074b0:	4b06      	ldr	r3, [pc, #24]	@ (80074cc <__NVIC_SetPriorityGrouping+0x44>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80074b6:	4a04      	ldr	r2, [pc, #16]	@ (80074c8 <__NVIC_SetPriorityGrouping+0x40>)
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	60d3      	str	r3, [r2, #12]
}
 80074bc:	bf00      	nop
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	e000ed00 	.word	0xe000ed00
 80074cc:	05fa0000 	.word	0x05fa0000

080074d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80074d0:	b480      	push	{r7}
 80074d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074d4:	4b04      	ldr	r3, [pc, #16]	@ (80074e8 <__NVIC_GetPriorityGrouping+0x18>)
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	0a1b      	lsrs	r3, r3, #8
 80074da:	f003 0307 	and.w	r3, r3, #7
}
 80074de:	4618      	mov	r0, r3
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	e000ed00 	.word	0xe000ed00

080074ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	4603      	mov	r3, r0
 80074f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80074f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	db0b      	blt.n	8007516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074fe:	88fb      	ldrh	r3, [r7, #6]
 8007500:	f003 021f 	and.w	r2, r3, #31
 8007504:	4907      	ldr	r1, [pc, #28]	@ (8007524 <__NVIC_EnableIRQ+0x38>)
 8007506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800750a:	095b      	lsrs	r3, r3, #5
 800750c:	2001      	movs	r0, #1
 800750e:	fa00 f202 	lsl.w	r2, r0, r2
 8007512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	e000e100 	.word	0xe000e100

08007528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	6039      	str	r1, [r7, #0]
 8007532:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007538:	2b00      	cmp	r3, #0
 800753a:	db0a      	blt.n	8007552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	b2da      	uxtb	r2, r3
 8007540:	490c      	ldr	r1, [pc, #48]	@ (8007574 <__NVIC_SetPriority+0x4c>)
 8007542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007546:	0112      	lsls	r2, r2, #4
 8007548:	b2d2      	uxtb	r2, r2
 800754a:	440b      	add	r3, r1
 800754c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007550:	e00a      	b.n	8007568 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	b2da      	uxtb	r2, r3
 8007556:	4908      	ldr	r1, [pc, #32]	@ (8007578 <__NVIC_SetPriority+0x50>)
 8007558:	88fb      	ldrh	r3, [r7, #6]
 800755a:	f003 030f 	and.w	r3, r3, #15
 800755e:	3b04      	subs	r3, #4
 8007560:	0112      	lsls	r2, r2, #4
 8007562:	b2d2      	uxtb	r2, r2
 8007564:	440b      	add	r3, r1
 8007566:	761a      	strb	r2, [r3, #24]
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	e000e100 	.word	0xe000e100
 8007578:	e000ed00 	.word	0xe000ed00

0800757c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800757c:	b480      	push	{r7}
 800757e:	b089      	sub	sp, #36	@ 0x24
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f003 0307 	and.w	r3, r3, #7
 800758e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	f1c3 0307 	rsb	r3, r3, #7
 8007596:	2b04      	cmp	r3, #4
 8007598:	bf28      	it	cs
 800759a:	2304      	movcs	r3, #4
 800759c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	3304      	adds	r3, #4
 80075a2:	2b06      	cmp	r3, #6
 80075a4:	d902      	bls.n	80075ac <NVIC_EncodePriority+0x30>
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	3b03      	subs	r3, #3
 80075aa:	e000      	b.n	80075ae <NVIC_EncodePriority+0x32>
 80075ac:	2300      	movs	r3, #0
 80075ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ba:	43da      	mvns	r2, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	401a      	ands	r2, r3
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	fa01 f303 	lsl.w	r3, r1, r3
 80075ce:	43d9      	mvns	r1, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075d4:	4313      	orrs	r3, r2
         );
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3724      	adds	r7, #36	@ 0x24
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
	...

080075e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3b01      	subs	r3, #1
 80075f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075f4:	d301      	bcc.n	80075fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80075f6:	2301      	movs	r3, #1
 80075f8:	e00f      	b.n	800761a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80075fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007624 <SysTick_Config+0x40>)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3b01      	subs	r3, #1
 8007600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007602:	210f      	movs	r1, #15
 8007604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007608:	f7ff ff8e 	bl	8007528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800760c:	4b05      	ldr	r3, [pc, #20]	@ (8007624 <SysTick_Config+0x40>)
 800760e:	2200      	movs	r2, #0
 8007610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007612:	4b04      	ldr	r3, [pc, #16]	@ (8007624 <SysTick_Config+0x40>)
 8007614:	2207      	movs	r2, #7
 8007616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	e000e010 	.word	0xe000e010

08007628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7ff ff29 	bl	8007488 <__NVIC_SetPriorityGrouping>
}
 8007636:	bf00      	nop
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b086      	sub	sp, #24
 8007642:	af00      	add	r7, sp, #0
 8007644:	4603      	mov	r3, r0
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
 800764a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800764c:	f7ff ff40 	bl	80074d0 <__NVIC_GetPriorityGrouping>
 8007650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	68b9      	ldr	r1, [r7, #8]
 8007656:	6978      	ldr	r0, [r7, #20]
 8007658:	f7ff ff90 	bl	800757c <NVIC_EncodePriority>
 800765c:	4602      	mov	r2, r0
 800765e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007662:	4611      	mov	r1, r2
 8007664:	4618      	mov	r0, r3
 8007666:	f7ff ff5f 	bl	8007528 <__NVIC_SetPriority>
}
 800766a:	bf00      	nop
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	af00      	add	r7, sp, #0
 8007678:	4603      	mov	r3, r0
 800767a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800767c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff ff33 	bl	80074ec <__NVIC_EnableIRQ>
}
 8007686:	bf00      	nop
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7ff ffa4 	bl	80075e4 <SysTick_Config>
 800769c:	4603      	mov	r3, r0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80076b0:	f7fc fe4e 	bl	8004350 <HAL_GetTick>
 80076b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e312      	b.n	8007ce6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a66      	ldr	r2, [pc, #408]	@ (8007860 <HAL_DMA_Init+0x1b8>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d04a      	beq.n	8007760 <HAL_DMA_Init+0xb8>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a65      	ldr	r2, [pc, #404]	@ (8007864 <HAL_DMA_Init+0x1bc>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d045      	beq.n	8007760 <HAL_DMA_Init+0xb8>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a63      	ldr	r2, [pc, #396]	@ (8007868 <HAL_DMA_Init+0x1c0>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d040      	beq.n	8007760 <HAL_DMA_Init+0xb8>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a62      	ldr	r2, [pc, #392]	@ (800786c <HAL_DMA_Init+0x1c4>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d03b      	beq.n	8007760 <HAL_DMA_Init+0xb8>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a60      	ldr	r2, [pc, #384]	@ (8007870 <HAL_DMA_Init+0x1c8>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d036      	beq.n	8007760 <HAL_DMA_Init+0xb8>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a5f      	ldr	r2, [pc, #380]	@ (8007874 <HAL_DMA_Init+0x1cc>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d031      	beq.n	8007760 <HAL_DMA_Init+0xb8>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a5d      	ldr	r2, [pc, #372]	@ (8007878 <HAL_DMA_Init+0x1d0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d02c      	beq.n	8007760 <HAL_DMA_Init+0xb8>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a5c      	ldr	r2, [pc, #368]	@ (800787c <HAL_DMA_Init+0x1d4>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d027      	beq.n	8007760 <HAL_DMA_Init+0xb8>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a5a      	ldr	r2, [pc, #360]	@ (8007880 <HAL_DMA_Init+0x1d8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d022      	beq.n	8007760 <HAL_DMA_Init+0xb8>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a59      	ldr	r2, [pc, #356]	@ (8007884 <HAL_DMA_Init+0x1dc>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d01d      	beq.n	8007760 <HAL_DMA_Init+0xb8>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a57      	ldr	r2, [pc, #348]	@ (8007888 <HAL_DMA_Init+0x1e0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d018      	beq.n	8007760 <HAL_DMA_Init+0xb8>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a56      	ldr	r2, [pc, #344]	@ (800788c <HAL_DMA_Init+0x1e4>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d013      	beq.n	8007760 <HAL_DMA_Init+0xb8>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a54      	ldr	r2, [pc, #336]	@ (8007890 <HAL_DMA_Init+0x1e8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d00e      	beq.n	8007760 <HAL_DMA_Init+0xb8>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a53      	ldr	r2, [pc, #332]	@ (8007894 <HAL_DMA_Init+0x1ec>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d009      	beq.n	8007760 <HAL_DMA_Init+0xb8>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a51      	ldr	r2, [pc, #324]	@ (8007898 <HAL_DMA_Init+0x1f0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d004      	beq.n	8007760 <HAL_DMA_Init+0xb8>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a50      	ldr	r2, [pc, #320]	@ (800789c <HAL_DMA_Init+0x1f4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d101      	bne.n	8007764 <HAL_DMA_Init+0xbc>
 8007760:	2301      	movs	r3, #1
 8007762:	e000      	b.n	8007766 <HAL_DMA_Init+0xbe>
 8007764:	2300      	movs	r3, #0
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 813c 	beq.w	80079e4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a37      	ldr	r2, [pc, #220]	@ (8007860 <HAL_DMA_Init+0x1b8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d04a      	beq.n	800781c <HAL_DMA_Init+0x174>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a36      	ldr	r2, [pc, #216]	@ (8007864 <HAL_DMA_Init+0x1bc>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d045      	beq.n	800781c <HAL_DMA_Init+0x174>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a34      	ldr	r2, [pc, #208]	@ (8007868 <HAL_DMA_Init+0x1c0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d040      	beq.n	800781c <HAL_DMA_Init+0x174>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a33      	ldr	r2, [pc, #204]	@ (800786c <HAL_DMA_Init+0x1c4>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d03b      	beq.n	800781c <HAL_DMA_Init+0x174>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a31      	ldr	r2, [pc, #196]	@ (8007870 <HAL_DMA_Init+0x1c8>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d036      	beq.n	800781c <HAL_DMA_Init+0x174>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a30      	ldr	r2, [pc, #192]	@ (8007874 <HAL_DMA_Init+0x1cc>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d031      	beq.n	800781c <HAL_DMA_Init+0x174>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a2e      	ldr	r2, [pc, #184]	@ (8007878 <HAL_DMA_Init+0x1d0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d02c      	beq.n	800781c <HAL_DMA_Init+0x174>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a2d      	ldr	r2, [pc, #180]	@ (800787c <HAL_DMA_Init+0x1d4>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d027      	beq.n	800781c <HAL_DMA_Init+0x174>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a2b      	ldr	r2, [pc, #172]	@ (8007880 <HAL_DMA_Init+0x1d8>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d022      	beq.n	800781c <HAL_DMA_Init+0x174>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a2a      	ldr	r2, [pc, #168]	@ (8007884 <HAL_DMA_Init+0x1dc>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d01d      	beq.n	800781c <HAL_DMA_Init+0x174>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a28      	ldr	r2, [pc, #160]	@ (8007888 <HAL_DMA_Init+0x1e0>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d018      	beq.n	800781c <HAL_DMA_Init+0x174>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a27      	ldr	r2, [pc, #156]	@ (800788c <HAL_DMA_Init+0x1e4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d013      	beq.n	800781c <HAL_DMA_Init+0x174>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a25      	ldr	r2, [pc, #148]	@ (8007890 <HAL_DMA_Init+0x1e8>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d00e      	beq.n	800781c <HAL_DMA_Init+0x174>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a24      	ldr	r2, [pc, #144]	@ (8007894 <HAL_DMA_Init+0x1ec>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d009      	beq.n	800781c <HAL_DMA_Init+0x174>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a22      	ldr	r2, [pc, #136]	@ (8007898 <HAL_DMA_Init+0x1f0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d004      	beq.n	800781c <HAL_DMA_Init+0x174>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a21      	ldr	r2, [pc, #132]	@ (800789c <HAL_DMA_Init+0x1f4>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d108      	bne.n	800782e <HAL_DMA_Init+0x186>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 0201 	bic.w	r2, r2, #1
 800782a:	601a      	str	r2, [r3, #0]
 800782c:	e007      	b.n	800783e <HAL_DMA_Init+0x196>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 0201 	bic.w	r2, r2, #1
 800783c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800783e:	e02f      	b.n	80078a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007840:	f7fc fd86 	bl	8004350 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	2b05      	cmp	r3, #5
 800784c:	d928      	bls.n	80078a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2220      	movs	r2, #32
 8007852:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2203      	movs	r2, #3
 8007858:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e242      	b.n	8007ce6 <HAL_DMA_Init+0x63e>
 8007860:	40020010 	.word	0x40020010
 8007864:	40020028 	.word	0x40020028
 8007868:	40020040 	.word	0x40020040
 800786c:	40020058 	.word	0x40020058
 8007870:	40020070 	.word	0x40020070
 8007874:	40020088 	.word	0x40020088
 8007878:	400200a0 	.word	0x400200a0
 800787c:	400200b8 	.word	0x400200b8
 8007880:	40020410 	.word	0x40020410
 8007884:	40020428 	.word	0x40020428
 8007888:	40020440 	.word	0x40020440
 800788c:	40020458 	.word	0x40020458
 8007890:	40020470 	.word	0x40020470
 8007894:	40020488 	.word	0x40020488
 8007898:	400204a0 	.word	0x400204a0
 800789c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1c8      	bne.n	8007840 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	4b83      	ldr	r3, [pc, #524]	@ (8007ac8 <HAL_DMA_Init+0x420>)
 80078ba:	4013      	ands	r3, r2
 80078bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80078c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d107      	bne.n	8007904 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078fc:	4313      	orrs	r3, r2
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	4313      	orrs	r3, r2
 8007902:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	2b28      	cmp	r3, #40	@ 0x28
 800790a:	d903      	bls.n	8007914 <HAL_DMA_Init+0x26c>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2b2e      	cmp	r3, #46	@ 0x2e
 8007912:	d91f      	bls.n	8007954 <HAL_DMA_Init+0x2ac>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	2b3e      	cmp	r3, #62	@ 0x3e
 800791a:	d903      	bls.n	8007924 <HAL_DMA_Init+0x27c>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	2b42      	cmp	r3, #66	@ 0x42
 8007922:	d917      	bls.n	8007954 <HAL_DMA_Init+0x2ac>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	2b46      	cmp	r3, #70	@ 0x46
 800792a:	d903      	bls.n	8007934 <HAL_DMA_Init+0x28c>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	2b48      	cmp	r3, #72	@ 0x48
 8007932:	d90f      	bls.n	8007954 <HAL_DMA_Init+0x2ac>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	2b4e      	cmp	r3, #78	@ 0x4e
 800793a:	d903      	bls.n	8007944 <HAL_DMA_Init+0x29c>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	2b52      	cmp	r3, #82	@ 0x52
 8007942:	d907      	bls.n	8007954 <HAL_DMA_Init+0x2ac>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	2b73      	cmp	r3, #115	@ 0x73
 800794a:	d905      	bls.n	8007958 <HAL_DMA_Init+0x2b0>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	2b77      	cmp	r3, #119	@ 0x77
 8007952:	d801      	bhi.n	8007958 <HAL_DMA_Init+0x2b0>
 8007954:	2301      	movs	r3, #1
 8007956:	e000      	b.n	800795a <HAL_DMA_Init+0x2b2>
 8007958:	2300      	movs	r3, #0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d003      	beq.n	8007966 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007964:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f023 0307 	bic.w	r3, r3, #7
 800797c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	4313      	orrs	r3, r2
 8007986:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800798c:	2b04      	cmp	r3, #4
 800798e:	d117      	bne.n	80079c0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	4313      	orrs	r3, r2
 8007998:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00e      	beq.n	80079c0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 fdca 	bl	800953c <DMA_CheckFifoParam>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d008      	beq.n	80079c0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2240      	movs	r2, #64	@ 0x40
 80079b2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e192      	b.n	8007ce6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 fd05 	bl	80093d8 <DMA_CalcBaseAndBitshift>
 80079ce:	4603      	mov	r3, r0
 80079d0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079d6:	f003 031f 	and.w	r3, r3, #31
 80079da:	223f      	movs	r2, #63	@ 0x3f
 80079dc:	409a      	lsls	r2, r3
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	609a      	str	r2, [r3, #8]
 80079e2:	e0c8      	b.n	8007b76 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a38      	ldr	r2, [pc, #224]	@ (8007acc <HAL_DMA_Init+0x424>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d022      	beq.n	8007a34 <HAL_DMA_Init+0x38c>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a37      	ldr	r2, [pc, #220]	@ (8007ad0 <HAL_DMA_Init+0x428>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d01d      	beq.n	8007a34 <HAL_DMA_Init+0x38c>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a35      	ldr	r2, [pc, #212]	@ (8007ad4 <HAL_DMA_Init+0x42c>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d018      	beq.n	8007a34 <HAL_DMA_Init+0x38c>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a34      	ldr	r2, [pc, #208]	@ (8007ad8 <HAL_DMA_Init+0x430>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d013      	beq.n	8007a34 <HAL_DMA_Init+0x38c>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a32      	ldr	r2, [pc, #200]	@ (8007adc <HAL_DMA_Init+0x434>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00e      	beq.n	8007a34 <HAL_DMA_Init+0x38c>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a31      	ldr	r2, [pc, #196]	@ (8007ae0 <HAL_DMA_Init+0x438>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d009      	beq.n	8007a34 <HAL_DMA_Init+0x38c>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a2f      	ldr	r2, [pc, #188]	@ (8007ae4 <HAL_DMA_Init+0x43c>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d004      	beq.n	8007a34 <HAL_DMA_Init+0x38c>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a2e      	ldr	r2, [pc, #184]	@ (8007ae8 <HAL_DMA_Init+0x440>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d101      	bne.n	8007a38 <HAL_DMA_Init+0x390>
 8007a34:	2301      	movs	r3, #1
 8007a36:	e000      	b.n	8007a3a <HAL_DMA_Init+0x392>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 8092 	beq.w	8007b64 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a21      	ldr	r2, [pc, #132]	@ (8007acc <HAL_DMA_Init+0x424>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d021      	beq.n	8007a8e <HAL_DMA_Init+0x3e6>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a20      	ldr	r2, [pc, #128]	@ (8007ad0 <HAL_DMA_Init+0x428>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d01c      	beq.n	8007a8e <HAL_DMA_Init+0x3e6>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a1e      	ldr	r2, [pc, #120]	@ (8007ad4 <HAL_DMA_Init+0x42c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d017      	beq.n	8007a8e <HAL_DMA_Init+0x3e6>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a1d      	ldr	r2, [pc, #116]	@ (8007ad8 <HAL_DMA_Init+0x430>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d012      	beq.n	8007a8e <HAL_DMA_Init+0x3e6>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8007adc <HAL_DMA_Init+0x434>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d00d      	beq.n	8007a8e <HAL_DMA_Init+0x3e6>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a1a      	ldr	r2, [pc, #104]	@ (8007ae0 <HAL_DMA_Init+0x438>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d008      	beq.n	8007a8e <HAL_DMA_Init+0x3e6>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a18      	ldr	r2, [pc, #96]	@ (8007ae4 <HAL_DMA_Init+0x43c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d003      	beq.n	8007a8e <HAL_DMA_Init+0x3e6>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a17      	ldr	r2, [pc, #92]	@ (8007ae8 <HAL_DMA_Init+0x440>)
 8007a8c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2202      	movs	r2, #2
 8007a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	4b10      	ldr	r3, [pc, #64]	@ (8007aec <HAL_DMA_Init+0x444>)
 8007aaa:	4013      	ands	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	2b40      	cmp	r3, #64	@ 0x40
 8007ab4:	d01c      	beq.n	8007af0 <HAL_DMA_Init+0x448>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	2b80      	cmp	r3, #128	@ 0x80
 8007abc:	d102      	bne.n	8007ac4 <HAL_DMA_Init+0x41c>
 8007abe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007ac2:	e016      	b.n	8007af2 <HAL_DMA_Init+0x44a>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	e014      	b.n	8007af2 <HAL_DMA_Init+0x44a>
 8007ac8:	fe10803f 	.word	0xfe10803f
 8007acc:	58025408 	.word	0x58025408
 8007ad0:	5802541c 	.word	0x5802541c
 8007ad4:	58025430 	.word	0x58025430
 8007ad8:	58025444 	.word	0x58025444
 8007adc:	58025458 	.word	0x58025458
 8007ae0:	5802546c 	.word	0x5802546c
 8007ae4:	58025480 	.word	0x58025480
 8007ae8:	58025494 	.word	0x58025494
 8007aec:	fffe000f 	.word	0xfffe000f
 8007af0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	68d2      	ldr	r2, [r2, #12]
 8007af6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007af8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007b00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007b08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007b10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007b18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007b20:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	461a      	mov	r2, r3
 8007b36:	4b6e      	ldr	r3, [pc, #440]	@ (8007cf0 <HAL_DMA_Init+0x648>)
 8007b38:	4413      	add	r3, r2
 8007b3a:	4a6e      	ldr	r2, [pc, #440]	@ (8007cf4 <HAL_DMA_Init+0x64c>)
 8007b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b40:	091b      	lsrs	r3, r3, #4
 8007b42:	009a      	lsls	r2, r3, #2
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f001 fc45 	bl	80093d8 <DMA_CalcBaseAndBitshift>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b56:	f003 031f 	and.w	r3, r3, #31
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	409a      	lsls	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	605a      	str	r2, [r3, #4]
 8007b62:	e008      	b.n	8007b76 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2240      	movs	r2, #64	@ 0x40
 8007b68:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2203      	movs	r2, #3
 8007b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e0b7      	b.n	8007ce6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a5f      	ldr	r2, [pc, #380]	@ (8007cf8 <HAL_DMA_Init+0x650>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d072      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a5d      	ldr	r2, [pc, #372]	@ (8007cfc <HAL_DMA_Init+0x654>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d06d      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a5c      	ldr	r2, [pc, #368]	@ (8007d00 <HAL_DMA_Init+0x658>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d068      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a5a      	ldr	r2, [pc, #360]	@ (8007d04 <HAL_DMA_Init+0x65c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d063      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a59      	ldr	r2, [pc, #356]	@ (8007d08 <HAL_DMA_Init+0x660>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d05e      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a57      	ldr	r2, [pc, #348]	@ (8007d0c <HAL_DMA_Init+0x664>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d059      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a56      	ldr	r2, [pc, #344]	@ (8007d10 <HAL_DMA_Init+0x668>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d054      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a54      	ldr	r2, [pc, #336]	@ (8007d14 <HAL_DMA_Init+0x66c>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d04f      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a53      	ldr	r2, [pc, #332]	@ (8007d18 <HAL_DMA_Init+0x670>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d04a      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a51      	ldr	r2, [pc, #324]	@ (8007d1c <HAL_DMA_Init+0x674>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d045      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a50      	ldr	r2, [pc, #320]	@ (8007d20 <HAL_DMA_Init+0x678>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d040      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a4e      	ldr	r2, [pc, #312]	@ (8007d24 <HAL_DMA_Init+0x67c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d03b      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a4d      	ldr	r2, [pc, #308]	@ (8007d28 <HAL_DMA_Init+0x680>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d036      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a4b      	ldr	r2, [pc, #300]	@ (8007d2c <HAL_DMA_Init+0x684>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d031      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a4a      	ldr	r2, [pc, #296]	@ (8007d30 <HAL_DMA_Init+0x688>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d02c      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a48      	ldr	r2, [pc, #288]	@ (8007d34 <HAL_DMA_Init+0x68c>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d027      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a47      	ldr	r2, [pc, #284]	@ (8007d38 <HAL_DMA_Init+0x690>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d022      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a45      	ldr	r2, [pc, #276]	@ (8007d3c <HAL_DMA_Init+0x694>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d01d      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a44      	ldr	r2, [pc, #272]	@ (8007d40 <HAL_DMA_Init+0x698>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d018      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a42      	ldr	r2, [pc, #264]	@ (8007d44 <HAL_DMA_Init+0x69c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d013      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a41      	ldr	r2, [pc, #260]	@ (8007d48 <HAL_DMA_Init+0x6a0>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d00e      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a3f      	ldr	r2, [pc, #252]	@ (8007d4c <HAL_DMA_Init+0x6a4>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d009      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a3e      	ldr	r2, [pc, #248]	@ (8007d50 <HAL_DMA_Init+0x6a8>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d004      	beq.n	8007c66 <HAL_DMA_Init+0x5be>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a3c      	ldr	r2, [pc, #240]	@ (8007d54 <HAL_DMA_Init+0x6ac>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d101      	bne.n	8007c6a <HAL_DMA_Init+0x5c2>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <HAL_DMA_Init+0x5c4>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d032      	beq.n	8007cd6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f001 fcdf 	bl	8009634 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	2b80      	cmp	r3, #128	@ 0x80
 8007c7c:	d102      	bne.n	8007c84 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c8c:	b2d2      	uxtb	r2, r2
 8007c8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007c98:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d010      	beq.n	8007cc4 <HAL_DMA_Init+0x61c>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	2b08      	cmp	r3, #8
 8007ca8:	d80c      	bhi.n	8007cc4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f001 fd5c 	bl	8009768 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007cc0:	605a      	str	r2, [r3, #4]
 8007cc2:	e008      	b.n	8007cd6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3718      	adds	r7, #24
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	a7fdabf8 	.word	0xa7fdabf8
 8007cf4:	cccccccd 	.word	0xcccccccd
 8007cf8:	40020010 	.word	0x40020010
 8007cfc:	40020028 	.word	0x40020028
 8007d00:	40020040 	.word	0x40020040
 8007d04:	40020058 	.word	0x40020058
 8007d08:	40020070 	.word	0x40020070
 8007d0c:	40020088 	.word	0x40020088
 8007d10:	400200a0 	.word	0x400200a0
 8007d14:	400200b8 	.word	0x400200b8
 8007d18:	40020410 	.word	0x40020410
 8007d1c:	40020428 	.word	0x40020428
 8007d20:	40020440 	.word	0x40020440
 8007d24:	40020458 	.word	0x40020458
 8007d28:	40020470 	.word	0x40020470
 8007d2c:	40020488 	.word	0x40020488
 8007d30:	400204a0 	.word	0x400204a0
 8007d34:	400204b8 	.word	0x400204b8
 8007d38:	58025408 	.word	0x58025408
 8007d3c:	5802541c 	.word	0x5802541c
 8007d40:	58025430 	.word	0x58025430
 8007d44:	58025444 	.word	0x58025444
 8007d48:	58025458 	.word	0x58025458
 8007d4c:	5802546c 	.word	0x5802546c
 8007d50:	58025480 	.word	0x58025480
 8007d54:	58025494 	.word	0x58025494

08007d58 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e226      	b.n	80081c2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d101      	bne.n	8007d82 <HAL_DMA_Start_IT+0x2a>
 8007d7e:	2302      	movs	r3, #2
 8007d80:	e21f      	b.n	80081c2 <HAL_DMA_Start_IT+0x46a>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	f040 820a 	bne.w	80081ac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a68      	ldr	r2, [pc, #416]	@ (8007f4c <HAL_DMA_Start_IT+0x1f4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d04a      	beq.n	8007e46 <HAL_DMA_Start_IT+0xee>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a66      	ldr	r2, [pc, #408]	@ (8007f50 <HAL_DMA_Start_IT+0x1f8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d045      	beq.n	8007e46 <HAL_DMA_Start_IT+0xee>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a65      	ldr	r2, [pc, #404]	@ (8007f54 <HAL_DMA_Start_IT+0x1fc>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d040      	beq.n	8007e46 <HAL_DMA_Start_IT+0xee>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a63      	ldr	r2, [pc, #396]	@ (8007f58 <HAL_DMA_Start_IT+0x200>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d03b      	beq.n	8007e46 <HAL_DMA_Start_IT+0xee>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a62      	ldr	r2, [pc, #392]	@ (8007f5c <HAL_DMA_Start_IT+0x204>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d036      	beq.n	8007e46 <HAL_DMA_Start_IT+0xee>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a60      	ldr	r2, [pc, #384]	@ (8007f60 <HAL_DMA_Start_IT+0x208>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d031      	beq.n	8007e46 <HAL_DMA_Start_IT+0xee>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a5f      	ldr	r2, [pc, #380]	@ (8007f64 <HAL_DMA_Start_IT+0x20c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d02c      	beq.n	8007e46 <HAL_DMA_Start_IT+0xee>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a5d      	ldr	r2, [pc, #372]	@ (8007f68 <HAL_DMA_Start_IT+0x210>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d027      	beq.n	8007e46 <HAL_DMA_Start_IT+0xee>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a5c      	ldr	r2, [pc, #368]	@ (8007f6c <HAL_DMA_Start_IT+0x214>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d022      	beq.n	8007e46 <HAL_DMA_Start_IT+0xee>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a5a      	ldr	r2, [pc, #360]	@ (8007f70 <HAL_DMA_Start_IT+0x218>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d01d      	beq.n	8007e46 <HAL_DMA_Start_IT+0xee>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a59      	ldr	r2, [pc, #356]	@ (8007f74 <HAL_DMA_Start_IT+0x21c>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d018      	beq.n	8007e46 <HAL_DMA_Start_IT+0xee>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a57      	ldr	r2, [pc, #348]	@ (8007f78 <HAL_DMA_Start_IT+0x220>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d013      	beq.n	8007e46 <HAL_DMA_Start_IT+0xee>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a56      	ldr	r2, [pc, #344]	@ (8007f7c <HAL_DMA_Start_IT+0x224>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d00e      	beq.n	8007e46 <HAL_DMA_Start_IT+0xee>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a54      	ldr	r2, [pc, #336]	@ (8007f80 <HAL_DMA_Start_IT+0x228>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d009      	beq.n	8007e46 <HAL_DMA_Start_IT+0xee>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a53      	ldr	r2, [pc, #332]	@ (8007f84 <HAL_DMA_Start_IT+0x22c>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d004      	beq.n	8007e46 <HAL_DMA_Start_IT+0xee>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a51      	ldr	r2, [pc, #324]	@ (8007f88 <HAL_DMA_Start_IT+0x230>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d108      	bne.n	8007e58 <HAL_DMA_Start_IT+0x100>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f022 0201 	bic.w	r2, r2, #1
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	e007      	b.n	8007e68 <HAL_DMA_Start_IT+0x110>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0201 	bic.w	r2, r2, #1
 8007e66:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	68b9      	ldr	r1, [r7, #8]
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f001 f906 	bl	8009080 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a34      	ldr	r2, [pc, #208]	@ (8007f4c <HAL_DMA_Start_IT+0x1f4>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d04a      	beq.n	8007f14 <HAL_DMA_Start_IT+0x1bc>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a33      	ldr	r2, [pc, #204]	@ (8007f50 <HAL_DMA_Start_IT+0x1f8>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d045      	beq.n	8007f14 <HAL_DMA_Start_IT+0x1bc>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a31      	ldr	r2, [pc, #196]	@ (8007f54 <HAL_DMA_Start_IT+0x1fc>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d040      	beq.n	8007f14 <HAL_DMA_Start_IT+0x1bc>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a30      	ldr	r2, [pc, #192]	@ (8007f58 <HAL_DMA_Start_IT+0x200>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d03b      	beq.n	8007f14 <HAL_DMA_Start_IT+0x1bc>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8007f5c <HAL_DMA_Start_IT+0x204>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d036      	beq.n	8007f14 <HAL_DMA_Start_IT+0x1bc>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8007f60 <HAL_DMA_Start_IT+0x208>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d031      	beq.n	8007f14 <HAL_DMA_Start_IT+0x1bc>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8007f64 <HAL_DMA_Start_IT+0x20c>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d02c      	beq.n	8007f14 <HAL_DMA_Start_IT+0x1bc>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8007f68 <HAL_DMA_Start_IT+0x210>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d027      	beq.n	8007f14 <HAL_DMA_Start_IT+0x1bc>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a28      	ldr	r2, [pc, #160]	@ (8007f6c <HAL_DMA_Start_IT+0x214>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d022      	beq.n	8007f14 <HAL_DMA_Start_IT+0x1bc>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a27      	ldr	r2, [pc, #156]	@ (8007f70 <HAL_DMA_Start_IT+0x218>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d01d      	beq.n	8007f14 <HAL_DMA_Start_IT+0x1bc>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a25      	ldr	r2, [pc, #148]	@ (8007f74 <HAL_DMA_Start_IT+0x21c>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d018      	beq.n	8007f14 <HAL_DMA_Start_IT+0x1bc>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a24      	ldr	r2, [pc, #144]	@ (8007f78 <HAL_DMA_Start_IT+0x220>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d013      	beq.n	8007f14 <HAL_DMA_Start_IT+0x1bc>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a22      	ldr	r2, [pc, #136]	@ (8007f7c <HAL_DMA_Start_IT+0x224>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d00e      	beq.n	8007f14 <HAL_DMA_Start_IT+0x1bc>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a21      	ldr	r2, [pc, #132]	@ (8007f80 <HAL_DMA_Start_IT+0x228>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d009      	beq.n	8007f14 <HAL_DMA_Start_IT+0x1bc>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a1f      	ldr	r2, [pc, #124]	@ (8007f84 <HAL_DMA_Start_IT+0x22c>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d004      	beq.n	8007f14 <HAL_DMA_Start_IT+0x1bc>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8007f88 <HAL_DMA_Start_IT+0x230>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d101      	bne.n	8007f18 <HAL_DMA_Start_IT+0x1c0>
 8007f14:	2301      	movs	r3, #1
 8007f16:	e000      	b.n	8007f1a <HAL_DMA_Start_IT+0x1c2>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d036      	beq.n	8007f8c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f023 021e 	bic.w	r2, r3, #30
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f042 0216 	orr.w	r2, r2, #22
 8007f30:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d03e      	beq.n	8007fb8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f042 0208 	orr.w	r2, r2, #8
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	e035      	b.n	8007fb8 <HAL_DMA_Start_IT+0x260>
 8007f4c:	40020010 	.word	0x40020010
 8007f50:	40020028 	.word	0x40020028
 8007f54:	40020040 	.word	0x40020040
 8007f58:	40020058 	.word	0x40020058
 8007f5c:	40020070 	.word	0x40020070
 8007f60:	40020088 	.word	0x40020088
 8007f64:	400200a0 	.word	0x400200a0
 8007f68:	400200b8 	.word	0x400200b8
 8007f6c:	40020410 	.word	0x40020410
 8007f70:	40020428 	.word	0x40020428
 8007f74:	40020440 	.word	0x40020440
 8007f78:	40020458 	.word	0x40020458
 8007f7c:	40020470 	.word	0x40020470
 8007f80:	40020488 	.word	0x40020488
 8007f84:	400204a0 	.word	0x400204a0
 8007f88:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f023 020e 	bic.w	r2, r3, #14
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 020a 	orr.w	r2, r2, #10
 8007f9e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d007      	beq.n	8007fb8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0204 	orr.w	r2, r2, #4
 8007fb6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a83      	ldr	r2, [pc, #524]	@ (80081cc <HAL_DMA_Start_IT+0x474>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d072      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a82      	ldr	r2, [pc, #520]	@ (80081d0 <HAL_DMA_Start_IT+0x478>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d06d      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a80      	ldr	r2, [pc, #512]	@ (80081d4 <HAL_DMA_Start_IT+0x47c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d068      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a7f      	ldr	r2, [pc, #508]	@ (80081d8 <HAL_DMA_Start_IT+0x480>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d063      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a7d      	ldr	r2, [pc, #500]	@ (80081dc <HAL_DMA_Start_IT+0x484>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d05e      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a7c      	ldr	r2, [pc, #496]	@ (80081e0 <HAL_DMA_Start_IT+0x488>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d059      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a7a      	ldr	r2, [pc, #488]	@ (80081e4 <HAL_DMA_Start_IT+0x48c>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d054      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a79      	ldr	r2, [pc, #484]	@ (80081e8 <HAL_DMA_Start_IT+0x490>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d04f      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a77      	ldr	r2, [pc, #476]	@ (80081ec <HAL_DMA_Start_IT+0x494>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d04a      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a76      	ldr	r2, [pc, #472]	@ (80081f0 <HAL_DMA_Start_IT+0x498>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d045      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a74      	ldr	r2, [pc, #464]	@ (80081f4 <HAL_DMA_Start_IT+0x49c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d040      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a73      	ldr	r2, [pc, #460]	@ (80081f8 <HAL_DMA_Start_IT+0x4a0>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d03b      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a71      	ldr	r2, [pc, #452]	@ (80081fc <HAL_DMA_Start_IT+0x4a4>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d036      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a70      	ldr	r2, [pc, #448]	@ (8008200 <HAL_DMA_Start_IT+0x4a8>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d031      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a6e      	ldr	r2, [pc, #440]	@ (8008204 <HAL_DMA_Start_IT+0x4ac>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d02c      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a6d      	ldr	r2, [pc, #436]	@ (8008208 <HAL_DMA_Start_IT+0x4b0>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d027      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a6b      	ldr	r2, [pc, #428]	@ (800820c <HAL_DMA_Start_IT+0x4b4>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d022      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a6a      	ldr	r2, [pc, #424]	@ (8008210 <HAL_DMA_Start_IT+0x4b8>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d01d      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a68      	ldr	r2, [pc, #416]	@ (8008214 <HAL_DMA_Start_IT+0x4bc>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d018      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a67      	ldr	r2, [pc, #412]	@ (8008218 <HAL_DMA_Start_IT+0x4c0>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d013      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a65      	ldr	r2, [pc, #404]	@ (800821c <HAL_DMA_Start_IT+0x4c4>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d00e      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a64      	ldr	r2, [pc, #400]	@ (8008220 <HAL_DMA_Start_IT+0x4c8>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d009      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a62      	ldr	r2, [pc, #392]	@ (8008224 <HAL_DMA_Start_IT+0x4cc>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d004      	beq.n	80080a8 <HAL_DMA_Start_IT+0x350>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a61      	ldr	r2, [pc, #388]	@ (8008228 <HAL_DMA_Start_IT+0x4d0>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d101      	bne.n	80080ac <HAL_DMA_Start_IT+0x354>
 80080a8:	2301      	movs	r3, #1
 80080aa:	e000      	b.n	80080ae <HAL_DMA_Start_IT+0x356>
 80080ac:	2300      	movs	r3, #0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d01a      	beq.n	80080e8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d007      	beq.n	80080d0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080ce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d007      	beq.n	80080e8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080e6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a37      	ldr	r2, [pc, #220]	@ (80081cc <HAL_DMA_Start_IT+0x474>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d04a      	beq.n	8008188 <HAL_DMA_Start_IT+0x430>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a36      	ldr	r2, [pc, #216]	@ (80081d0 <HAL_DMA_Start_IT+0x478>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d045      	beq.n	8008188 <HAL_DMA_Start_IT+0x430>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a34      	ldr	r2, [pc, #208]	@ (80081d4 <HAL_DMA_Start_IT+0x47c>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d040      	beq.n	8008188 <HAL_DMA_Start_IT+0x430>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a33      	ldr	r2, [pc, #204]	@ (80081d8 <HAL_DMA_Start_IT+0x480>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d03b      	beq.n	8008188 <HAL_DMA_Start_IT+0x430>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a31      	ldr	r2, [pc, #196]	@ (80081dc <HAL_DMA_Start_IT+0x484>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d036      	beq.n	8008188 <HAL_DMA_Start_IT+0x430>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a30      	ldr	r2, [pc, #192]	@ (80081e0 <HAL_DMA_Start_IT+0x488>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d031      	beq.n	8008188 <HAL_DMA_Start_IT+0x430>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a2e      	ldr	r2, [pc, #184]	@ (80081e4 <HAL_DMA_Start_IT+0x48c>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d02c      	beq.n	8008188 <HAL_DMA_Start_IT+0x430>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a2d      	ldr	r2, [pc, #180]	@ (80081e8 <HAL_DMA_Start_IT+0x490>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d027      	beq.n	8008188 <HAL_DMA_Start_IT+0x430>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a2b      	ldr	r2, [pc, #172]	@ (80081ec <HAL_DMA_Start_IT+0x494>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d022      	beq.n	8008188 <HAL_DMA_Start_IT+0x430>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a2a      	ldr	r2, [pc, #168]	@ (80081f0 <HAL_DMA_Start_IT+0x498>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d01d      	beq.n	8008188 <HAL_DMA_Start_IT+0x430>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a28      	ldr	r2, [pc, #160]	@ (80081f4 <HAL_DMA_Start_IT+0x49c>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d018      	beq.n	8008188 <HAL_DMA_Start_IT+0x430>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a27      	ldr	r2, [pc, #156]	@ (80081f8 <HAL_DMA_Start_IT+0x4a0>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d013      	beq.n	8008188 <HAL_DMA_Start_IT+0x430>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a25      	ldr	r2, [pc, #148]	@ (80081fc <HAL_DMA_Start_IT+0x4a4>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d00e      	beq.n	8008188 <HAL_DMA_Start_IT+0x430>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a24      	ldr	r2, [pc, #144]	@ (8008200 <HAL_DMA_Start_IT+0x4a8>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d009      	beq.n	8008188 <HAL_DMA_Start_IT+0x430>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a22      	ldr	r2, [pc, #136]	@ (8008204 <HAL_DMA_Start_IT+0x4ac>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d004      	beq.n	8008188 <HAL_DMA_Start_IT+0x430>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a21      	ldr	r2, [pc, #132]	@ (8008208 <HAL_DMA_Start_IT+0x4b0>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d108      	bne.n	800819a <HAL_DMA_Start_IT+0x442>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f042 0201 	orr.w	r2, r2, #1
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	e012      	b.n	80081c0 <HAL_DMA_Start_IT+0x468>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f042 0201 	orr.w	r2, r2, #1
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	e009      	b.n	80081c0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3718      	adds	r7, #24
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	40020010 	.word	0x40020010
 80081d0:	40020028 	.word	0x40020028
 80081d4:	40020040 	.word	0x40020040
 80081d8:	40020058 	.word	0x40020058
 80081dc:	40020070 	.word	0x40020070
 80081e0:	40020088 	.word	0x40020088
 80081e4:	400200a0 	.word	0x400200a0
 80081e8:	400200b8 	.word	0x400200b8
 80081ec:	40020410 	.word	0x40020410
 80081f0:	40020428 	.word	0x40020428
 80081f4:	40020440 	.word	0x40020440
 80081f8:	40020458 	.word	0x40020458
 80081fc:	40020470 	.word	0x40020470
 8008200:	40020488 	.word	0x40020488
 8008204:	400204a0 	.word	0x400204a0
 8008208:	400204b8 	.word	0x400204b8
 800820c:	58025408 	.word	0x58025408
 8008210:	5802541c 	.word	0x5802541c
 8008214:	58025430 	.word	0x58025430
 8008218:	58025444 	.word	0x58025444
 800821c:	58025458 	.word	0x58025458
 8008220:	5802546c 	.word	0x5802546c
 8008224:	58025480 	.word	0x58025480
 8008228:	58025494 	.word	0x58025494

0800822c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08a      	sub	sp, #40	@ 0x28
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008234:	2300      	movs	r3, #0
 8008236:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008238:	4b67      	ldr	r3, [pc, #412]	@ (80083d8 <HAL_DMA_IRQHandler+0x1ac>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a67      	ldr	r2, [pc, #412]	@ (80083dc <HAL_DMA_IRQHandler+0x1b0>)
 800823e:	fba2 2303 	umull	r2, r3, r2, r3
 8008242:	0a9b      	lsrs	r3, r3, #10
 8008244:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800824a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008250:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a5f      	ldr	r2, [pc, #380]	@ (80083e0 <HAL_DMA_IRQHandler+0x1b4>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d04a      	beq.n	80082fe <HAL_DMA_IRQHandler+0xd2>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a5d      	ldr	r2, [pc, #372]	@ (80083e4 <HAL_DMA_IRQHandler+0x1b8>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d045      	beq.n	80082fe <HAL_DMA_IRQHandler+0xd2>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a5c      	ldr	r2, [pc, #368]	@ (80083e8 <HAL_DMA_IRQHandler+0x1bc>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d040      	beq.n	80082fe <HAL_DMA_IRQHandler+0xd2>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a5a      	ldr	r2, [pc, #360]	@ (80083ec <HAL_DMA_IRQHandler+0x1c0>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d03b      	beq.n	80082fe <HAL_DMA_IRQHandler+0xd2>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a59      	ldr	r2, [pc, #356]	@ (80083f0 <HAL_DMA_IRQHandler+0x1c4>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d036      	beq.n	80082fe <HAL_DMA_IRQHandler+0xd2>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a57      	ldr	r2, [pc, #348]	@ (80083f4 <HAL_DMA_IRQHandler+0x1c8>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d031      	beq.n	80082fe <HAL_DMA_IRQHandler+0xd2>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a56      	ldr	r2, [pc, #344]	@ (80083f8 <HAL_DMA_IRQHandler+0x1cc>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d02c      	beq.n	80082fe <HAL_DMA_IRQHandler+0xd2>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a54      	ldr	r2, [pc, #336]	@ (80083fc <HAL_DMA_IRQHandler+0x1d0>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d027      	beq.n	80082fe <HAL_DMA_IRQHandler+0xd2>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a53      	ldr	r2, [pc, #332]	@ (8008400 <HAL_DMA_IRQHandler+0x1d4>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d022      	beq.n	80082fe <HAL_DMA_IRQHandler+0xd2>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a51      	ldr	r2, [pc, #324]	@ (8008404 <HAL_DMA_IRQHandler+0x1d8>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d01d      	beq.n	80082fe <HAL_DMA_IRQHandler+0xd2>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a50      	ldr	r2, [pc, #320]	@ (8008408 <HAL_DMA_IRQHandler+0x1dc>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d018      	beq.n	80082fe <HAL_DMA_IRQHandler+0xd2>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a4e      	ldr	r2, [pc, #312]	@ (800840c <HAL_DMA_IRQHandler+0x1e0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d013      	beq.n	80082fe <HAL_DMA_IRQHandler+0xd2>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a4d      	ldr	r2, [pc, #308]	@ (8008410 <HAL_DMA_IRQHandler+0x1e4>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d00e      	beq.n	80082fe <HAL_DMA_IRQHandler+0xd2>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a4b      	ldr	r2, [pc, #300]	@ (8008414 <HAL_DMA_IRQHandler+0x1e8>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d009      	beq.n	80082fe <HAL_DMA_IRQHandler+0xd2>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a4a      	ldr	r2, [pc, #296]	@ (8008418 <HAL_DMA_IRQHandler+0x1ec>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d004      	beq.n	80082fe <HAL_DMA_IRQHandler+0xd2>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a48      	ldr	r2, [pc, #288]	@ (800841c <HAL_DMA_IRQHandler+0x1f0>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d101      	bne.n	8008302 <HAL_DMA_IRQHandler+0xd6>
 80082fe:	2301      	movs	r3, #1
 8008300:	e000      	b.n	8008304 <HAL_DMA_IRQHandler+0xd8>
 8008302:	2300      	movs	r3, #0
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 842b 	beq.w	8008b60 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800830e:	f003 031f 	and.w	r3, r3, #31
 8008312:	2208      	movs	r2, #8
 8008314:	409a      	lsls	r2, r3
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	4013      	ands	r3, r2
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 80a2 	beq.w	8008464 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a2e      	ldr	r2, [pc, #184]	@ (80083e0 <HAL_DMA_IRQHandler+0x1b4>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d04a      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x194>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a2d      	ldr	r2, [pc, #180]	@ (80083e4 <HAL_DMA_IRQHandler+0x1b8>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d045      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x194>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a2b      	ldr	r2, [pc, #172]	@ (80083e8 <HAL_DMA_IRQHandler+0x1bc>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d040      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x194>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a2a      	ldr	r2, [pc, #168]	@ (80083ec <HAL_DMA_IRQHandler+0x1c0>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d03b      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x194>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a28      	ldr	r2, [pc, #160]	@ (80083f0 <HAL_DMA_IRQHandler+0x1c4>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d036      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x194>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a27      	ldr	r2, [pc, #156]	@ (80083f4 <HAL_DMA_IRQHandler+0x1c8>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d031      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x194>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a25      	ldr	r2, [pc, #148]	@ (80083f8 <HAL_DMA_IRQHandler+0x1cc>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d02c      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x194>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a24      	ldr	r2, [pc, #144]	@ (80083fc <HAL_DMA_IRQHandler+0x1d0>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d027      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x194>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a22      	ldr	r2, [pc, #136]	@ (8008400 <HAL_DMA_IRQHandler+0x1d4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d022      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x194>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a21      	ldr	r2, [pc, #132]	@ (8008404 <HAL_DMA_IRQHandler+0x1d8>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d01d      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x194>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a1f      	ldr	r2, [pc, #124]	@ (8008408 <HAL_DMA_IRQHandler+0x1dc>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d018      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x194>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a1e      	ldr	r2, [pc, #120]	@ (800840c <HAL_DMA_IRQHandler+0x1e0>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d013      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x194>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a1c      	ldr	r2, [pc, #112]	@ (8008410 <HAL_DMA_IRQHandler+0x1e4>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d00e      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x194>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a1b      	ldr	r2, [pc, #108]	@ (8008414 <HAL_DMA_IRQHandler+0x1e8>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d009      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x194>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a19      	ldr	r2, [pc, #100]	@ (8008418 <HAL_DMA_IRQHandler+0x1ec>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d004      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x194>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a18      	ldr	r2, [pc, #96]	@ (800841c <HAL_DMA_IRQHandler+0x1f0>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d12f      	bne.n	8008420 <HAL_DMA_IRQHandler+0x1f4>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0304 	and.w	r3, r3, #4
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	bf14      	ite	ne
 80083ce:	2301      	movne	r3, #1
 80083d0:	2300      	moveq	r3, #0
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	e02e      	b.n	8008434 <HAL_DMA_IRQHandler+0x208>
 80083d6:	bf00      	nop
 80083d8:	24000038 	.word	0x24000038
 80083dc:	1b4e81b5 	.word	0x1b4e81b5
 80083e0:	40020010 	.word	0x40020010
 80083e4:	40020028 	.word	0x40020028
 80083e8:	40020040 	.word	0x40020040
 80083ec:	40020058 	.word	0x40020058
 80083f0:	40020070 	.word	0x40020070
 80083f4:	40020088 	.word	0x40020088
 80083f8:	400200a0 	.word	0x400200a0
 80083fc:	400200b8 	.word	0x400200b8
 8008400:	40020410 	.word	0x40020410
 8008404:	40020428 	.word	0x40020428
 8008408:	40020440 	.word	0x40020440
 800840c:	40020458 	.word	0x40020458
 8008410:	40020470 	.word	0x40020470
 8008414:	40020488 	.word	0x40020488
 8008418:	400204a0 	.word	0x400204a0
 800841c:	400204b8 	.word	0x400204b8
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0308 	and.w	r3, r3, #8
 800842a:	2b00      	cmp	r3, #0
 800842c:	bf14      	ite	ne
 800842e:	2301      	movne	r3, #1
 8008430:	2300      	moveq	r3, #0
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2b00      	cmp	r3, #0
 8008436:	d015      	beq.n	8008464 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f022 0204 	bic.w	r2, r2, #4
 8008446:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800844c:	f003 031f 	and.w	r3, r3, #31
 8008450:	2208      	movs	r2, #8
 8008452:	409a      	lsls	r2, r3
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800845c:	f043 0201 	orr.w	r2, r3, #1
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008468:	f003 031f 	and.w	r3, r3, #31
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	fa22 f303 	lsr.w	r3, r2, r3
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b00      	cmp	r3, #0
 8008478:	d06e      	beq.n	8008558 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a69      	ldr	r2, [pc, #420]	@ (8008624 <HAL_DMA_IRQHandler+0x3f8>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d04a      	beq.n	800851a <HAL_DMA_IRQHandler+0x2ee>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a67      	ldr	r2, [pc, #412]	@ (8008628 <HAL_DMA_IRQHandler+0x3fc>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d045      	beq.n	800851a <HAL_DMA_IRQHandler+0x2ee>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a66      	ldr	r2, [pc, #408]	@ (800862c <HAL_DMA_IRQHandler+0x400>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d040      	beq.n	800851a <HAL_DMA_IRQHandler+0x2ee>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a64      	ldr	r2, [pc, #400]	@ (8008630 <HAL_DMA_IRQHandler+0x404>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d03b      	beq.n	800851a <HAL_DMA_IRQHandler+0x2ee>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a63      	ldr	r2, [pc, #396]	@ (8008634 <HAL_DMA_IRQHandler+0x408>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d036      	beq.n	800851a <HAL_DMA_IRQHandler+0x2ee>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a61      	ldr	r2, [pc, #388]	@ (8008638 <HAL_DMA_IRQHandler+0x40c>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d031      	beq.n	800851a <HAL_DMA_IRQHandler+0x2ee>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a60      	ldr	r2, [pc, #384]	@ (800863c <HAL_DMA_IRQHandler+0x410>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d02c      	beq.n	800851a <HAL_DMA_IRQHandler+0x2ee>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a5e      	ldr	r2, [pc, #376]	@ (8008640 <HAL_DMA_IRQHandler+0x414>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d027      	beq.n	800851a <HAL_DMA_IRQHandler+0x2ee>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a5d      	ldr	r2, [pc, #372]	@ (8008644 <HAL_DMA_IRQHandler+0x418>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d022      	beq.n	800851a <HAL_DMA_IRQHandler+0x2ee>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a5b      	ldr	r2, [pc, #364]	@ (8008648 <HAL_DMA_IRQHandler+0x41c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d01d      	beq.n	800851a <HAL_DMA_IRQHandler+0x2ee>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a5a      	ldr	r2, [pc, #360]	@ (800864c <HAL_DMA_IRQHandler+0x420>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d018      	beq.n	800851a <HAL_DMA_IRQHandler+0x2ee>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a58      	ldr	r2, [pc, #352]	@ (8008650 <HAL_DMA_IRQHandler+0x424>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d013      	beq.n	800851a <HAL_DMA_IRQHandler+0x2ee>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a57      	ldr	r2, [pc, #348]	@ (8008654 <HAL_DMA_IRQHandler+0x428>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d00e      	beq.n	800851a <HAL_DMA_IRQHandler+0x2ee>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a55      	ldr	r2, [pc, #340]	@ (8008658 <HAL_DMA_IRQHandler+0x42c>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d009      	beq.n	800851a <HAL_DMA_IRQHandler+0x2ee>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a54      	ldr	r2, [pc, #336]	@ (800865c <HAL_DMA_IRQHandler+0x430>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d004      	beq.n	800851a <HAL_DMA_IRQHandler+0x2ee>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a52      	ldr	r2, [pc, #328]	@ (8008660 <HAL_DMA_IRQHandler+0x434>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d10a      	bne.n	8008530 <HAL_DMA_IRQHandler+0x304>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008524:	2b00      	cmp	r3, #0
 8008526:	bf14      	ite	ne
 8008528:	2301      	movne	r3, #1
 800852a:	2300      	moveq	r3, #0
 800852c:	b2db      	uxtb	r3, r3
 800852e:	e003      	b.n	8008538 <HAL_DMA_IRQHandler+0x30c>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2300      	movs	r3, #0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00d      	beq.n	8008558 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008540:	f003 031f 	and.w	r3, r3, #31
 8008544:	2201      	movs	r2, #1
 8008546:	409a      	lsls	r2, r3
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008550:	f043 0202 	orr.w	r2, r3, #2
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800855c:	f003 031f 	and.w	r3, r3, #31
 8008560:	2204      	movs	r2, #4
 8008562:	409a      	lsls	r2, r3
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	4013      	ands	r3, r2
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 808f 	beq.w	800868c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a2c      	ldr	r2, [pc, #176]	@ (8008624 <HAL_DMA_IRQHandler+0x3f8>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d04a      	beq.n	800860e <HAL_DMA_IRQHandler+0x3e2>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a2a      	ldr	r2, [pc, #168]	@ (8008628 <HAL_DMA_IRQHandler+0x3fc>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d045      	beq.n	800860e <HAL_DMA_IRQHandler+0x3e2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a29      	ldr	r2, [pc, #164]	@ (800862c <HAL_DMA_IRQHandler+0x400>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d040      	beq.n	800860e <HAL_DMA_IRQHandler+0x3e2>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a27      	ldr	r2, [pc, #156]	@ (8008630 <HAL_DMA_IRQHandler+0x404>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d03b      	beq.n	800860e <HAL_DMA_IRQHandler+0x3e2>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a26      	ldr	r2, [pc, #152]	@ (8008634 <HAL_DMA_IRQHandler+0x408>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d036      	beq.n	800860e <HAL_DMA_IRQHandler+0x3e2>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a24      	ldr	r2, [pc, #144]	@ (8008638 <HAL_DMA_IRQHandler+0x40c>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d031      	beq.n	800860e <HAL_DMA_IRQHandler+0x3e2>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a23      	ldr	r2, [pc, #140]	@ (800863c <HAL_DMA_IRQHandler+0x410>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d02c      	beq.n	800860e <HAL_DMA_IRQHandler+0x3e2>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a21      	ldr	r2, [pc, #132]	@ (8008640 <HAL_DMA_IRQHandler+0x414>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d027      	beq.n	800860e <HAL_DMA_IRQHandler+0x3e2>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a20      	ldr	r2, [pc, #128]	@ (8008644 <HAL_DMA_IRQHandler+0x418>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d022      	beq.n	800860e <HAL_DMA_IRQHandler+0x3e2>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a1e      	ldr	r2, [pc, #120]	@ (8008648 <HAL_DMA_IRQHandler+0x41c>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d01d      	beq.n	800860e <HAL_DMA_IRQHandler+0x3e2>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a1d      	ldr	r2, [pc, #116]	@ (800864c <HAL_DMA_IRQHandler+0x420>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d018      	beq.n	800860e <HAL_DMA_IRQHandler+0x3e2>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a1b      	ldr	r2, [pc, #108]	@ (8008650 <HAL_DMA_IRQHandler+0x424>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d013      	beq.n	800860e <HAL_DMA_IRQHandler+0x3e2>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008654 <HAL_DMA_IRQHandler+0x428>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d00e      	beq.n	800860e <HAL_DMA_IRQHandler+0x3e2>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a18      	ldr	r2, [pc, #96]	@ (8008658 <HAL_DMA_IRQHandler+0x42c>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d009      	beq.n	800860e <HAL_DMA_IRQHandler+0x3e2>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a17      	ldr	r2, [pc, #92]	@ (800865c <HAL_DMA_IRQHandler+0x430>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d004      	beq.n	800860e <HAL_DMA_IRQHandler+0x3e2>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a15      	ldr	r2, [pc, #84]	@ (8008660 <HAL_DMA_IRQHandler+0x434>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d12a      	bne.n	8008664 <HAL_DMA_IRQHandler+0x438>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0302 	and.w	r3, r3, #2
 8008618:	2b00      	cmp	r3, #0
 800861a:	bf14      	ite	ne
 800861c:	2301      	movne	r3, #1
 800861e:	2300      	moveq	r3, #0
 8008620:	b2db      	uxtb	r3, r3
 8008622:	e023      	b.n	800866c <HAL_DMA_IRQHandler+0x440>
 8008624:	40020010 	.word	0x40020010
 8008628:	40020028 	.word	0x40020028
 800862c:	40020040 	.word	0x40020040
 8008630:	40020058 	.word	0x40020058
 8008634:	40020070 	.word	0x40020070
 8008638:	40020088 	.word	0x40020088
 800863c:	400200a0 	.word	0x400200a0
 8008640:	400200b8 	.word	0x400200b8
 8008644:	40020410 	.word	0x40020410
 8008648:	40020428 	.word	0x40020428
 800864c:	40020440 	.word	0x40020440
 8008650:	40020458 	.word	0x40020458
 8008654:	40020470 	.word	0x40020470
 8008658:	40020488 	.word	0x40020488
 800865c:	400204a0 	.word	0x400204a0
 8008660:	400204b8 	.word	0x400204b8
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2300      	movs	r3, #0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00d      	beq.n	800868c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008674:	f003 031f 	and.w	r3, r3, #31
 8008678:	2204      	movs	r2, #4
 800867a:	409a      	lsls	r2, r3
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008684:	f043 0204 	orr.w	r2, r3, #4
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008690:	f003 031f 	and.w	r3, r3, #31
 8008694:	2210      	movs	r2, #16
 8008696:	409a      	lsls	r2, r3
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	4013      	ands	r3, r2
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 80a6 	beq.w	80087ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a85      	ldr	r2, [pc, #532]	@ (80088bc <HAL_DMA_IRQHandler+0x690>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d04a      	beq.n	8008742 <HAL_DMA_IRQHandler+0x516>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a83      	ldr	r2, [pc, #524]	@ (80088c0 <HAL_DMA_IRQHandler+0x694>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d045      	beq.n	8008742 <HAL_DMA_IRQHandler+0x516>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a82      	ldr	r2, [pc, #520]	@ (80088c4 <HAL_DMA_IRQHandler+0x698>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d040      	beq.n	8008742 <HAL_DMA_IRQHandler+0x516>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a80      	ldr	r2, [pc, #512]	@ (80088c8 <HAL_DMA_IRQHandler+0x69c>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d03b      	beq.n	8008742 <HAL_DMA_IRQHandler+0x516>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a7f      	ldr	r2, [pc, #508]	@ (80088cc <HAL_DMA_IRQHandler+0x6a0>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d036      	beq.n	8008742 <HAL_DMA_IRQHandler+0x516>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a7d      	ldr	r2, [pc, #500]	@ (80088d0 <HAL_DMA_IRQHandler+0x6a4>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d031      	beq.n	8008742 <HAL_DMA_IRQHandler+0x516>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a7c      	ldr	r2, [pc, #496]	@ (80088d4 <HAL_DMA_IRQHandler+0x6a8>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d02c      	beq.n	8008742 <HAL_DMA_IRQHandler+0x516>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a7a      	ldr	r2, [pc, #488]	@ (80088d8 <HAL_DMA_IRQHandler+0x6ac>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d027      	beq.n	8008742 <HAL_DMA_IRQHandler+0x516>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a79      	ldr	r2, [pc, #484]	@ (80088dc <HAL_DMA_IRQHandler+0x6b0>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d022      	beq.n	8008742 <HAL_DMA_IRQHandler+0x516>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a77      	ldr	r2, [pc, #476]	@ (80088e0 <HAL_DMA_IRQHandler+0x6b4>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d01d      	beq.n	8008742 <HAL_DMA_IRQHandler+0x516>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a76      	ldr	r2, [pc, #472]	@ (80088e4 <HAL_DMA_IRQHandler+0x6b8>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d018      	beq.n	8008742 <HAL_DMA_IRQHandler+0x516>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a74      	ldr	r2, [pc, #464]	@ (80088e8 <HAL_DMA_IRQHandler+0x6bc>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d013      	beq.n	8008742 <HAL_DMA_IRQHandler+0x516>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a73      	ldr	r2, [pc, #460]	@ (80088ec <HAL_DMA_IRQHandler+0x6c0>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d00e      	beq.n	8008742 <HAL_DMA_IRQHandler+0x516>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a71      	ldr	r2, [pc, #452]	@ (80088f0 <HAL_DMA_IRQHandler+0x6c4>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d009      	beq.n	8008742 <HAL_DMA_IRQHandler+0x516>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a70      	ldr	r2, [pc, #448]	@ (80088f4 <HAL_DMA_IRQHandler+0x6c8>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d004      	beq.n	8008742 <HAL_DMA_IRQHandler+0x516>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a6e      	ldr	r2, [pc, #440]	@ (80088f8 <HAL_DMA_IRQHandler+0x6cc>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d10a      	bne.n	8008758 <HAL_DMA_IRQHandler+0x52c>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0308 	and.w	r3, r3, #8
 800874c:	2b00      	cmp	r3, #0
 800874e:	bf14      	ite	ne
 8008750:	2301      	movne	r3, #1
 8008752:	2300      	moveq	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	e009      	b.n	800876c <HAL_DMA_IRQHandler+0x540>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0304 	and.w	r3, r3, #4
 8008762:	2b00      	cmp	r3, #0
 8008764:	bf14      	ite	ne
 8008766:	2301      	movne	r3, #1
 8008768:	2300      	moveq	r3, #0
 800876a:	b2db      	uxtb	r3, r3
 800876c:	2b00      	cmp	r3, #0
 800876e:	d03e      	beq.n	80087ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008774:	f003 031f 	and.w	r3, r3, #31
 8008778:	2210      	movs	r2, #16
 800877a:	409a      	lsls	r2, r3
 800877c:	6a3b      	ldr	r3, [r7, #32]
 800877e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d018      	beq.n	80087c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d108      	bne.n	80087ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d024      	beq.n	80087ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	4798      	blx	r3
 80087ac:	e01f      	b.n	80087ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d01b      	beq.n	80087ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	4798      	blx	r3
 80087be:	e016      	b.n	80087ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d107      	bne.n	80087de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 0208 	bic.w	r2, r2, #8
 80087dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087f2:	f003 031f 	and.w	r3, r3, #31
 80087f6:	2220      	movs	r2, #32
 80087f8:	409a      	lsls	r2, r3
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	4013      	ands	r3, r2
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 8110 	beq.w	8008a24 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a2c      	ldr	r2, [pc, #176]	@ (80088bc <HAL_DMA_IRQHandler+0x690>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d04a      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x678>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a2b      	ldr	r2, [pc, #172]	@ (80088c0 <HAL_DMA_IRQHandler+0x694>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d045      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x678>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a29      	ldr	r2, [pc, #164]	@ (80088c4 <HAL_DMA_IRQHandler+0x698>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d040      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x678>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a28      	ldr	r2, [pc, #160]	@ (80088c8 <HAL_DMA_IRQHandler+0x69c>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d03b      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x678>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a26      	ldr	r2, [pc, #152]	@ (80088cc <HAL_DMA_IRQHandler+0x6a0>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d036      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x678>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a25      	ldr	r2, [pc, #148]	@ (80088d0 <HAL_DMA_IRQHandler+0x6a4>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d031      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x678>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a23      	ldr	r2, [pc, #140]	@ (80088d4 <HAL_DMA_IRQHandler+0x6a8>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d02c      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x678>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a22      	ldr	r2, [pc, #136]	@ (80088d8 <HAL_DMA_IRQHandler+0x6ac>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d027      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x678>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a20      	ldr	r2, [pc, #128]	@ (80088dc <HAL_DMA_IRQHandler+0x6b0>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d022      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x678>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a1f      	ldr	r2, [pc, #124]	@ (80088e0 <HAL_DMA_IRQHandler+0x6b4>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d01d      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x678>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a1d      	ldr	r2, [pc, #116]	@ (80088e4 <HAL_DMA_IRQHandler+0x6b8>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d018      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x678>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a1c      	ldr	r2, [pc, #112]	@ (80088e8 <HAL_DMA_IRQHandler+0x6bc>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d013      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x678>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a1a      	ldr	r2, [pc, #104]	@ (80088ec <HAL_DMA_IRQHandler+0x6c0>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d00e      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x678>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a19      	ldr	r2, [pc, #100]	@ (80088f0 <HAL_DMA_IRQHandler+0x6c4>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d009      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x678>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a17      	ldr	r2, [pc, #92]	@ (80088f4 <HAL_DMA_IRQHandler+0x6c8>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d004      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x678>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a16      	ldr	r2, [pc, #88]	@ (80088f8 <HAL_DMA_IRQHandler+0x6cc>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d12b      	bne.n	80088fc <HAL_DMA_IRQHandler+0x6d0>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0310 	and.w	r3, r3, #16
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	bf14      	ite	ne
 80088b2:	2301      	movne	r3, #1
 80088b4:	2300      	moveq	r3, #0
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	e02a      	b.n	8008910 <HAL_DMA_IRQHandler+0x6e4>
 80088ba:	bf00      	nop
 80088bc:	40020010 	.word	0x40020010
 80088c0:	40020028 	.word	0x40020028
 80088c4:	40020040 	.word	0x40020040
 80088c8:	40020058 	.word	0x40020058
 80088cc:	40020070 	.word	0x40020070
 80088d0:	40020088 	.word	0x40020088
 80088d4:	400200a0 	.word	0x400200a0
 80088d8:	400200b8 	.word	0x400200b8
 80088dc:	40020410 	.word	0x40020410
 80088e0:	40020428 	.word	0x40020428
 80088e4:	40020440 	.word	0x40020440
 80088e8:	40020458 	.word	0x40020458
 80088ec:	40020470 	.word	0x40020470
 80088f0:	40020488 	.word	0x40020488
 80088f4:	400204a0 	.word	0x400204a0
 80088f8:	400204b8 	.word	0x400204b8
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 0302 	and.w	r3, r3, #2
 8008906:	2b00      	cmp	r3, #0
 8008908:	bf14      	ite	ne
 800890a:	2301      	movne	r3, #1
 800890c:	2300      	moveq	r3, #0
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 8087 	beq.w	8008a24 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800891a:	f003 031f 	and.w	r3, r3, #31
 800891e:	2220      	movs	r2, #32
 8008920:	409a      	lsls	r2, r3
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b04      	cmp	r3, #4
 8008930:	d139      	bne.n	80089a6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f022 0216 	bic.w	r2, r2, #22
 8008940:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	695a      	ldr	r2, [r3, #20]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008950:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008956:	2b00      	cmp	r3, #0
 8008958:	d103      	bne.n	8008962 <HAL_DMA_IRQHandler+0x736>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800895e:	2b00      	cmp	r3, #0
 8008960:	d007      	beq.n	8008972 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f022 0208 	bic.w	r2, r2, #8
 8008970:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008976:	f003 031f 	and.w	r3, r3, #31
 800897a:	223f      	movs	r2, #63	@ 0x3f
 800897c:	409a      	lsls	r2, r3
 800897e:	6a3b      	ldr	r3, [r7, #32]
 8008980:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008996:	2b00      	cmp	r3, #0
 8008998:	f000 834a 	beq.w	8009030 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	4798      	blx	r3
          }
          return;
 80089a4:	e344      	b.n	8009030 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d018      	beq.n	80089e6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d108      	bne.n	80089d4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d02c      	beq.n	8008a24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	4798      	blx	r3
 80089d2:	e027      	b.n	8008a24 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d023      	beq.n	8008a24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	4798      	blx	r3
 80089e4:	e01e      	b.n	8008a24 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10f      	bne.n	8008a14 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f022 0210 	bic.w	r2, r2, #16
 8008a02:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d003      	beq.n	8008a24 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 8306 	beq.w	800903a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 8088 	beq.w	8008b4c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2204      	movs	r2, #4
 8008a40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a7a      	ldr	r2, [pc, #488]	@ (8008c34 <HAL_DMA_IRQHandler+0xa08>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d04a      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x8b8>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a79      	ldr	r2, [pc, #484]	@ (8008c38 <HAL_DMA_IRQHandler+0xa0c>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d045      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x8b8>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a77      	ldr	r2, [pc, #476]	@ (8008c3c <HAL_DMA_IRQHandler+0xa10>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d040      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x8b8>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a76      	ldr	r2, [pc, #472]	@ (8008c40 <HAL_DMA_IRQHandler+0xa14>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d03b      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x8b8>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a74      	ldr	r2, [pc, #464]	@ (8008c44 <HAL_DMA_IRQHandler+0xa18>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d036      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x8b8>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a73      	ldr	r2, [pc, #460]	@ (8008c48 <HAL_DMA_IRQHandler+0xa1c>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d031      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x8b8>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a71      	ldr	r2, [pc, #452]	@ (8008c4c <HAL_DMA_IRQHandler+0xa20>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d02c      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x8b8>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a70      	ldr	r2, [pc, #448]	@ (8008c50 <HAL_DMA_IRQHandler+0xa24>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d027      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x8b8>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a6e      	ldr	r2, [pc, #440]	@ (8008c54 <HAL_DMA_IRQHandler+0xa28>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d022      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x8b8>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a6d      	ldr	r2, [pc, #436]	@ (8008c58 <HAL_DMA_IRQHandler+0xa2c>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d01d      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x8b8>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a6b      	ldr	r2, [pc, #428]	@ (8008c5c <HAL_DMA_IRQHandler+0xa30>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d018      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x8b8>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a6a      	ldr	r2, [pc, #424]	@ (8008c60 <HAL_DMA_IRQHandler+0xa34>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d013      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x8b8>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a68      	ldr	r2, [pc, #416]	@ (8008c64 <HAL_DMA_IRQHandler+0xa38>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d00e      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x8b8>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a67      	ldr	r2, [pc, #412]	@ (8008c68 <HAL_DMA_IRQHandler+0xa3c>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d009      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x8b8>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a65      	ldr	r2, [pc, #404]	@ (8008c6c <HAL_DMA_IRQHandler+0xa40>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d004      	beq.n	8008ae4 <HAL_DMA_IRQHandler+0x8b8>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a64      	ldr	r2, [pc, #400]	@ (8008c70 <HAL_DMA_IRQHandler+0xa44>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d108      	bne.n	8008af6 <HAL_DMA_IRQHandler+0x8ca>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f022 0201 	bic.w	r2, r2, #1
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	e007      	b.n	8008b06 <HAL_DMA_IRQHandler+0x8da>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f022 0201 	bic.w	r2, r2, #1
 8008b04:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	60fb      	str	r3, [r7, #12]
 8008b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d307      	bcc.n	8008b22 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1f2      	bne.n	8008b06 <HAL_DMA_IRQHandler+0x8da>
 8008b20:	e000      	b.n	8008b24 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008b22:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d004      	beq.n	8008b3c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2203      	movs	r2, #3
 8008b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008b3a:	e003      	b.n	8008b44 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f000 8272 	beq.w	800903a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	4798      	blx	r3
 8008b5e:	e26c      	b.n	800903a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a43      	ldr	r2, [pc, #268]	@ (8008c74 <HAL_DMA_IRQHandler+0xa48>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d022      	beq.n	8008bb0 <HAL_DMA_IRQHandler+0x984>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a42      	ldr	r2, [pc, #264]	@ (8008c78 <HAL_DMA_IRQHandler+0xa4c>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d01d      	beq.n	8008bb0 <HAL_DMA_IRQHandler+0x984>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a40      	ldr	r2, [pc, #256]	@ (8008c7c <HAL_DMA_IRQHandler+0xa50>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d018      	beq.n	8008bb0 <HAL_DMA_IRQHandler+0x984>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a3f      	ldr	r2, [pc, #252]	@ (8008c80 <HAL_DMA_IRQHandler+0xa54>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d013      	beq.n	8008bb0 <HAL_DMA_IRQHandler+0x984>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a3d      	ldr	r2, [pc, #244]	@ (8008c84 <HAL_DMA_IRQHandler+0xa58>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00e      	beq.n	8008bb0 <HAL_DMA_IRQHandler+0x984>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a3c      	ldr	r2, [pc, #240]	@ (8008c88 <HAL_DMA_IRQHandler+0xa5c>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d009      	beq.n	8008bb0 <HAL_DMA_IRQHandler+0x984>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a3a      	ldr	r2, [pc, #232]	@ (8008c8c <HAL_DMA_IRQHandler+0xa60>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d004      	beq.n	8008bb0 <HAL_DMA_IRQHandler+0x984>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a39      	ldr	r2, [pc, #228]	@ (8008c90 <HAL_DMA_IRQHandler+0xa64>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d101      	bne.n	8008bb4 <HAL_DMA_IRQHandler+0x988>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e000      	b.n	8008bb6 <HAL_DMA_IRQHandler+0x98a>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f000 823f 	beq.w	800903a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bc8:	f003 031f 	and.w	r3, r3, #31
 8008bcc:	2204      	movs	r2, #4
 8008bce:	409a      	lsls	r2, r3
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 80cd 	beq.w	8008d74 <HAL_DMA_IRQHandler+0xb48>
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f003 0304 	and.w	r3, r3, #4
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 80c7 	beq.w	8008d74 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bea:	f003 031f 	and.w	r3, r3, #31
 8008bee:	2204      	movs	r2, #4
 8008bf0:	409a      	lsls	r2, r3
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d049      	beq.n	8008c94 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d109      	bne.n	8008c1e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 8210 	beq.w	8009034 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c1c:	e20a      	b.n	8009034 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 8206 	beq.w	8009034 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c30:	e200      	b.n	8009034 <HAL_DMA_IRQHandler+0xe08>
 8008c32:	bf00      	nop
 8008c34:	40020010 	.word	0x40020010
 8008c38:	40020028 	.word	0x40020028
 8008c3c:	40020040 	.word	0x40020040
 8008c40:	40020058 	.word	0x40020058
 8008c44:	40020070 	.word	0x40020070
 8008c48:	40020088 	.word	0x40020088
 8008c4c:	400200a0 	.word	0x400200a0
 8008c50:	400200b8 	.word	0x400200b8
 8008c54:	40020410 	.word	0x40020410
 8008c58:	40020428 	.word	0x40020428
 8008c5c:	40020440 	.word	0x40020440
 8008c60:	40020458 	.word	0x40020458
 8008c64:	40020470 	.word	0x40020470
 8008c68:	40020488 	.word	0x40020488
 8008c6c:	400204a0 	.word	0x400204a0
 8008c70:	400204b8 	.word	0x400204b8
 8008c74:	58025408 	.word	0x58025408
 8008c78:	5802541c 	.word	0x5802541c
 8008c7c:	58025430 	.word	0x58025430
 8008c80:	58025444 	.word	0x58025444
 8008c84:	58025458 	.word	0x58025458
 8008c88:	5802546c 	.word	0x5802546c
 8008c8c:	58025480 	.word	0x58025480
 8008c90:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	f003 0320 	and.w	r3, r3, #32
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d160      	bne.n	8008d60 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a7f      	ldr	r2, [pc, #508]	@ (8008ea0 <HAL_DMA_IRQHandler+0xc74>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d04a      	beq.n	8008d3e <HAL_DMA_IRQHandler+0xb12>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a7d      	ldr	r2, [pc, #500]	@ (8008ea4 <HAL_DMA_IRQHandler+0xc78>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d045      	beq.n	8008d3e <HAL_DMA_IRQHandler+0xb12>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a7c      	ldr	r2, [pc, #496]	@ (8008ea8 <HAL_DMA_IRQHandler+0xc7c>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d040      	beq.n	8008d3e <HAL_DMA_IRQHandler+0xb12>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a7a      	ldr	r2, [pc, #488]	@ (8008eac <HAL_DMA_IRQHandler+0xc80>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d03b      	beq.n	8008d3e <HAL_DMA_IRQHandler+0xb12>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a79      	ldr	r2, [pc, #484]	@ (8008eb0 <HAL_DMA_IRQHandler+0xc84>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d036      	beq.n	8008d3e <HAL_DMA_IRQHandler+0xb12>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a77      	ldr	r2, [pc, #476]	@ (8008eb4 <HAL_DMA_IRQHandler+0xc88>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d031      	beq.n	8008d3e <HAL_DMA_IRQHandler+0xb12>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a76      	ldr	r2, [pc, #472]	@ (8008eb8 <HAL_DMA_IRQHandler+0xc8c>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d02c      	beq.n	8008d3e <HAL_DMA_IRQHandler+0xb12>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a74      	ldr	r2, [pc, #464]	@ (8008ebc <HAL_DMA_IRQHandler+0xc90>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d027      	beq.n	8008d3e <HAL_DMA_IRQHandler+0xb12>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a73      	ldr	r2, [pc, #460]	@ (8008ec0 <HAL_DMA_IRQHandler+0xc94>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d022      	beq.n	8008d3e <HAL_DMA_IRQHandler+0xb12>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a71      	ldr	r2, [pc, #452]	@ (8008ec4 <HAL_DMA_IRQHandler+0xc98>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d01d      	beq.n	8008d3e <HAL_DMA_IRQHandler+0xb12>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a70      	ldr	r2, [pc, #448]	@ (8008ec8 <HAL_DMA_IRQHandler+0xc9c>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d018      	beq.n	8008d3e <HAL_DMA_IRQHandler+0xb12>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a6e      	ldr	r2, [pc, #440]	@ (8008ecc <HAL_DMA_IRQHandler+0xca0>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d013      	beq.n	8008d3e <HAL_DMA_IRQHandler+0xb12>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a6d      	ldr	r2, [pc, #436]	@ (8008ed0 <HAL_DMA_IRQHandler+0xca4>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d00e      	beq.n	8008d3e <HAL_DMA_IRQHandler+0xb12>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a6b      	ldr	r2, [pc, #428]	@ (8008ed4 <HAL_DMA_IRQHandler+0xca8>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d009      	beq.n	8008d3e <HAL_DMA_IRQHandler+0xb12>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a6a      	ldr	r2, [pc, #424]	@ (8008ed8 <HAL_DMA_IRQHandler+0xcac>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d004      	beq.n	8008d3e <HAL_DMA_IRQHandler+0xb12>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a68      	ldr	r2, [pc, #416]	@ (8008edc <HAL_DMA_IRQHandler+0xcb0>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d108      	bne.n	8008d50 <HAL_DMA_IRQHandler+0xb24>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f022 0208 	bic.w	r2, r2, #8
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	e007      	b.n	8008d60 <HAL_DMA_IRQHandler+0xb34>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f022 0204 	bic.w	r2, r2, #4
 8008d5e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 8165 	beq.w	8009034 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d72:	e15f      	b.n	8009034 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d78:	f003 031f 	and.w	r3, r3, #31
 8008d7c:	2202      	movs	r2, #2
 8008d7e:	409a      	lsls	r2, r3
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	4013      	ands	r3, r2
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 80c5 	beq.w	8008f14 <HAL_DMA_IRQHandler+0xce8>
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	f003 0302 	and.w	r3, r3, #2
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f000 80bf 	beq.w	8008f14 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d9a:	f003 031f 	and.w	r3, r3, #31
 8008d9e:	2202      	movs	r2, #2
 8008da0:	409a      	lsls	r2, r3
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d018      	beq.n	8008de2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d109      	bne.n	8008dce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f000 813a 	beq.w	8009038 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008dcc:	e134      	b.n	8009038 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 8130 	beq.w	8009038 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008de0:	e12a      	b.n	8009038 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f003 0320 	and.w	r3, r3, #32
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f040 8089 	bne.w	8008f00 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a2b      	ldr	r2, [pc, #172]	@ (8008ea0 <HAL_DMA_IRQHandler+0xc74>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d04a      	beq.n	8008e8e <HAL_DMA_IRQHandler+0xc62>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a29      	ldr	r2, [pc, #164]	@ (8008ea4 <HAL_DMA_IRQHandler+0xc78>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d045      	beq.n	8008e8e <HAL_DMA_IRQHandler+0xc62>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a28      	ldr	r2, [pc, #160]	@ (8008ea8 <HAL_DMA_IRQHandler+0xc7c>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d040      	beq.n	8008e8e <HAL_DMA_IRQHandler+0xc62>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a26      	ldr	r2, [pc, #152]	@ (8008eac <HAL_DMA_IRQHandler+0xc80>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d03b      	beq.n	8008e8e <HAL_DMA_IRQHandler+0xc62>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a25      	ldr	r2, [pc, #148]	@ (8008eb0 <HAL_DMA_IRQHandler+0xc84>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d036      	beq.n	8008e8e <HAL_DMA_IRQHandler+0xc62>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a23      	ldr	r2, [pc, #140]	@ (8008eb4 <HAL_DMA_IRQHandler+0xc88>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d031      	beq.n	8008e8e <HAL_DMA_IRQHandler+0xc62>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a22      	ldr	r2, [pc, #136]	@ (8008eb8 <HAL_DMA_IRQHandler+0xc8c>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d02c      	beq.n	8008e8e <HAL_DMA_IRQHandler+0xc62>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a20      	ldr	r2, [pc, #128]	@ (8008ebc <HAL_DMA_IRQHandler+0xc90>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d027      	beq.n	8008e8e <HAL_DMA_IRQHandler+0xc62>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a1f      	ldr	r2, [pc, #124]	@ (8008ec0 <HAL_DMA_IRQHandler+0xc94>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d022      	beq.n	8008e8e <HAL_DMA_IRQHandler+0xc62>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ec4 <HAL_DMA_IRQHandler+0xc98>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d01d      	beq.n	8008e8e <HAL_DMA_IRQHandler+0xc62>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a1c      	ldr	r2, [pc, #112]	@ (8008ec8 <HAL_DMA_IRQHandler+0xc9c>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d018      	beq.n	8008e8e <HAL_DMA_IRQHandler+0xc62>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a1a      	ldr	r2, [pc, #104]	@ (8008ecc <HAL_DMA_IRQHandler+0xca0>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d013      	beq.n	8008e8e <HAL_DMA_IRQHandler+0xc62>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a19      	ldr	r2, [pc, #100]	@ (8008ed0 <HAL_DMA_IRQHandler+0xca4>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d00e      	beq.n	8008e8e <HAL_DMA_IRQHandler+0xc62>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a17      	ldr	r2, [pc, #92]	@ (8008ed4 <HAL_DMA_IRQHandler+0xca8>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d009      	beq.n	8008e8e <HAL_DMA_IRQHandler+0xc62>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a16      	ldr	r2, [pc, #88]	@ (8008ed8 <HAL_DMA_IRQHandler+0xcac>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d004      	beq.n	8008e8e <HAL_DMA_IRQHandler+0xc62>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a14      	ldr	r2, [pc, #80]	@ (8008edc <HAL_DMA_IRQHandler+0xcb0>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d128      	bne.n	8008ee0 <HAL_DMA_IRQHandler+0xcb4>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f022 0214 	bic.w	r2, r2, #20
 8008e9c:	601a      	str	r2, [r3, #0]
 8008e9e:	e027      	b.n	8008ef0 <HAL_DMA_IRQHandler+0xcc4>
 8008ea0:	40020010 	.word	0x40020010
 8008ea4:	40020028 	.word	0x40020028
 8008ea8:	40020040 	.word	0x40020040
 8008eac:	40020058 	.word	0x40020058
 8008eb0:	40020070 	.word	0x40020070
 8008eb4:	40020088 	.word	0x40020088
 8008eb8:	400200a0 	.word	0x400200a0
 8008ebc:	400200b8 	.word	0x400200b8
 8008ec0:	40020410 	.word	0x40020410
 8008ec4:	40020428 	.word	0x40020428
 8008ec8:	40020440 	.word	0x40020440
 8008ecc:	40020458 	.word	0x40020458
 8008ed0:	40020470 	.word	0x40020470
 8008ed4:	40020488 	.word	0x40020488
 8008ed8:	400204a0 	.word	0x400204a0
 8008edc:	400204b8 	.word	0x400204b8
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 020a 	bic.w	r2, r2, #10
 8008eee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f000 8097 	beq.w	8009038 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f12:	e091      	b.n	8009038 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f18:	f003 031f 	and.w	r3, r3, #31
 8008f1c:	2208      	movs	r2, #8
 8008f1e:	409a      	lsls	r2, r3
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	4013      	ands	r3, r2
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 8088 	beq.w	800903a <HAL_DMA_IRQHandler+0xe0e>
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f003 0308 	and.w	r3, r3, #8
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 8082 	beq.w	800903a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a41      	ldr	r2, [pc, #260]	@ (8009040 <HAL_DMA_IRQHandler+0xe14>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d04a      	beq.n	8008fd6 <HAL_DMA_IRQHandler+0xdaa>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a3f      	ldr	r2, [pc, #252]	@ (8009044 <HAL_DMA_IRQHandler+0xe18>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d045      	beq.n	8008fd6 <HAL_DMA_IRQHandler+0xdaa>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a3e      	ldr	r2, [pc, #248]	@ (8009048 <HAL_DMA_IRQHandler+0xe1c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d040      	beq.n	8008fd6 <HAL_DMA_IRQHandler+0xdaa>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a3c      	ldr	r2, [pc, #240]	@ (800904c <HAL_DMA_IRQHandler+0xe20>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d03b      	beq.n	8008fd6 <HAL_DMA_IRQHandler+0xdaa>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a3b      	ldr	r2, [pc, #236]	@ (8009050 <HAL_DMA_IRQHandler+0xe24>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d036      	beq.n	8008fd6 <HAL_DMA_IRQHandler+0xdaa>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a39      	ldr	r2, [pc, #228]	@ (8009054 <HAL_DMA_IRQHandler+0xe28>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d031      	beq.n	8008fd6 <HAL_DMA_IRQHandler+0xdaa>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a38      	ldr	r2, [pc, #224]	@ (8009058 <HAL_DMA_IRQHandler+0xe2c>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d02c      	beq.n	8008fd6 <HAL_DMA_IRQHandler+0xdaa>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a36      	ldr	r2, [pc, #216]	@ (800905c <HAL_DMA_IRQHandler+0xe30>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d027      	beq.n	8008fd6 <HAL_DMA_IRQHandler+0xdaa>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a35      	ldr	r2, [pc, #212]	@ (8009060 <HAL_DMA_IRQHandler+0xe34>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d022      	beq.n	8008fd6 <HAL_DMA_IRQHandler+0xdaa>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a33      	ldr	r2, [pc, #204]	@ (8009064 <HAL_DMA_IRQHandler+0xe38>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d01d      	beq.n	8008fd6 <HAL_DMA_IRQHandler+0xdaa>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a32      	ldr	r2, [pc, #200]	@ (8009068 <HAL_DMA_IRQHandler+0xe3c>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d018      	beq.n	8008fd6 <HAL_DMA_IRQHandler+0xdaa>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a30      	ldr	r2, [pc, #192]	@ (800906c <HAL_DMA_IRQHandler+0xe40>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d013      	beq.n	8008fd6 <HAL_DMA_IRQHandler+0xdaa>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a2f      	ldr	r2, [pc, #188]	@ (8009070 <HAL_DMA_IRQHandler+0xe44>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d00e      	beq.n	8008fd6 <HAL_DMA_IRQHandler+0xdaa>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8009074 <HAL_DMA_IRQHandler+0xe48>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d009      	beq.n	8008fd6 <HAL_DMA_IRQHandler+0xdaa>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a2c      	ldr	r2, [pc, #176]	@ (8009078 <HAL_DMA_IRQHandler+0xe4c>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d004      	beq.n	8008fd6 <HAL_DMA_IRQHandler+0xdaa>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800907c <HAL_DMA_IRQHandler+0xe50>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d108      	bne.n	8008fe8 <HAL_DMA_IRQHandler+0xdbc>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f022 021c 	bic.w	r2, r2, #28
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	e007      	b.n	8008ff8 <HAL_DMA_IRQHandler+0xdcc>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f022 020e 	bic.w	r2, r2, #14
 8008ff6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ffc:	f003 031f 	and.w	r3, r3, #31
 8009000:	2201      	movs	r2, #1
 8009002:	409a      	lsls	r2, r3
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009022:	2b00      	cmp	r3, #0
 8009024:	d009      	beq.n	800903a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	4798      	blx	r3
 800902e:	e004      	b.n	800903a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009030:	bf00      	nop
 8009032:	e002      	b.n	800903a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009034:	bf00      	nop
 8009036:	e000      	b.n	800903a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009038:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800903a:	3728      	adds	r7, #40	@ 0x28
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	40020010 	.word	0x40020010
 8009044:	40020028 	.word	0x40020028
 8009048:	40020040 	.word	0x40020040
 800904c:	40020058 	.word	0x40020058
 8009050:	40020070 	.word	0x40020070
 8009054:	40020088 	.word	0x40020088
 8009058:	400200a0 	.word	0x400200a0
 800905c:	400200b8 	.word	0x400200b8
 8009060:	40020410 	.word	0x40020410
 8009064:	40020428 	.word	0x40020428
 8009068:	40020440 	.word	0x40020440
 800906c:	40020458 	.word	0x40020458
 8009070:	40020470 	.word	0x40020470
 8009074:	40020488 	.word	0x40020488
 8009078:	400204a0 	.word	0x400204a0
 800907c:	400204b8 	.word	0x400204b8

08009080 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009080:	b480      	push	{r7}
 8009082:	b087      	sub	sp, #28
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009092:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009098:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a7f      	ldr	r2, [pc, #508]	@ (800929c <DMA_SetConfig+0x21c>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d072      	beq.n	800918a <DMA_SetConfig+0x10a>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a7d      	ldr	r2, [pc, #500]	@ (80092a0 <DMA_SetConfig+0x220>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d06d      	beq.n	800918a <DMA_SetConfig+0x10a>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a7c      	ldr	r2, [pc, #496]	@ (80092a4 <DMA_SetConfig+0x224>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d068      	beq.n	800918a <DMA_SetConfig+0x10a>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a7a      	ldr	r2, [pc, #488]	@ (80092a8 <DMA_SetConfig+0x228>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d063      	beq.n	800918a <DMA_SetConfig+0x10a>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a79      	ldr	r2, [pc, #484]	@ (80092ac <DMA_SetConfig+0x22c>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d05e      	beq.n	800918a <DMA_SetConfig+0x10a>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a77      	ldr	r2, [pc, #476]	@ (80092b0 <DMA_SetConfig+0x230>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d059      	beq.n	800918a <DMA_SetConfig+0x10a>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a76      	ldr	r2, [pc, #472]	@ (80092b4 <DMA_SetConfig+0x234>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d054      	beq.n	800918a <DMA_SetConfig+0x10a>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a74      	ldr	r2, [pc, #464]	@ (80092b8 <DMA_SetConfig+0x238>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d04f      	beq.n	800918a <DMA_SetConfig+0x10a>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a73      	ldr	r2, [pc, #460]	@ (80092bc <DMA_SetConfig+0x23c>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d04a      	beq.n	800918a <DMA_SetConfig+0x10a>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a71      	ldr	r2, [pc, #452]	@ (80092c0 <DMA_SetConfig+0x240>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d045      	beq.n	800918a <DMA_SetConfig+0x10a>
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a70      	ldr	r2, [pc, #448]	@ (80092c4 <DMA_SetConfig+0x244>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d040      	beq.n	800918a <DMA_SetConfig+0x10a>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a6e      	ldr	r2, [pc, #440]	@ (80092c8 <DMA_SetConfig+0x248>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d03b      	beq.n	800918a <DMA_SetConfig+0x10a>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a6d      	ldr	r2, [pc, #436]	@ (80092cc <DMA_SetConfig+0x24c>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d036      	beq.n	800918a <DMA_SetConfig+0x10a>
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a6b      	ldr	r2, [pc, #428]	@ (80092d0 <DMA_SetConfig+0x250>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d031      	beq.n	800918a <DMA_SetConfig+0x10a>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a6a      	ldr	r2, [pc, #424]	@ (80092d4 <DMA_SetConfig+0x254>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d02c      	beq.n	800918a <DMA_SetConfig+0x10a>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a68      	ldr	r2, [pc, #416]	@ (80092d8 <DMA_SetConfig+0x258>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d027      	beq.n	800918a <DMA_SetConfig+0x10a>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a67      	ldr	r2, [pc, #412]	@ (80092dc <DMA_SetConfig+0x25c>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d022      	beq.n	800918a <DMA_SetConfig+0x10a>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a65      	ldr	r2, [pc, #404]	@ (80092e0 <DMA_SetConfig+0x260>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d01d      	beq.n	800918a <DMA_SetConfig+0x10a>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a64      	ldr	r2, [pc, #400]	@ (80092e4 <DMA_SetConfig+0x264>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d018      	beq.n	800918a <DMA_SetConfig+0x10a>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a62      	ldr	r2, [pc, #392]	@ (80092e8 <DMA_SetConfig+0x268>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d013      	beq.n	800918a <DMA_SetConfig+0x10a>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a61      	ldr	r2, [pc, #388]	@ (80092ec <DMA_SetConfig+0x26c>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d00e      	beq.n	800918a <DMA_SetConfig+0x10a>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a5f      	ldr	r2, [pc, #380]	@ (80092f0 <DMA_SetConfig+0x270>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d009      	beq.n	800918a <DMA_SetConfig+0x10a>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a5e      	ldr	r2, [pc, #376]	@ (80092f4 <DMA_SetConfig+0x274>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d004      	beq.n	800918a <DMA_SetConfig+0x10a>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a5c      	ldr	r2, [pc, #368]	@ (80092f8 <DMA_SetConfig+0x278>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d101      	bne.n	800918e <DMA_SetConfig+0x10e>
 800918a:	2301      	movs	r3, #1
 800918c:	e000      	b.n	8009190 <DMA_SetConfig+0x110>
 800918e:	2300      	movs	r3, #0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00d      	beq.n	80091b0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800919c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d004      	beq.n	80091b0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80091ae:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a39      	ldr	r2, [pc, #228]	@ (800929c <DMA_SetConfig+0x21c>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d04a      	beq.n	8009250 <DMA_SetConfig+0x1d0>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a38      	ldr	r2, [pc, #224]	@ (80092a0 <DMA_SetConfig+0x220>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d045      	beq.n	8009250 <DMA_SetConfig+0x1d0>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a36      	ldr	r2, [pc, #216]	@ (80092a4 <DMA_SetConfig+0x224>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d040      	beq.n	8009250 <DMA_SetConfig+0x1d0>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a35      	ldr	r2, [pc, #212]	@ (80092a8 <DMA_SetConfig+0x228>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d03b      	beq.n	8009250 <DMA_SetConfig+0x1d0>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a33      	ldr	r2, [pc, #204]	@ (80092ac <DMA_SetConfig+0x22c>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d036      	beq.n	8009250 <DMA_SetConfig+0x1d0>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a32      	ldr	r2, [pc, #200]	@ (80092b0 <DMA_SetConfig+0x230>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d031      	beq.n	8009250 <DMA_SetConfig+0x1d0>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a30      	ldr	r2, [pc, #192]	@ (80092b4 <DMA_SetConfig+0x234>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d02c      	beq.n	8009250 <DMA_SetConfig+0x1d0>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a2f      	ldr	r2, [pc, #188]	@ (80092b8 <DMA_SetConfig+0x238>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d027      	beq.n	8009250 <DMA_SetConfig+0x1d0>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a2d      	ldr	r2, [pc, #180]	@ (80092bc <DMA_SetConfig+0x23c>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d022      	beq.n	8009250 <DMA_SetConfig+0x1d0>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a2c      	ldr	r2, [pc, #176]	@ (80092c0 <DMA_SetConfig+0x240>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d01d      	beq.n	8009250 <DMA_SetConfig+0x1d0>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a2a      	ldr	r2, [pc, #168]	@ (80092c4 <DMA_SetConfig+0x244>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d018      	beq.n	8009250 <DMA_SetConfig+0x1d0>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a29      	ldr	r2, [pc, #164]	@ (80092c8 <DMA_SetConfig+0x248>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d013      	beq.n	8009250 <DMA_SetConfig+0x1d0>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a27      	ldr	r2, [pc, #156]	@ (80092cc <DMA_SetConfig+0x24c>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d00e      	beq.n	8009250 <DMA_SetConfig+0x1d0>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a26      	ldr	r2, [pc, #152]	@ (80092d0 <DMA_SetConfig+0x250>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d009      	beq.n	8009250 <DMA_SetConfig+0x1d0>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a24      	ldr	r2, [pc, #144]	@ (80092d4 <DMA_SetConfig+0x254>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d004      	beq.n	8009250 <DMA_SetConfig+0x1d0>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a23      	ldr	r2, [pc, #140]	@ (80092d8 <DMA_SetConfig+0x258>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d101      	bne.n	8009254 <DMA_SetConfig+0x1d4>
 8009250:	2301      	movs	r3, #1
 8009252:	e000      	b.n	8009256 <DMA_SetConfig+0x1d6>
 8009254:	2300      	movs	r3, #0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d059      	beq.n	800930e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800925e:	f003 031f 	and.w	r3, r3, #31
 8009262:	223f      	movs	r2, #63	@ 0x3f
 8009264:	409a      	lsls	r2, r3
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009278:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	2b40      	cmp	r3, #64	@ 0x40
 8009288:	d138      	bne.n	80092fc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800929a:	e086      	b.n	80093aa <DMA_SetConfig+0x32a>
 800929c:	40020010 	.word	0x40020010
 80092a0:	40020028 	.word	0x40020028
 80092a4:	40020040 	.word	0x40020040
 80092a8:	40020058 	.word	0x40020058
 80092ac:	40020070 	.word	0x40020070
 80092b0:	40020088 	.word	0x40020088
 80092b4:	400200a0 	.word	0x400200a0
 80092b8:	400200b8 	.word	0x400200b8
 80092bc:	40020410 	.word	0x40020410
 80092c0:	40020428 	.word	0x40020428
 80092c4:	40020440 	.word	0x40020440
 80092c8:	40020458 	.word	0x40020458
 80092cc:	40020470 	.word	0x40020470
 80092d0:	40020488 	.word	0x40020488
 80092d4:	400204a0 	.word	0x400204a0
 80092d8:	400204b8 	.word	0x400204b8
 80092dc:	58025408 	.word	0x58025408
 80092e0:	5802541c 	.word	0x5802541c
 80092e4:	58025430 	.word	0x58025430
 80092e8:	58025444 	.word	0x58025444
 80092ec:	58025458 	.word	0x58025458
 80092f0:	5802546c 	.word	0x5802546c
 80092f4:	58025480 	.word	0x58025480
 80092f8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	60da      	str	r2, [r3, #12]
}
 800930c:	e04d      	b.n	80093aa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a29      	ldr	r2, [pc, #164]	@ (80093b8 <DMA_SetConfig+0x338>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d022      	beq.n	800935e <DMA_SetConfig+0x2de>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a27      	ldr	r2, [pc, #156]	@ (80093bc <DMA_SetConfig+0x33c>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d01d      	beq.n	800935e <DMA_SetConfig+0x2de>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a26      	ldr	r2, [pc, #152]	@ (80093c0 <DMA_SetConfig+0x340>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d018      	beq.n	800935e <DMA_SetConfig+0x2de>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a24      	ldr	r2, [pc, #144]	@ (80093c4 <DMA_SetConfig+0x344>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d013      	beq.n	800935e <DMA_SetConfig+0x2de>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a23      	ldr	r2, [pc, #140]	@ (80093c8 <DMA_SetConfig+0x348>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d00e      	beq.n	800935e <DMA_SetConfig+0x2de>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a21      	ldr	r2, [pc, #132]	@ (80093cc <DMA_SetConfig+0x34c>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d009      	beq.n	800935e <DMA_SetConfig+0x2de>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a20      	ldr	r2, [pc, #128]	@ (80093d0 <DMA_SetConfig+0x350>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d004      	beq.n	800935e <DMA_SetConfig+0x2de>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a1e      	ldr	r2, [pc, #120]	@ (80093d4 <DMA_SetConfig+0x354>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d101      	bne.n	8009362 <DMA_SetConfig+0x2e2>
 800935e:	2301      	movs	r3, #1
 8009360:	e000      	b.n	8009364 <DMA_SetConfig+0x2e4>
 8009362:	2300      	movs	r3, #0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d020      	beq.n	80093aa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800936c:	f003 031f 	and.w	r3, r3, #31
 8009370:	2201      	movs	r2, #1
 8009372:	409a      	lsls	r2, r3
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b40      	cmp	r3, #64	@ 0x40
 8009386:	d108      	bne.n	800939a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	60da      	str	r2, [r3, #12]
}
 8009398:	e007      	b.n	80093aa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	60da      	str	r2, [r3, #12]
}
 80093aa:	bf00      	nop
 80093ac:	371c      	adds	r7, #28
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	58025408 	.word	0x58025408
 80093bc:	5802541c 	.word	0x5802541c
 80093c0:	58025430 	.word	0x58025430
 80093c4:	58025444 	.word	0x58025444
 80093c8:	58025458 	.word	0x58025458
 80093cc:	5802546c 	.word	0x5802546c
 80093d0:	58025480 	.word	0x58025480
 80093d4:	58025494 	.word	0x58025494

080093d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a42      	ldr	r2, [pc, #264]	@ (80094f0 <DMA_CalcBaseAndBitshift+0x118>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d04a      	beq.n	8009480 <DMA_CalcBaseAndBitshift+0xa8>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a41      	ldr	r2, [pc, #260]	@ (80094f4 <DMA_CalcBaseAndBitshift+0x11c>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d045      	beq.n	8009480 <DMA_CalcBaseAndBitshift+0xa8>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a3f      	ldr	r2, [pc, #252]	@ (80094f8 <DMA_CalcBaseAndBitshift+0x120>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d040      	beq.n	8009480 <DMA_CalcBaseAndBitshift+0xa8>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a3e      	ldr	r2, [pc, #248]	@ (80094fc <DMA_CalcBaseAndBitshift+0x124>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d03b      	beq.n	8009480 <DMA_CalcBaseAndBitshift+0xa8>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a3c      	ldr	r2, [pc, #240]	@ (8009500 <DMA_CalcBaseAndBitshift+0x128>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d036      	beq.n	8009480 <DMA_CalcBaseAndBitshift+0xa8>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a3b      	ldr	r2, [pc, #236]	@ (8009504 <DMA_CalcBaseAndBitshift+0x12c>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d031      	beq.n	8009480 <DMA_CalcBaseAndBitshift+0xa8>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a39      	ldr	r2, [pc, #228]	@ (8009508 <DMA_CalcBaseAndBitshift+0x130>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d02c      	beq.n	8009480 <DMA_CalcBaseAndBitshift+0xa8>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a38      	ldr	r2, [pc, #224]	@ (800950c <DMA_CalcBaseAndBitshift+0x134>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d027      	beq.n	8009480 <DMA_CalcBaseAndBitshift+0xa8>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a36      	ldr	r2, [pc, #216]	@ (8009510 <DMA_CalcBaseAndBitshift+0x138>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d022      	beq.n	8009480 <DMA_CalcBaseAndBitshift+0xa8>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a35      	ldr	r2, [pc, #212]	@ (8009514 <DMA_CalcBaseAndBitshift+0x13c>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d01d      	beq.n	8009480 <DMA_CalcBaseAndBitshift+0xa8>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a33      	ldr	r2, [pc, #204]	@ (8009518 <DMA_CalcBaseAndBitshift+0x140>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d018      	beq.n	8009480 <DMA_CalcBaseAndBitshift+0xa8>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a32      	ldr	r2, [pc, #200]	@ (800951c <DMA_CalcBaseAndBitshift+0x144>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d013      	beq.n	8009480 <DMA_CalcBaseAndBitshift+0xa8>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a30      	ldr	r2, [pc, #192]	@ (8009520 <DMA_CalcBaseAndBitshift+0x148>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d00e      	beq.n	8009480 <DMA_CalcBaseAndBitshift+0xa8>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a2f      	ldr	r2, [pc, #188]	@ (8009524 <DMA_CalcBaseAndBitshift+0x14c>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d009      	beq.n	8009480 <DMA_CalcBaseAndBitshift+0xa8>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a2d      	ldr	r2, [pc, #180]	@ (8009528 <DMA_CalcBaseAndBitshift+0x150>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d004      	beq.n	8009480 <DMA_CalcBaseAndBitshift+0xa8>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a2c      	ldr	r2, [pc, #176]	@ (800952c <DMA_CalcBaseAndBitshift+0x154>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d101      	bne.n	8009484 <DMA_CalcBaseAndBitshift+0xac>
 8009480:	2301      	movs	r3, #1
 8009482:	e000      	b.n	8009486 <DMA_CalcBaseAndBitshift+0xae>
 8009484:	2300      	movs	r3, #0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d024      	beq.n	80094d4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	b2db      	uxtb	r3, r3
 8009490:	3b10      	subs	r3, #16
 8009492:	4a27      	ldr	r2, [pc, #156]	@ (8009530 <DMA_CalcBaseAndBitshift+0x158>)
 8009494:	fba2 2303 	umull	r2, r3, r2, r3
 8009498:	091b      	lsrs	r3, r3, #4
 800949a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f003 0307 	and.w	r3, r3, #7
 80094a2:	4a24      	ldr	r2, [pc, #144]	@ (8009534 <DMA_CalcBaseAndBitshift+0x15c>)
 80094a4:	5cd3      	ldrb	r3, [r2, r3]
 80094a6:	461a      	mov	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	d908      	bls.n	80094c4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	461a      	mov	r2, r3
 80094b8:	4b1f      	ldr	r3, [pc, #124]	@ (8009538 <DMA_CalcBaseAndBitshift+0x160>)
 80094ba:	4013      	ands	r3, r2
 80094bc:	1d1a      	adds	r2, r3, #4
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80094c2:	e00d      	b.n	80094e0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	461a      	mov	r2, r3
 80094ca:	4b1b      	ldr	r3, [pc, #108]	@ (8009538 <DMA_CalcBaseAndBitshift+0x160>)
 80094cc:	4013      	ands	r3, r2
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80094d2:	e005      	b.n	80094e0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	40020010 	.word	0x40020010
 80094f4:	40020028 	.word	0x40020028
 80094f8:	40020040 	.word	0x40020040
 80094fc:	40020058 	.word	0x40020058
 8009500:	40020070 	.word	0x40020070
 8009504:	40020088 	.word	0x40020088
 8009508:	400200a0 	.word	0x400200a0
 800950c:	400200b8 	.word	0x400200b8
 8009510:	40020410 	.word	0x40020410
 8009514:	40020428 	.word	0x40020428
 8009518:	40020440 	.word	0x40020440
 800951c:	40020458 	.word	0x40020458
 8009520:	40020470 	.word	0x40020470
 8009524:	40020488 	.word	0x40020488
 8009528:	400204a0 	.word	0x400204a0
 800952c:	400204b8 	.word	0x400204b8
 8009530:	aaaaaaab 	.word	0xaaaaaaab
 8009534:	08014328 	.word	0x08014328
 8009538:	fffffc00 	.word	0xfffffc00

0800953c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d120      	bne.n	8009592 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009554:	2b03      	cmp	r3, #3
 8009556:	d858      	bhi.n	800960a <DMA_CheckFifoParam+0xce>
 8009558:	a201      	add	r2, pc, #4	@ (adr r2, 8009560 <DMA_CheckFifoParam+0x24>)
 800955a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955e:	bf00      	nop
 8009560:	08009571 	.word	0x08009571
 8009564:	08009583 	.word	0x08009583
 8009568:	08009571 	.word	0x08009571
 800956c:	0800960b 	.word	0x0800960b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009574:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d048      	beq.n	800960e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009580:	e045      	b.n	800960e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009586:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800958a:	d142      	bne.n	8009612 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009590:	e03f      	b.n	8009612 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800959a:	d123      	bne.n	80095e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a0:	2b03      	cmp	r3, #3
 80095a2:	d838      	bhi.n	8009616 <DMA_CheckFifoParam+0xda>
 80095a4:	a201      	add	r2, pc, #4	@ (adr r2, 80095ac <DMA_CheckFifoParam+0x70>)
 80095a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095aa:	bf00      	nop
 80095ac:	080095bd 	.word	0x080095bd
 80095b0:	080095c3 	.word	0x080095c3
 80095b4:	080095bd 	.word	0x080095bd
 80095b8:	080095d5 	.word	0x080095d5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	73fb      	strb	r3, [r7, #15]
        break;
 80095c0:	e030      	b.n	8009624 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d025      	beq.n	800961a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80095d2:	e022      	b.n	800961a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80095dc:	d11f      	bne.n	800961e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80095e2:	e01c      	b.n	800961e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d902      	bls.n	80095f2 <DMA_CheckFifoParam+0xb6>
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d003      	beq.n	80095f8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80095f0:	e018      	b.n	8009624 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	73fb      	strb	r3, [r7, #15]
        break;
 80095f6:	e015      	b.n	8009624 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00e      	beq.n	8009622 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	73fb      	strb	r3, [r7, #15]
    break;
 8009608:	e00b      	b.n	8009622 <DMA_CheckFifoParam+0xe6>
        break;
 800960a:	bf00      	nop
 800960c:	e00a      	b.n	8009624 <DMA_CheckFifoParam+0xe8>
        break;
 800960e:	bf00      	nop
 8009610:	e008      	b.n	8009624 <DMA_CheckFifoParam+0xe8>
        break;
 8009612:	bf00      	nop
 8009614:	e006      	b.n	8009624 <DMA_CheckFifoParam+0xe8>
        break;
 8009616:	bf00      	nop
 8009618:	e004      	b.n	8009624 <DMA_CheckFifoParam+0xe8>
        break;
 800961a:	bf00      	nop
 800961c:	e002      	b.n	8009624 <DMA_CheckFifoParam+0xe8>
        break;
 800961e:	bf00      	nop
 8009620:	e000      	b.n	8009624 <DMA_CheckFifoParam+0xe8>
    break;
 8009622:	bf00      	nop
    }
  }

  return status;
 8009624:	7bfb      	ldrb	r3, [r7, #15]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop

08009634 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a38      	ldr	r2, [pc, #224]	@ (8009728 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d022      	beq.n	8009692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a36      	ldr	r2, [pc, #216]	@ (800972c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d01d      	beq.n	8009692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a35      	ldr	r2, [pc, #212]	@ (8009730 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d018      	beq.n	8009692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a33      	ldr	r2, [pc, #204]	@ (8009734 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d013      	beq.n	8009692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a32      	ldr	r2, [pc, #200]	@ (8009738 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d00e      	beq.n	8009692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a30      	ldr	r2, [pc, #192]	@ (800973c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d009      	beq.n	8009692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a2f      	ldr	r2, [pc, #188]	@ (8009740 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d004      	beq.n	8009692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a2d      	ldr	r2, [pc, #180]	@ (8009744 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d101      	bne.n	8009696 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009692:	2301      	movs	r3, #1
 8009694:	e000      	b.n	8009698 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009696:	2300      	movs	r3, #0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d01a      	beq.n	80096d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	3b08      	subs	r3, #8
 80096a4:	4a28      	ldr	r2, [pc, #160]	@ (8009748 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80096a6:	fba2 2303 	umull	r2, r3, r2, r3
 80096aa:	091b      	lsrs	r3, r3, #4
 80096ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	4b26      	ldr	r3, [pc, #152]	@ (800974c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	461a      	mov	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a24      	ldr	r2, [pc, #144]	@ (8009750 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80096c0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f003 031f 	and.w	r3, r3, #31
 80096c8:	2201      	movs	r2, #1
 80096ca:	409a      	lsls	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80096d0:	e024      	b.n	800971c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	3b10      	subs	r3, #16
 80096da:	4a1e      	ldr	r2, [pc, #120]	@ (8009754 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80096dc:	fba2 2303 	umull	r2, r3, r2, r3
 80096e0:	091b      	lsrs	r3, r3, #4
 80096e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	4a1c      	ldr	r2, [pc, #112]	@ (8009758 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d806      	bhi.n	80096fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	4a1b      	ldr	r2, [pc, #108]	@ (800975c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d902      	bls.n	80096fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	3308      	adds	r3, #8
 80096f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80096fa:	68fa      	ldr	r2, [r7, #12]
 80096fc:	4b18      	ldr	r3, [pc, #96]	@ (8009760 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80096fe:	4413      	add	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	461a      	mov	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a16      	ldr	r2, [pc, #88]	@ (8009764 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800970c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f003 031f 	and.w	r3, r3, #31
 8009714:	2201      	movs	r2, #1
 8009716:	409a      	lsls	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800971c:	bf00      	nop
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	58025408 	.word	0x58025408
 800972c:	5802541c 	.word	0x5802541c
 8009730:	58025430 	.word	0x58025430
 8009734:	58025444 	.word	0x58025444
 8009738:	58025458 	.word	0x58025458
 800973c:	5802546c 	.word	0x5802546c
 8009740:	58025480 	.word	0x58025480
 8009744:	58025494 	.word	0x58025494
 8009748:	cccccccd 	.word	0xcccccccd
 800974c:	16009600 	.word	0x16009600
 8009750:	58025880 	.word	0x58025880
 8009754:	aaaaaaab 	.word	0xaaaaaaab
 8009758:	400204b8 	.word	0x400204b8
 800975c:	4002040f 	.word	0x4002040f
 8009760:	10008200 	.word	0x10008200
 8009764:	40020880 	.word	0x40020880

08009768 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	b2db      	uxtb	r3, r3
 8009776:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d04a      	beq.n	8009814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2b08      	cmp	r3, #8
 8009782:	d847      	bhi.n	8009814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a25      	ldr	r2, [pc, #148]	@ (8009820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d022      	beq.n	80097d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a24      	ldr	r2, [pc, #144]	@ (8009824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d01d      	beq.n	80097d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a22      	ldr	r2, [pc, #136]	@ (8009828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d018      	beq.n	80097d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a21      	ldr	r2, [pc, #132]	@ (800982c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d013      	beq.n	80097d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a1f      	ldr	r2, [pc, #124]	@ (8009830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d00e      	beq.n	80097d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d009      	beq.n	80097d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a1c      	ldr	r2, [pc, #112]	@ (8009838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d004      	beq.n	80097d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a1b      	ldr	r2, [pc, #108]	@ (800983c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d101      	bne.n	80097d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80097d4:	2301      	movs	r3, #1
 80097d6:	e000      	b.n	80097da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80097d8:	2300      	movs	r3, #0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00a      	beq.n	80097f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	4b17      	ldr	r3, [pc, #92]	@ (8009840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80097e2:	4413      	add	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	461a      	mov	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a15      	ldr	r2, [pc, #84]	@ (8009844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80097f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80097f2:	e009      	b.n	8009808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	4b14      	ldr	r3, [pc, #80]	@ (8009848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80097f8:	4413      	add	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	461a      	mov	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a11      	ldr	r2, [pc, #68]	@ (800984c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009806:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3b01      	subs	r3, #1
 800980c:	2201      	movs	r2, #1
 800980e:	409a      	lsls	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009814:	bf00      	nop
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	58025408 	.word	0x58025408
 8009824:	5802541c 	.word	0x5802541c
 8009828:	58025430 	.word	0x58025430
 800982c:	58025444 	.word	0x58025444
 8009830:	58025458 	.word	0x58025458
 8009834:	5802546c 	.word	0x5802546c
 8009838:	58025480 	.word	0x58025480
 800983c:	58025494 	.word	0x58025494
 8009840:	1600963f 	.word	0x1600963f
 8009844:	58025940 	.word	0x58025940
 8009848:	1000823f 	.word	0x1000823f
 800984c:	40020940 	.word	0x40020940

08009850 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d101      	bne.n	8009862 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e0cf      	b.n	8009a02 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009868:	2b00      	cmp	r3, #0
 800986a:	d106      	bne.n	800987a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2223      	movs	r2, #35	@ 0x23
 8009870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7fa f839 	bl	80038ec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800987a:	4b64      	ldr	r3, [pc, #400]	@ (8009a0c <HAL_ETH_Init+0x1bc>)
 800987c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009880:	4a62      	ldr	r2, [pc, #392]	@ (8009a0c <HAL_ETH_Init+0x1bc>)
 8009882:	f043 0302 	orr.w	r3, r3, #2
 8009886:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800988a:	4b60      	ldr	r3, [pc, #384]	@ (8009a0c <HAL_ETH_Init+0x1bc>)
 800988c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009890:	f003 0302 	and.w	r3, r3, #2
 8009894:	60bb      	str	r3, [r7, #8]
 8009896:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	7a1b      	ldrb	r3, [r3, #8]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d103      	bne.n	80098a8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80098a0:	2000      	movs	r0, #0
 80098a2:	f7fa fd85 	bl	80043b0 <HAL_SYSCFG_ETHInterfaceSelect>
 80098a6:	e003      	b.n	80098b0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80098a8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80098ac:	f7fa fd80 	bl	80043b0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80098b0:	4b57      	ldr	r3, [pc, #348]	@ (8009a10 <HAL_ETH_Init+0x1c0>)
 80098b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	6812      	ldr	r2, [r2, #0]
 80098c2:	f043 0301 	orr.w	r3, r3, #1
 80098c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80098ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80098cc:	f7fa fd40 	bl	8004350 <HAL_GetTick>
 80098d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80098d2:	e011      	b.n	80098f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80098d4:	f7fa fd3c 	bl	8004350 <HAL_GetTick>
 80098d8:	4602      	mov	r2, r0
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80098e2:	d909      	bls.n	80098f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2204      	movs	r2, #4
 80098e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	22e0      	movs	r2, #224	@ 0xe0
 80098f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e084      	b.n	8009a02 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 0301 	and.w	r3, r3, #1
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1e4      	bne.n	80098d4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f886 	bl	8009a1c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8009910:	f001 fed8 	bl	800b6c4 <HAL_RCC_GetHCLKFreq>
 8009914:	4603      	mov	r3, r0
 8009916:	4a3f      	ldr	r2, [pc, #252]	@ (8009a14 <HAL_ETH_Init+0x1c4>)
 8009918:	fba2 2303 	umull	r2, r3, r2, r3
 800991c:	0c9a      	lsrs	r2, r3, #18
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3a01      	subs	r2, #1
 8009924:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fa71 	bl	8009e10 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009936:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800993a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	6812      	ldr	r2, [r2, #0]
 8009942:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009946:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800994a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	f003 0303 	and.w	r3, r3, #3
 8009956:	2b00      	cmp	r3, #0
 8009958:	d009      	beq.n	800996e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2201      	movs	r2, #1
 800995e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	22e0      	movs	r2, #224	@ 0xe0
 8009966:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	e049      	b.n	8009a02 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009976:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800997a:	4b27      	ldr	r3, [pc, #156]	@ (8009a18 <HAL_ETH_Init+0x1c8>)
 800997c:	4013      	ands	r3, r2
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	6952      	ldr	r2, [r2, #20]
 8009982:	0051      	lsls	r1, r2, #1
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	6812      	ldr	r2, [r2, #0]
 8009988:	430b      	orrs	r3, r1
 800998a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800998e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fad9 	bl	8009f4a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fb1f 	bl	8009fdc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	3305      	adds	r3, #5
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	021a      	lsls	r2, r3, #8
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	3304      	adds	r3, #4
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	4619      	mov	r1, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	430a      	orrs	r2, r1
 80099b8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	3303      	adds	r3, #3
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	061a      	lsls	r2, r3, #24
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	3302      	adds	r3, #2
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	041b      	lsls	r3, r3, #16
 80099d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	3301      	adds	r3, #1
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80099dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80099ea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80099ec:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2210      	movs	r2, #16
 80099fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	58024400 	.word	0x58024400
 8009a10:	58000400 	.word	0x58000400
 8009a14:	431bde83 	.word	0x431bde83
 8009a18:	ffff8001 	.word	0xffff8001

08009a1c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009a2c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009a34:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009a36:	f001 fe45 	bl	800b6c4 <HAL_RCC_GetHCLKFreq>
 8009a3a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8009ab8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d908      	bls.n	8009a56 <HAL_ETH_SetMDIOClockRange+0x3a>
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	4a1d      	ldr	r2, [pc, #116]	@ (8009abc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d804      	bhi.n	8009a56 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	e027      	b.n	8009aa6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	4a18      	ldr	r2, [pc, #96]	@ (8009abc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d908      	bls.n	8009a70 <HAL_ETH_SetMDIOClockRange+0x54>
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	4a17      	ldr	r2, [pc, #92]	@ (8009ac0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d204      	bcs.n	8009a70 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009a6c:	60fb      	str	r3, [r7, #12]
 8009a6e:	e01a      	b.n	8009aa6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	4a13      	ldr	r2, [pc, #76]	@ (8009ac0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d303      	bcc.n	8009a80 <HAL_ETH_SetMDIOClockRange+0x64>
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	4a12      	ldr	r2, [pc, #72]	@ (8009ac4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d911      	bls.n	8009aa4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	4a10      	ldr	r2, [pc, #64]	@ (8009ac4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d908      	bls.n	8009a9a <HAL_ETH_SetMDIOClockRange+0x7e>
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8009ac8 <HAL_ETH_SetMDIOClockRange+0xac>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d804      	bhi.n	8009a9a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a96:	60fb      	str	r3, [r7, #12]
 8009a98:	e005      	b.n	8009aa6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009aa0:	60fb      	str	r3, [r7, #12]
 8009aa2:	e000      	b.n	8009aa6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8009aa4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8009ab0:	bf00      	nop
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	01312cff 	.word	0x01312cff
 8009abc:	02160ebf 	.word	0x02160ebf
 8009ac0:	03938700 	.word	0x03938700
 8009ac4:	05f5e0ff 	.word	0x05f5e0ff
 8009ac8:	08f0d17f 	.word	0x08f0d17f

08009acc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8009ade:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	791b      	ldrb	r3, [r3, #4]
 8009ae4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8009ae6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	7b1b      	ldrb	r3, [r3, #12]
 8009aec:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009aee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	7b5b      	ldrb	r3, [r3, #13]
 8009af4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009af6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	7b9b      	ldrb	r3, [r3, #14]
 8009afc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009afe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	7bdb      	ldrb	r3, [r3, #15]
 8009b04:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009b06:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009b08:	683a      	ldr	r2, [r7, #0]
 8009b0a:	7c12      	ldrb	r2, [r2, #16]
 8009b0c:	2a00      	cmp	r2, #0
 8009b0e:	d102      	bne.n	8009b16 <ETH_SetMACConfig+0x4a>
 8009b10:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8009b14:	e000      	b.n	8009b18 <ETH_SetMACConfig+0x4c>
 8009b16:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009b18:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	7c52      	ldrb	r2, [r2, #17]
 8009b1e:	2a00      	cmp	r2, #0
 8009b20:	d102      	bne.n	8009b28 <ETH_SetMACConfig+0x5c>
 8009b22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009b26:	e000      	b.n	8009b2a <ETH_SetMACConfig+0x5e>
 8009b28:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009b2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	7c9b      	ldrb	r3, [r3, #18]
 8009b30:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009b32:	431a      	orrs	r2, r3
               macconf->Speed |
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8009b38:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8009b3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	7f1b      	ldrb	r3, [r3, #28]
 8009b44:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8009b46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	7f5b      	ldrb	r3, [r3, #29]
 8009b4c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009b4e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009b50:	683a      	ldr	r2, [r7, #0]
 8009b52:	7f92      	ldrb	r2, [r2, #30]
 8009b54:	2a00      	cmp	r2, #0
 8009b56:	d102      	bne.n	8009b5e <ETH_SetMACConfig+0x92>
 8009b58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009b5c:	e000      	b.n	8009b60 <ETH_SetMACConfig+0x94>
 8009b5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009b60:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	7fdb      	ldrb	r3, [r3, #31]
 8009b66:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009b68:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009b6a:	683a      	ldr	r2, [r7, #0]
 8009b6c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009b70:	2a00      	cmp	r2, #0
 8009b72:	d102      	bne.n	8009b7a <ETH_SetMACConfig+0xae>
 8009b74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b78:	e000      	b.n	8009b7c <ETH_SetMACConfig+0xb0>
 8009b7a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009b7c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009b82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b8a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8009b8c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8009b92:	4313      	orrs	r3, r2
 8009b94:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	4b56      	ldr	r3, [pc, #344]	@ (8009cf8 <ETH_SetMACConfig+0x22c>)
 8009b9e:	4013      	ands	r3, r2
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	6812      	ldr	r2, [r2, #0]
 8009ba4:	68f9      	ldr	r1, [r7, #12]
 8009ba6:	430b      	orrs	r3, r1
 8009ba8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bae:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009bb6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009bb8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009bc0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009bc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009bca:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009bcc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8009bce:	683a      	ldr	r2, [r7, #0]
 8009bd0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8009bd4:	2a00      	cmp	r2, #0
 8009bd6:	d102      	bne.n	8009bde <ETH_SetMACConfig+0x112>
 8009bd8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009bdc:	e000      	b.n	8009be0 <ETH_SetMACConfig+0x114>
 8009bde:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009be0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009be6:	4313      	orrs	r3, r2
 8009be8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	4b42      	ldr	r3, [pc, #264]	@ (8009cfc <ETH_SetMACConfig+0x230>)
 8009bf2:	4013      	ands	r3, r2
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	6812      	ldr	r2, [r2, #0]
 8009bf8:	68f9      	ldr	r1, [r7, #12]
 8009bfa:	430b      	orrs	r3, r1
 8009bfc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c04:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68da      	ldr	r2, [r3, #12]
 8009c14:	4b3a      	ldr	r3, [pc, #232]	@ (8009d00 <ETH_SetMACConfig+0x234>)
 8009c16:	4013      	ands	r3, r2
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	6812      	ldr	r2, [r2, #0]
 8009c1c:	68f9      	ldr	r1, [r7, #12]
 8009c1e:	430b      	orrs	r3, r1
 8009c20:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009c28:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009c2e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8009c30:	683a      	ldr	r2, [r7, #0]
 8009c32:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8009c36:	2a00      	cmp	r2, #0
 8009c38:	d101      	bne.n	8009c3e <ETH_SetMACConfig+0x172>
 8009c3a:	2280      	movs	r2, #128	@ 0x80
 8009c3c:	e000      	b.n	8009c40 <ETH_SetMACConfig+0x174>
 8009c3e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8009c40:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c46:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009c52:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8009c56:	4013      	ands	r3, r2
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	6812      	ldr	r2, [r2, #0]
 8009c5c:	68f9      	ldr	r1, [r7, #12]
 8009c5e:	430b      	orrs	r3, r1
 8009c60:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009c68:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8009c70:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009c72:	4313      	orrs	r3, r2
 8009c74:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c7e:	f023 0103 	bic.w	r1, r3, #3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8009c96:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8009cb2:	2a00      	cmp	r2, #0
 8009cb4:	d101      	bne.n	8009cba <ETH_SetMACConfig+0x1ee>
 8009cb6:	2240      	movs	r2, #64	@ 0x40
 8009cb8:	e000      	b.n	8009cbc <ETH_SetMACConfig+0x1f0>
 8009cba:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8009cbc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8009cc4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009cc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8009cce:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8009cdc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8009cec:	bf00      	nop
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	00048083 	.word	0x00048083
 8009cfc:	c0f88000 	.word	0xc0f88000
 8009d00:	fffffef0 	.word	0xfffffef0

08009d04 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	4b38      	ldr	r3, [pc, #224]	@ (8009dfc <ETH_SetDMAConfig+0xf8>)
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	683a      	ldr	r2, [r7, #0]
 8009d1e:	6811      	ldr	r1, [r2, #0]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	6812      	ldr	r2, [r2, #0]
 8009d24:	430b      	orrs	r3, r1
 8009d26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009d2a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	791b      	ldrb	r3, [r3, #4]
 8009d30:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009d36:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	7b1b      	ldrb	r3, [r3, #12]
 8009d3c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8009e00 <ETH_SetDMAConfig+0xfc>)
 8009d4e:	4013      	ands	r3, r2
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	6812      	ldr	r2, [r2, #0]
 8009d54:	68f9      	ldr	r1, [r7, #12]
 8009d56:	430b      	orrs	r3, r1
 8009d58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009d5c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	7b5b      	ldrb	r3, [r3, #13]
 8009d62:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d74:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8009d78:	4b22      	ldr	r3, [pc, #136]	@ (8009e04 <ETH_SetDMAConfig+0x100>)
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	6812      	ldr	r2, [r2, #0]
 8009d80:	68f9      	ldr	r1, [r7, #12]
 8009d82:	430b      	orrs	r3, r1
 8009d84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009d88:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	7d1b      	ldrb	r3, [r3, #20]
 8009d94:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8009d96:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	7f5b      	ldrb	r3, [r3, #29]
 8009d9c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009daa:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8009dae:	4b16      	ldr	r3, [pc, #88]	@ (8009e08 <ETH_SetDMAConfig+0x104>)
 8009db0:	4013      	ands	r3, r2
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	6812      	ldr	r2, [r2, #0]
 8009db6:	68f9      	ldr	r1, [r7, #12]
 8009db8:	430b      	orrs	r3, r1
 8009dba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009dbe:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	7f1b      	ldrb	r3, [r3, #28]
 8009dc6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009dd8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8009e0c <ETH_SetDMAConfig+0x108>)
 8009dde:	4013      	ands	r3, r2
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	6812      	ldr	r2, [r2, #0]
 8009de4:	68f9      	ldr	r1, [r7, #12]
 8009de6:	430b      	orrs	r3, r1
 8009de8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009dec:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8009df0:	bf00      	nop
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	ffff87fd 	.word	0xffff87fd
 8009e00:	ffff2ffe 	.word	0xffff2ffe
 8009e04:	fffec000 	.word	0xfffec000
 8009e08:	ffc0efef 	.word	0xffc0efef
 8009e0c:	7fc0ffff 	.word	0x7fc0ffff

08009e10 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b0a4      	sub	sp, #144	@ 0x90
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8009e22:	2300      	movs	r3, #0
 8009e24:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8009e34:	2301      	movs	r3, #1
 8009e36:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8009e40:	2300      	movs	r3, #0
 8009e42:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8009e46:	2301      	movs	r3, #1
 8009e48:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009e4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009e50:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8009e52:	2300      	movs	r3, #0
 8009e54:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8009e62:	2300      	movs	r3, #0
 8009e64:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8009e68:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8009e6c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8009e74:	2300      	movs	r3, #0
 8009e76:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8009e84:	2300      	movs	r3, #0
 8009e86:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8009e92:	2300      	movs	r3, #0
 8009e94:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8009e96:	2300      	movs	r3, #0
 8009e98:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8009ea8:	2320      	movs	r3, #32
 8009eaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8009eba:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8009ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8009ec0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009ec4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8009ecc:	2302      	movs	r3, #2
 8009ece:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8009eea:	2300      	movs	r3, #0
 8009eec:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8009ef4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7ff fde6 	bl	8009acc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8009f00:	2301      	movs	r3, #1
 8009f02:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8009f04:	2301      	movs	r3, #1
 8009f06:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8009f12:	2300      	movs	r3, #0
 8009f14:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8009f16:	2300      	movs	r3, #0
 8009f18:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8009f1a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009f1e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8009f20:	2300      	movs	r3, #0
 8009f22:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009f24:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009f28:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8009f30:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8009f34:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8009f36:	f107 0308 	add.w	r3, r7, #8
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f7ff fee1 	bl	8009d04 <ETH_SetDMAConfig>
}
 8009f42:	bf00      	nop
 8009f44:	3790      	adds	r7, #144	@ 0x90
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b085      	sub	sp, #20
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009f52:	2300      	movs	r3, #0
 8009f54:	60fb      	str	r3, [r7, #12]
 8009f56:	e01d      	b.n	8009f94 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	68d9      	ldr	r1, [r3, #12]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	005b      	lsls	r3, r3, #1
 8009f62:	4413      	add	r3, r2
 8009f64:	00db      	lsls	r3, r3, #3
 8009f66:	440b      	add	r3, r1
 8009f68:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	2200      	movs	r2, #0
 8009f74:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8009f82:	68b9      	ldr	r1, [r7, #8]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	3206      	adds	r2, #6
 8009f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3301      	adds	r3, #1
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	d9de      	bls.n	8009f58 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fa8:	461a      	mov	r2, r3
 8009faa:	2303      	movs	r3, #3
 8009fac:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	68da      	ldr	r2, [r3, #12]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fbc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	68da      	ldr	r2, [r3, #12]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fcc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8009fd0:	bf00      	nop
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	60fb      	str	r3, [r7, #12]
 8009fe8:	e023      	b.n	800a032 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6919      	ldr	r1, [r3, #16]
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	005b      	lsls	r3, r3, #1
 8009ff4:	4413      	add	r3, r2
 8009ff6:	00db      	lsls	r3, r3, #3
 8009ff8:	440b      	add	r3, r1
 8009ffa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	2200      	movs	r2, #0
 800a000:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	2200      	movs	r2, #0
 800a006:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	2200      	movs	r2, #0
 800a00c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2200      	movs	r2, #0
 800a012:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2200      	movs	r2, #0
 800a018:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	2200      	movs	r2, #0
 800a01e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800a020:	68b9      	ldr	r1, [r7, #8]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	3212      	adds	r2, #18
 800a028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	3301      	adds	r3, #1
 800a030:	60fb      	str	r3, [r7, #12]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2b03      	cmp	r3, #3
 800a036:	d9d8      	bls.n	8009fea <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a05e:	461a      	mov	r2, r3
 800a060:	2303      	movs	r3, #3
 800a062:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	691a      	ldr	r2, [r3, #16]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a072:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a086:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800a08a:	bf00      	nop
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
	...

0800a098 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b08a      	sub	sp, #40	@ 0x28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800a0ac:	2308      	movs	r3, #8
 800a0ae:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a0b0:	4b2e      	ldr	r3, [pc, #184]	@ (800a16c <HAL_FLASH_Program+0xd4>)
 800a0b2:	7d1b      	ldrb	r3, [r3, #20]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d101      	bne.n	800a0bc <HAL_FLASH_Program+0x24>
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	e053      	b.n	800a164 <HAL_FLASH_Program+0xcc>
 800a0bc:	4b2b      	ldr	r3, [pc, #172]	@ (800a16c <HAL_FLASH_Program+0xd4>)
 800a0be:	2201      	movs	r2, #1
 800a0c0:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0c8:	d315      	bcc.n	800a0f6 <HAL_FLASH_Program+0x5e>
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 800a0d0:	d211      	bcs.n	800a0f6 <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a0d6:	4b25      	ldr	r3, [pc, #148]	@ (800a16c <HAL_FLASH_Program+0xd4>)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a0dc:	6979      	ldr	r1, [r7, #20]
 800a0de:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a0e2:	f000 f88d 	bl	800a200 <FLASH_WaitForLastOperation>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 800a0ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <HAL_FLASH_Program+0x62>
 800a0f4:	e031      	b.n	800a15a <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e034      	b.n	800a164 <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800a0fa:	4b1d      	ldr	r3, [pc, #116]	@ (800a170 <HAL_FLASH_Program+0xd8>)
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	4a1c      	ldr	r2, [pc, #112]	@ (800a170 <HAL_FLASH_Program+0xd8>)
 800a100:	f043 0302 	orr.w	r3, r3, #2
 800a104:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 800a106:	f3bf 8f6f 	isb	sy
}
 800a10a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a10c:	f3bf 8f4f 	dsb	sy
}
 800a110:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800a11a:	6a3b      	ldr	r3, [r7, #32]
 800a11c:	3304      	adds	r3, #4
 800a11e:	623b      	str	r3, [r7, #32]
        src_addr++;
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	3304      	adds	r3, #4
 800a124:	61fb      	str	r3, [r7, #28]
        row_index--;
 800a126:	7efb      	ldrb	r3, [r7, #27]
 800a128:	3b01      	subs	r3, #1
 800a12a:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 800a12c:	7efb      	ldrb	r3, [r7, #27]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1ef      	bne.n	800a112 <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 800a132:	f3bf 8f6f 	isb	sy
}
 800a136:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a138:	f3bf 8f4f 	dsb	sy
}
 800a13c:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a13e:	6979      	ldr	r1, [r7, #20]
 800a140:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a144:	f000 f85c 	bl	800a200 <FLASH_WaitForLastOperation>
 800a148:	4603      	mov	r3, r0
 800a14a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800a14e:	4b08      	ldr	r3, [pc, #32]	@ (800a170 <HAL_FLASH_Program+0xd8>)
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	4a07      	ldr	r2, [pc, #28]	@ (800a170 <HAL_FLASH_Program+0xd8>)
 800a154:	f023 0302 	bic.w	r3, r3, #2
 800a158:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a15a:	4b04      	ldr	r3, [pc, #16]	@ (800a16c <HAL_FLASH_Program+0xd4>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	751a      	strb	r2, [r3, #20]

  return status;
 800a160:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a164:	4618      	mov	r0, r3
 800a166:	3728      	adds	r7, #40	@ 0x28
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	24001054 	.word	0x24001054
 800a170:	52002000 	.word	0x52002000

0800a174 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a174:	b480      	push	{r7}
 800a176:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a178:	4b0c      	ldr	r3, [pc, #48]	@ (800a1ac <HAL_FLASH_Unlock+0x38>)
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00d      	beq.n	800a1a0 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800a184:	4b09      	ldr	r3, [pc, #36]	@ (800a1ac <HAL_FLASH_Unlock+0x38>)
 800a186:	4a0a      	ldr	r2, [pc, #40]	@ (800a1b0 <HAL_FLASH_Unlock+0x3c>)
 800a188:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800a18a:	4b08      	ldr	r3, [pc, #32]	@ (800a1ac <HAL_FLASH_Unlock+0x38>)
 800a18c:	4a09      	ldr	r2, [pc, #36]	@ (800a1b4 <HAL_FLASH_Unlock+0x40>)
 800a18e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a190:	4b06      	ldr	r3, [pc, #24]	@ (800a1ac <HAL_FLASH_Unlock+0x38>)
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	f003 0301 	and.w	r3, r3, #1
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e000      	b.n	800a1a2 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr
 800a1ac:	52002000 	.word	0x52002000
 800a1b0:	45670123 	.word	0x45670123
 800a1b4:	cdef89ab 	.word	0xcdef89ab

0800a1b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 800a1bc:	4b09      	ldr	r3, [pc, #36]	@ (800a1e4 <HAL_FLASH_Lock+0x2c>)
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	4a08      	ldr	r2, [pc, #32]	@ (800a1e4 <HAL_FLASH_Lock+0x2c>)
 800a1c2:	f043 0301 	orr.w	r3, r3, #1
 800a1c6:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 800a1c8:	4b06      	ldr	r3, [pc, #24]	@ (800a1e4 <HAL_FLASH_Lock+0x2c>)
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	f003 0301 	and.w	r3, r3, #1
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d101      	bne.n	800a1d8 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e000      	b.n	800a1da <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	52002000 	.word	0x52002000

0800a1e8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
*/

uint32_t HAL_FLASH_GetError(void)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a1ec:	4b03      	ldr	r3, [pc, #12]	@ (800a1fc <HAL_FLASH_GetError+0x14>)
 800a1ee:	699b      	ldr	r3, [r3, #24]
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	24001054 	.word	0x24001054

0800a200 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800a20a:	2304      	movs	r3, #4
 800a20c:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 800a20e:	2300      	movs	r3, #0
 800a210:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a212:	f7fa f89d 	bl	8004350 <HAL_GetTick>
 800a216:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a218:	e010      	b.n	800a23c <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a220:	d00c      	beq.n	800a23c <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a222:	f7fa f895 	bl	8004350 <HAL_GetTick>
 800a226:	4602      	mov	r2, r0
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d302      	bcc.n	800a238 <FLASH_WaitForLastOperation+0x38>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d101      	bne.n	800a23c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a238:	2303      	movs	r3, #3
 800a23a:	e02d      	b.n	800a298 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a23c:	4b18      	ldr	r3, [pc, #96]	@ (800a2a0 <FLASH_WaitForLastOperation+0xa0>)
 800a23e:	691a      	ldr	r2, [r3, #16]
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	4013      	ands	r3, r2
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	429a      	cmp	r2, r3
 800a248:	d0e7      	beq.n	800a21a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d104      	bne.n	800a25a <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800a250:	4b13      	ldr	r3, [pc, #76]	@ (800a2a0 <FLASH_WaitForLastOperation+0xa0>)
 800a252:	691a      	ldr	r2, [r3, #16]
 800a254:	4b13      	ldr	r3, [pc, #76]	@ (800a2a4 <FLASH_WaitForLastOperation+0xa4>)
 800a256:	4013      	ands	r3, r2
 800a258:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00a      	beq.n	800a27a <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800a264:	4b10      	ldr	r3, [pc, #64]	@ (800a2a8 <FLASH_WaitForLastOperation+0xa8>)
 800a266:	699a      	ldr	r2, [r3, #24]
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	4a0e      	ldr	r2, [pc, #56]	@ (800a2a8 <FLASH_WaitForLastOperation+0xa8>)
 800a26e:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800a270:	4a0b      	ldr	r2, [pc, #44]	@ (800a2a0 <FLASH_WaitForLastOperation+0xa0>)
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e00e      	b.n	800a298 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d10a      	bne.n	800a296 <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800a280:	4b07      	ldr	r3, [pc, #28]	@ (800a2a0 <FLASH_WaitForLastOperation+0xa0>)
 800a282:	691b      	ldr	r3, [r3, #16]
 800a284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a28c:	d103      	bne.n	800a296 <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800a28e:	4b04      	ldr	r3, [pc, #16]	@ (800a2a0 <FLASH_WaitForLastOperation+0xa0>)
 800a290:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a294:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3718      	adds	r7, #24
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	52002000 	.word	0x52002000
 800a2a4:	17ee0000 	.word	0x17ee0000
 800a2a8:	24001054 	.word	0x24001054

0800a2ac <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a2ba:	4b3f      	ldr	r3, [pc, #252]	@ (800a3b8 <HAL_FLASHEx_Erase+0x10c>)
 800a2bc:	7d1b      	ldrb	r3, [r3, #20]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d101      	bne.n	800a2c6 <HAL_FLASHEx_Erase+0x1a>
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	e074      	b.n	800a3b0 <HAL_FLASHEx_Erase+0x104>
 800a2c6:	4b3c      	ldr	r3, [pc, #240]	@ (800a3b8 <HAL_FLASHEx_Erase+0x10c>)
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a2cc:	4b3a      	ldr	r3, [pc, #232]	@ (800a3b8 <HAL_FLASHEx_Erase+0x10c>)
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	f003 0301 	and.w	r3, r3, #1
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d009      	beq.n	800a2f2 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a2de:	2101      	movs	r1, #1
 800a2e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a2e4:	f7ff ff8c 	bl	800a200 <FLASH_WaitForLastOperation>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d001      	beq.n	800a2f2 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d157      	bne.n	800a3a8 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d11e      	bne.n	800a33e <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	691a      	ldr	r2, [r3, #16]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	4619      	mov	r1, r3
 800a30a:	4610      	mov	r0, r2
 800a30c:	f000 f85a 	bl	800a3c4 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	f003 0301 	and.w	r3, r3, #1
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d045      	beq.n	800a3a8 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a31c:	2101      	movs	r1, #1
 800a31e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a322:	f7ff ff6d 	bl	800a200 <FLASH_WaitForLastOperation>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800a330:	4b22      	ldr	r3, [pc, #136]	@ (800a3bc <HAL_FLASHEx_Erase+0x110>)
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	4a21      	ldr	r2, [pc, #132]	@ (800a3bc <HAL_FLASHEx_Erase+0x110>)
 800a336:	f023 0308 	bic.w	r3, r3, #8
 800a33a:	60d3      	str	r3, [r2, #12]
 800a33c:	e034      	b.n	800a3a8 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a344:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	60bb      	str	r3, [r7, #8]
 800a34c:	e024      	b.n	800a398 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6859      	ldr	r1, [r3, #4]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	461a      	mov	r2, r3
 800a358:	68b8      	ldr	r0, [r7, #8]
 800a35a:	f000 f857 	bl	800a40c <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	f003 0301 	and.w	r3, r3, #1
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00c      	beq.n	800a384 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800a36a:	2101      	movs	r1, #1
 800a36c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a370:	f7ff ff46 	bl	800a200 <FLASH_WaitForLastOperation>
 800a374:	4603      	mov	r3, r0
 800a376:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a378:	4b10      	ldr	r3, [pc, #64]	@ (800a3bc <HAL_FLASHEx_Erase+0x110>)
 800a37a:	68da      	ldr	r2, [r3, #12]
 800a37c:	490f      	ldr	r1, [pc, #60]	@ (800a3bc <HAL_FLASHEx_Erase+0x110>)
 800a37e:	4b10      	ldr	r3, [pc, #64]	@ (800a3c0 <HAL_FLASHEx_Erase+0x114>)
 800a380:	4013      	ands	r3, r2
 800a382:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800a384:	7bfb      	ldrb	r3, [r7, #15]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	601a      	str	r2, [r3, #0]
          break;
 800a390:	e00a      	b.n	800a3a8 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	3301      	adds	r3, #1
 800a396:	60bb      	str	r3, [r7, #8]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	68da      	ldr	r2, [r3, #12]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d3d2      	bcc.n	800a34e <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a3a8:	4b03      	ldr	r3, [pc, #12]	@ (800a3b8 <HAL_FLASHEx_Erase+0x10c>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	751a      	strb	r2, [r3, #20]

  return status;
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	24001054 	.word	0x24001054
 800a3bc:	52002000 	.word	0x52002000
 800a3c0:	fffff8fb 	.word	0xfffff8fb

0800a3c4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	f003 0301 	and.w	r3, r3, #1
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d011      	beq.n	800a3fc <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a3d8:	4b0b      	ldr	r3, [pc, #44]	@ (800a408 <FLASH_MassErase+0x44>)
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	4a0a      	ldr	r2, [pc, #40]	@ (800a408 <FLASH_MassErase+0x44>)
 800a3de:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a3e2:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800a3e4:	4b08      	ldr	r3, [pc, #32]	@ (800a408 <FLASH_MassErase+0x44>)
 800a3e6:	68da      	ldr	r2, [r3, #12]
 800a3e8:	4907      	ldr	r1, [pc, #28]	@ (800a408 <FLASH_MassErase+0x44>)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800a3f0:	4b05      	ldr	r3, [pc, #20]	@ (800a408 <FLASH_MassErase+0x44>)
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	4a04      	ldr	r2, [pc, #16]	@ (800a408 <FLASH_MassErase+0x44>)
 800a3f6:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800a3fa:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr
 800a408:	52002000 	.word	0x52002000

0800a40c <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	f003 0301 	and.w	r3, r3, #1
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d010      	beq.n	800a444 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a422:	4b0b      	ldr	r3, [pc, #44]	@ (800a450 <FLASH_Erase_Sector+0x44>)
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	4a0a      	ldr	r2, [pc, #40]	@ (800a450 <FLASH_Erase_Sector+0x44>)
 800a428:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 800a42c:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a42e:	4b08      	ldr	r3, [pc, #32]	@ (800a450 <FLASH_Erase_Sector+0x44>)
 800a430:	68da      	ldr	r2, [r3, #12]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	0219      	lsls	r1, r3, #8
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	430b      	orrs	r3, r1
 800a43a:	4313      	orrs	r3, r2
 800a43c:	4a04      	ldr	r2, [pc, #16]	@ (800a450 <FLASH_Erase_Sector+0x44>)
 800a43e:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 800a442:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800a444:	bf00      	nop
 800a446:	3714      	adds	r7, #20
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr
 800a450:	52002000 	.word	0x52002000

0800a454 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a454:	b480      	push	{r7}
 800a456:	b089      	sub	sp, #36	@ 0x24
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a45e:	2300      	movs	r3, #0
 800a460:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a462:	4b86      	ldr	r3, [pc, #536]	@ (800a67c <HAL_GPIO_Init+0x228>)
 800a464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a466:	e18c      	b.n	800a782 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	2101      	movs	r1, #1
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	fa01 f303 	lsl.w	r3, r1, r3
 800a474:	4013      	ands	r3, r2
 800a476:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f000 817e 	beq.w	800a77c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	f003 0303 	and.w	r3, r3, #3
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d005      	beq.n	800a498 <HAL_GPIO_Init+0x44>
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	f003 0303 	and.w	r3, r3, #3
 800a494:	2b02      	cmp	r3, #2
 800a496:	d130      	bne.n	800a4fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	005b      	lsls	r3, r3, #1
 800a4a2:	2203      	movs	r2, #3
 800a4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a8:	43db      	mvns	r3, r3
 800a4aa:	69ba      	ldr	r2, [r7, #24]
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	68da      	ldr	r2, [r3, #12]
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	005b      	lsls	r3, r3, #1
 800a4b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4bc:	69ba      	ldr	r2, [r7, #24]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	69ba      	ldr	r2, [r7, #24]
 800a4c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4d6:	43db      	mvns	r3, r3
 800a4d8:	69ba      	ldr	r2, [r7, #24]
 800a4da:	4013      	ands	r3, r2
 800a4dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	091b      	lsrs	r3, r3, #4
 800a4e4:	f003 0201 	and.w	r2, r3, #1
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ee:	69ba      	ldr	r2, [r7, #24]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	69ba      	ldr	r2, [r7, #24]
 800a4f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	2b03      	cmp	r3, #3
 800a504:	d017      	beq.n	800a536 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	005b      	lsls	r3, r3, #1
 800a510:	2203      	movs	r2, #3
 800a512:	fa02 f303 	lsl.w	r3, r2, r3
 800a516:	43db      	mvns	r3, r3
 800a518:	69ba      	ldr	r2, [r7, #24]
 800a51a:	4013      	ands	r3, r2
 800a51c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	689a      	ldr	r2, [r3, #8]
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	005b      	lsls	r3, r3, #1
 800a526:	fa02 f303 	lsl.w	r3, r2, r3
 800a52a:	69ba      	ldr	r2, [r7, #24]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	69ba      	ldr	r2, [r7, #24]
 800a534:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	f003 0303 	and.w	r3, r3, #3
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d123      	bne.n	800a58a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	08da      	lsrs	r2, r3, #3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	3208      	adds	r2, #8
 800a54a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a54e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	f003 0307 	and.w	r3, r3, #7
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	220f      	movs	r2, #15
 800a55a:	fa02 f303 	lsl.w	r3, r2, r3
 800a55e:	43db      	mvns	r3, r3
 800a560:	69ba      	ldr	r2, [r7, #24]
 800a562:	4013      	ands	r3, r2
 800a564:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	691a      	ldr	r2, [r3, #16]
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	f003 0307 	and.w	r3, r3, #7
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	fa02 f303 	lsl.w	r3, r2, r3
 800a576:	69ba      	ldr	r2, [r7, #24]
 800a578:	4313      	orrs	r3, r2
 800a57a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	08da      	lsrs	r2, r3, #3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	3208      	adds	r2, #8
 800a584:	69b9      	ldr	r1, [r7, #24]
 800a586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	005b      	lsls	r3, r3, #1
 800a594:	2203      	movs	r2, #3
 800a596:	fa02 f303 	lsl.w	r3, r2, r3
 800a59a:	43db      	mvns	r3, r3
 800a59c:	69ba      	ldr	r2, [r7, #24]
 800a59e:	4013      	ands	r3, r2
 800a5a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	f003 0203 	and.w	r2, r3, #3
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	005b      	lsls	r3, r3, #1
 800a5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b2:	69ba      	ldr	r2, [r7, #24]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	69ba      	ldr	r2, [r7, #24]
 800a5bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f000 80d8 	beq.w	800a77c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a5cc:	4b2c      	ldr	r3, [pc, #176]	@ (800a680 <HAL_GPIO_Init+0x22c>)
 800a5ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a5d2:	4a2b      	ldr	r2, [pc, #172]	@ (800a680 <HAL_GPIO_Init+0x22c>)
 800a5d4:	f043 0302 	orr.w	r3, r3, #2
 800a5d8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a5dc:	4b28      	ldr	r3, [pc, #160]	@ (800a680 <HAL_GPIO_Init+0x22c>)
 800a5de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a5e2:	f003 0302 	and.w	r3, r3, #2
 800a5e6:	60fb      	str	r3, [r7, #12]
 800a5e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a5ea:	4a26      	ldr	r2, [pc, #152]	@ (800a684 <HAL_GPIO_Init+0x230>)
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	089b      	lsrs	r3, r3, #2
 800a5f0:	3302      	adds	r3, #2
 800a5f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	f003 0303 	and.w	r3, r3, #3
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	220f      	movs	r2, #15
 800a602:	fa02 f303 	lsl.w	r3, r2, r3
 800a606:	43db      	mvns	r3, r3
 800a608:	69ba      	ldr	r2, [r7, #24]
 800a60a:	4013      	ands	r3, r2
 800a60c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a1d      	ldr	r2, [pc, #116]	@ (800a688 <HAL_GPIO_Init+0x234>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d04a      	beq.n	800a6ac <HAL_GPIO_Init+0x258>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a1c      	ldr	r2, [pc, #112]	@ (800a68c <HAL_GPIO_Init+0x238>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d02b      	beq.n	800a676 <HAL_GPIO_Init+0x222>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a1b      	ldr	r2, [pc, #108]	@ (800a690 <HAL_GPIO_Init+0x23c>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d025      	beq.n	800a672 <HAL_GPIO_Init+0x21e>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a1a      	ldr	r2, [pc, #104]	@ (800a694 <HAL_GPIO_Init+0x240>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d01f      	beq.n	800a66e <HAL_GPIO_Init+0x21a>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a19      	ldr	r2, [pc, #100]	@ (800a698 <HAL_GPIO_Init+0x244>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d019      	beq.n	800a66a <HAL_GPIO_Init+0x216>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a18      	ldr	r2, [pc, #96]	@ (800a69c <HAL_GPIO_Init+0x248>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d013      	beq.n	800a666 <HAL_GPIO_Init+0x212>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a17      	ldr	r2, [pc, #92]	@ (800a6a0 <HAL_GPIO_Init+0x24c>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d00d      	beq.n	800a662 <HAL_GPIO_Init+0x20e>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a16      	ldr	r2, [pc, #88]	@ (800a6a4 <HAL_GPIO_Init+0x250>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d007      	beq.n	800a65e <HAL_GPIO_Init+0x20a>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a15      	ldr	r2, [pc, #84]	@ (800a6a8 <HAL_GPIO_Init+0x254>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d101      	bne.n	800a65a <HAL_GPIO_Init+0x206>
 800a656:	2309      	movs	r3, #9
 800a658:	e029      	b.n	800a6ae <HAL_GPIO_Init+0x25a>
 800a65a:	230a      	movs	r3, #10
 800a65c:	e027      	b.n	800a6ae <HAL_GPIO_Init+0x25a>
 800a65e:	2307      	movs	r3, #7
 800a660:	e025      	b.n	800a6ae <HAL_GPIO_Init+0x25a>
 800a662:	2306      	movs	r3, #6
 800a664:	e023      	b.n	800a6ae <HAL_GPIO_Init+0x25a>
 800a666:	2305      	movs	r3, #5
 800a668:	e021      	b.n	800a6ae <HAL_GPIO_Init+0x25a>
 800a66a:	2304      	movs	r3, #4
 800a66c:	e01f      	b.n	800a6ae <HAL_GPIO_Init+0x25a>
 800a66e:	2303      	movs	r3, #3
 800a670:	e01d      	b.n	800a6ae <HAL_GPIO_Init+0x25a>
 800a672:	2302      	movs	r3, #2
 800a674:	e01b      	b.n	800a6ae <HAL_GPIO_Init+0x25a>
 800a676:	2301      	movs	r3, #1
 800a678:	e019      	b.n	800a6ae <HAL_GPIO_Init+0x25a>
 800a67a:	bf00      	nop
 800a67c:	58000080 	.word	0x58000080
 800a680:	58024400 	.word	0x58024400
 800a684:	58000400 	.word	0x58000400
 800a688:	58020000 	.word	0x58020000
 800a68c:	58020400 	.word	0x58020400
 800a690:	58020800 	.word	0x58020800
 800a694:	58020c00 	.word	0x58020c00
 800a698:	58021000 	.word	0x58021000
 800a69c:	58021400 	.word	0x58021400
 800a6a0:	58021800 	.word	0x58021800
 800a6a4:	58021c00 	.word	0x58021c00
 800a6a8:	58022400 	.word	0x58022400
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	69fa      	ldr	r2, [r7, #28]
 800a6b0:	f002 0203 	and.w	r2, r2, #3
 800a6b4:	0092      	lsls	r2, r2, #2
 800a6b6:	4093      	lsls	r3, r2
 800a6b8:	69ba      	ldr	r2, [r7, #24]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a6be:	4938      	ldr	r1, [pc, #224]	@ (800a7a0 <HAL_GPIO_Init+0x34c>)
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	089b      	lsrs	r3, r3, #2
 800a6c4:	3302      	adds	r3, #2
 800a6c6:	69ba      	ldr	r2, [r7, #24]
 800a6c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a6cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	43db      	mvns	r3, r3
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	4013      	ands	r3, r2
 800a6dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d003      	beq.n	800a6f2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a6ea:	69ba      	ldr	r2, [r7, #24]
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a6f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a6fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	43db      	mvns	r3, r3
 800a706:	69ba      	ldr	r2, [r7, #24]
 800a708:	4013      	ands	r3, r2
 800a70a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a714:	2b00      	cmp	r3, #0
 800a716:	d003      	beq.n	800a720 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800a718:	69ba      	ldr	r2, [r7, #24]
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a720:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	43db      	mvns	r3, r3
 800a732:	69ba      	ldr	r2, [r7, #24]
 800a734:	4013      	ands	r3, r2
 800a736:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a740:	2b00      	cmp	r3, #0
 800a742:	d003      	beq.n	800a74c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800a744:	69ba      	ldr	r2, [r7, #24]
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	4313      	orrs	r3, r2
 800a74a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	69ba      	ldr	r2, [r7, #24]
 800a750:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	43db      	mvns	r3, r3
 800a75c:	69ba      	ldr	r2, [r7, #24]
 800a75e:	4013      	ands	r3, r2
 800a760:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800a76e:	69ba      	ldr	r2, [r7, #24]
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	4313      	orrs	r3, r2
 800a774:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	69ba      	ldr	r2, [r7, #24]
 800a77a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	3301      	adds	r3, #1
 800a780:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	fa22 f303 	lsr.w	r3, r2, r3
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f47f ae6b 	bne.w	800a468 <HAL_GPIO_Init+0x14>
  }
}
 800a792:	bf00      	nop
 800a794:	bf00      	nop
 800a796:	3724      	adds	r7, #36	@ 0x24
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr
 800a7a0:	58000400 	.word	0x58000400

0800a7a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	691a      	ldr	r2, [r3, #16]
 800a7b4:	887b      	ldrh	r3, [r7, #2]
 800a7b6:	4013      	ands	r3, r2
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	73fb      	strb	r3, [r7, #15]
 800a7c0:	e001      	b.n	800a7c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	807b      	strh	r3, [r7, #2]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a7e4:	787b      	ldrb	r3, [r7, #1]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d003      	beq.n	800a7f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a7ea:	887a      	ldrh	r2, [r7, #2]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a7f0:	e003      	b.n	800a7fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a7f2:	887b      	ldrh	r3, [r7, #2]
 800a7f4:	041a      	lsls	r2, r3, #16
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	619a      	str	r2, [r3, #24]
}
 800a7fa:	bf00      	nop
 800a7fc:	370c      	adds	r7, #12
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b082      	sub	sp, #8
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	4603      	mov	r3, r0
 800a80e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a814:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a818:	88fb      	ldrh	r3, [r7, #6]
 800a81a:	4013      	ands	r3, r2
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d008      	beq.n	800a832 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a820:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a824:	88fb      	ldrh	r3, [r7, #6]
 800a826:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a82a:	88fb      	ldrh	r3, [r7, #6]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7f7 fb1f 	bl	8001e70 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a832:	bf00      	nop
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
	...

0800a83c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a844:	4b19      	ldr	r3, [pc, #100]	@ (800a8ac <HAL_PWREx_ConfigSupply+0x70>)
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	f003 0304 	and.w	r3, r3, #4
 800a84c:	2b04      	cmp	r3, #4
 800a84e:	d00a      	beq.n	800a866 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a850:	4b16      	ldr	r3, [pc, #88]	@ (800a8ac <HAL_PWREx_ConfigSupply+0x70>)
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	f003 0307 	and.w	r3, r3, #7
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d001      	beq.n	800a862 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e01f      	b.n	800a8a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a862:	2300      	movs	r3, #0
 800a864:	e01d      	b.n	800a8a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a866:	4b11      	ldr	r3, [pc, #68]	@ (800a8ac <HAL_PWREx_ConfigSupply+0x70>)
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	f023 0207 	bic.w	r2, r3, #7
 800a86e:	490f      	ldr	r1, [pc, #60]	@ (800a8ac <HAL_PWREx_ConfigSupply+0x70>)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4313      	orrs	r3, r2
 800a874:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a876:	f7f9 fd6b 	bl	8004350 <HAL_GetTick>
 800a87a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a87c:	e009      	b.n	800a892 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a87e:	f7f9 fd67 	bl	8004350 <HAL_GetTick>
 800a882:	4602      	mov	r2, r0
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	1ad3      	subs	r3, r2, r3
 800a888:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a88c:	d901      	bls.n	800a892 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e007      	b.n	800a8a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a892:	4b06      	ldr	r3, [pc, #24]	@ (800a8ac <HAL_PWREx_ConfigSupply+0x70>)
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a89a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a89e:	d1ee      	bne.n	800a87e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	58024800 	.word	0x58024800

0800a8b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b08c      	sub	sp, #48	@ 0x30
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d101      	bne.n	800a8c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e3c8      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 0301 	and.w	r3, r3, #1
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f000 8087 	beq.w	800a9de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8d0:	4b88      	ldr	r3, [pc, #544]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a8da:	4b86      	ldr	r3, [pc, #536]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a8dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8de:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e2:	2b10      	cmp	r3, #16
 800a8e4:	d007      	beq.n	800a8f6 <HAL_RCC_OscConfig+0x46>
 800a8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e8:	2b18      	cmp	r3, #24
 800a8ea:	d110      	bne.n	800a90e <HAL_RCC_OscConfig+0x5e>
 800a8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ee:	f003 0303 	and.w	r3, r3, #3
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d10b      	bne.n	800a90e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8f6:	4b7f      	ldr	r3, [pc, #508]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d06c      	beq.n	800a9dc <HAL_RCC_OscConfig+0x12c>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d168      	bne.n	800a9dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	e3a2      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a916:	d106      	bne.n	800a926 <HAL_RCC_OscConfig+0x76>
 800a918:	4b76      	ldr	r3, [pc, #472]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a75      	ldr	r2, [pc, #468]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a91e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a922:	6013      	str	r3, [r2, #0]
 800a924:	e02e      	b.n	800a984 <HAL_RCC_OscConfig+0xd4>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10c      	bne.n	800a948 <HAL_RCC_OscConfig+0x98>
 800a92e:	4b71      	ldr	r3, [pc, #452]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a70      	ldr	r2, [pc, #448]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a938:	6013      	str	r3, [r2, #0]
 800a93a:	4b6e      	ldr	r3, [pc, #440]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a6d      	ldr	r2, [pc, #436]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a940:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a944:	6013      	str	r3, [r2, #0]
 800a946:	e01d      	b.n	800a984 <HAL_RCC_OscConfig+0xd4>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a950:	d10c      	bne.n	800a96c <HAL_RCC_OscConfig+0xbc>
 800a952:	4b68      	ldr	r3, [pc, #416]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a67      	ldr	r2, [pc, #412]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a95c:	6013      	str	r3, [r2, #0]
 800a95e:	4b65      	ldr	r3, [pc, #404]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a64      	ldr	r2, [pc, #400]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a968:	6013      	str	r3, [r2, #0]
 800a96a:	e00b      	b.n	800a984 <HAL_RCC_OscConfig+0xd4>
 800a96c:	4b61      	ldr	r3, [pc, #388]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a60      	ldr	r2, [pc, #384]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a976:	6013      	str	r3, [r2, #0]
 800a978:	4b5e      	ldr	r3, [pc, #376]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a5d      	ldr	r2, [pc, #372]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a97e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d013      	beq.n	800a9b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a98c:	f7f9 fce0 	bl	8004350 <HAL_GetTick>
 800a990:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a992:	e008      	b.n	800a9a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a994:	f7f9 fcdc 	bl	8004350 <HAL_GetTick>
 800a998:	4602      	mov	r2, r0
 800a99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99c:	1ad3      	subs	r3, r2, r3
 800a99e:	2b64      	cmp	r3, #100	@ 0x64
 800a9a0:	d901      	bls.n	800a9a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	e356      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a9a6:	4b53      	ldr	r3, [pc, #332]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d0f0      	beq.n	800a994 <HAL_RCC_OscConfig+0xe4>
 800a9b2:	e014      	b.n	800a9de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9b4:	f7f9 fccc 	bl	8004350 <HAL_GetTick>
 800a9b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a9ba:	e008      	b.n	800a9ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9bc:	f7f9 fcc8 	bl	8004350 <HAL_GetTick>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	2b64      	cmp	r3, #100	@ 0x64
 800a9c8:	d901      	bls.n	800a9ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e342      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a9ce:	4b49      	ldr	r3, [pc, #292]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1f0      	bne.n	800a9bc <HAL_RCC_OscConfig+0x10c>
 800a9da:	e000      	b.n	800a9de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 0302 	and.w	r3, r3, #2
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f000 808c 	beq.w	800ab04 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a9ec:	4b41      	ldr	r3, [pc, #260]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a9ee:	691b      	ldr	r3, [r3, #16]
 800a9f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a9f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a9f6:	4b3f      	ldr	r3, [pc, #252]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800a9f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a9fc:	6a3b      	ldr	r3, [r7, #32]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d007      	beq.n	800aa12 <HAL_RCC_OscConfig+0x162>
 800aa02:	6a3b      	ldr	r3, [r7, #32]
 800aa04:	2b18      	cmp	r3, #24
 800aa06:	d137      	bne.n	800aa78 <HAL_RCC_OscConfig+0x1c8>
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	f003 0303 	and.w	r3, r3, #3
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d132      	bne.n	800aa78 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa12:	4b38      	ldr	r3, [pc, #224]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f003 0304 	and.w	r3, r3, #4
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d005      	beq.n	800aa2a <HAL_RCC_OscConfig+0x17a>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e314      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa2a:	4b32      	ldr	r3, [pc, #200]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f023 0219 	bic.w	r2, r3, #25
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	492f      	ldr	r1, [pc, #188]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa3c:	f7f9 fc88 	bl	8004350 <HAL_GetTick>
 800aa40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa42:	e008      	b.n	800aa56 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa44:	f7f9 fc84 	bl	8004350 <HAL_GetTick>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4c:	1ad3      	subs	r3, r2, r3
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	d901      	bls.n	800aa56 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800aa52:	2303      	movs	r3, #3
 800aa54:	e2fe      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa56:	4b27      	ldr	r3, [pc, #156]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 0304 	and.w	r3, r3, #4
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d0f0      	beq.n	800aa44 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa62:	4b24      	ldr	r3, [pc, #144]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	061b      	lsls	r3, r3, #24
 800aa70:	4920      	ldr	r1, [pc, #128]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800aa72:	4313      	orrs	r3, r2
 800aa74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa76:	e045      	b.n	800ab04 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d026      	beq.n	800aace <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa80:	4b1c      	ldr	r3, [pc, #112]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f023 0219 	bic.w	r2, r3, #25
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	4919      	ldr	r1, [pc, #100]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa92:	f7f9 fc5d 	bl	8004350 <HAL_GetTick>
 800aa96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa98:	e008      	b.n	800aaac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa9a:	f7f9 fc59 	bl	8004350 <HAL_GetTick>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa2:	1ad3      	subs	r3, r2, r3
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	d901      	bls.n	800aaac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	e2d3      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aaac:	4b11      	ldr	r3, [pc, #68]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0304 	and.w	r3, r3, #4
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d0f0      	beq.n	800aa9a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aab8:	4b0e      	ldr	r3, [pc, #56]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	061b      	lsls	r3, r3, #24
 800aac6:	490b      	ldr	r1, [pc, #44]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800aac8:	4313      	orrs	r3, r2
 800aaca:	604b      	str	r3, [r1, #4]
 800aacc:	e01a      	b.n	800ab04 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aace:	4b09      	ldr	r3, [pc, #36]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a08      	ldr	r2, [pc, #32]	@ (800aaf4 <HAL_RCC_OscConfig+0x244>)
 800aad4:	f023 0301 	bic.w	r3, r3, #1
 800aad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aada:	f7f9 fc39 	bl	8004350 <HAL_GetTick>
 800aade:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aae0:	e00a      	b.n	800aaf8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aae2:	f7f9 fc35 	bl	8004350 <HAL_GetTick>
 800aae6:	4602      	mov	r2, r0
 800aae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d903      	bls.n	800aaf8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	e2af      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
 800aaf4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aaf8:	4b96      	ldr	r3, [pc, #600]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f003 0304 	and.w	r3, r3, #4
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d1ee      	bne.n	800aae2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f003 0310 	and.w	r3, r3, #16
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d06a      	beq.n	800abe6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab10:	4b90      	ldr	r3, [pc, #576]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab18:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab1a:	4b8e      	ldr	r3, [pc, #568]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ab1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab1e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	2b08      	cmp	r3, #8
 800ab24:	d007      	beq.n	800ab36 <HAL_RCC_OscConfig+0x286>
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	2b18      	cmp	r3, #24
 800ab2a:	d11b      	bne.n	800ab64 <HAL_RCC_OscConfig+0x2b4>
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	f003 0303 	and.w	r3, r3, #3
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d116      	bne.n	800ab64 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab36:	4b87      	ldr	r3, [pc, #540]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d005      	beq.n	800ab4e <HAL_RCC_OscConfig+0x29e>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	69db      	ldr	r3, [r3, #28]
 800ab46:	2b80      	cmp	r3, #128	@ 0x80
 800ab48:	d001      	beq.n	800ab4e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e282      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab4e:	4b81      	ldr	r3, [pc, #516]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a1b      	ldr	r3, [r3, #32]
 800ab5a:	061b      	lsls	r3, r3, #24
 800ab5c:	497d      	ldr	r1, [pc, #500]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab62:	e040      	b.n	800abe6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	69db      	ldr	r3, [r3, #28]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d023      	beq.n	800abb4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ab6c:	4b79      	ldr	r3, [pc, #484]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a78      	ldr	r2, [pc, #480]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ab72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab78:	f7f9 fbea 	bl	8004350 <HAL_GetTick>
 800ab7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab7e:	e008      	b.n	800ab92 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ab80:	f7f9 fbe6 	bl	8004350 <HAL_GetTick>
 800ab84:	4602      	mov	r2, r0
 800ab86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab88:	1ad3      	subs	r3, r2, r3
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d901      	bls.n	800ab92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ab8e:	2303      	movs	r3, #3
 800ab90:	e260      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab92:	4b70      	ldr	r3, [pc, #448]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d0f0      	beq.n	800ab80 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab9e:	4b6d      	ldr	r3, [pc, #436]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a1b      	ldr	r3, [r3, #32]
 800abaa:	061b      	lsls	r3, r3, #24
 800abac:	4969      	ldr	r1, [pc, #420]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800abae:	4313      	orrs	r3, r2
 800abb0:	60cb      	str	r3, [r1, #12]
 800abb2:	e018      	b.n	800abe6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800abb4:	4b67      	ldr	r3, [pc, #412]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a66      	ldr	r2, [pc, #408]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800abba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abc0:	f7f9 fbc6 	bl	8004350 <HAL_GetTick>
 800abc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800abc6:	e008      	b.n	800abda <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800abc8:	f7f9 fbc2 	bl	8004350 <HAL_GetTick>
 800abcc:	4602      	mov	r2, r0
 800abce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d901      	bls.n	800abda <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800abd6:	2303      	movs	r3, #3
 800abd8:	e23c      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800abda:	4b5e      	ldr	r3, [pc, #376]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1f0      	bne.n	800abc8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 0308 	and.w	r3, r3, #8
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d036      	beq.n	800ac60 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d019      	beq.n	800ac2e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800abfa:	4b56      	ldr	r3, [pc, #344]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800abfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abfe:	4a55      	ldr	r2, [pc, #340]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ac00:	f043 0301 	orr.w	r3, r3, #1
 800ac04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac06:	f7f9 fba3 	bl	8004350 <HAL_GetTick>
 800ac0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac0c:	e008      	b.n	800ac20 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac0e:	f7f9 fb9f 	bl	8004350 <HAL_GetTick>
 800ac12:	4602      	mov	r2, r0
 800ac14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d901      	bls.n	800ac20 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	e219      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac20:	4b4c      	ldr	r3, [pc, #304]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ac22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac24:	f003 0302 	and.w	r3, r3, #2
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d0f0      	beq.n	800ac0e <HAL_RCC_OscConfig+0x35e>
 800ac2c:	e018      	b.n	800ac60 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac2e:	4b49      	ldr	r3, [pc, #292]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ac30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac32:	4a48      	ldr	r2, [pc, #288]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ac34:	f023 0301 	bic.w	r3, r3, #1
 800ac38:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac3a:	f7f9 fb89 	bl	8004350 <HAL_GetTick>
 800ac3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac40:	e008      	b.n	800ac54 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac42:	f7f9 fb85 	bl	8004350 <HAL_GetTick>
 800ac46:	4602      	mov	r2, r0
 800ac48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4a:	1ad3      	subs	r3, r2, r3
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	d901      	bls.n	800ac54 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ac50:	2303      	movs	r3, #3
 800ac52:	e1ff      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac54:	4b3f      	ldr	r3, [pc, #252]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ac56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac58:	f003 0302 	and.w	r3, r3, #2
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1f0      	bne.n	800ac42 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f003 0320 	and.w	r3, r3, #32
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d036      	beq.n	800acda <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	699b      	ldr	r3, [r3, #24]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d019      	beq.n	800aca8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ac74:	4b37      	ldr	r3, [pc, #220]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a36      	ldr	r2, [pc, #216]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ac7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ac7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ac80:	f7f9 fb66 	bl	8004350 <HAL_GetTick>
 800ac84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ac86:	e008      	b.n	800ac9a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac88:	f7f9 fb62 	bl	8004350 <HAL_GetTick>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d901      	bls.n	800ac9a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800ac96:	2303      	movs	r3, #3
 800ac98:	e1dc      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ac9a:	4b2e      	ldr	r3, [pc, #184]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d0f0      	beq.n	800ac88 <HAL_RCC_OscConfig+0x3d8>
 800aca6:	e018      	b.n	800acda <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aca8:	4b2a      	ldr	r3, [pc, #168]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a29      	ldr	r2, [pc, #164]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800acae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800acb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800acb4:	f7f9 fb4c 	bl	8004350 <HAL_GetTick>
 800acb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800acba:	e008      	b.n	800acce <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800acbc:	f7f9 fb48 	bl	8004350 <HAL_GetTick>
 800acc0:	4602      	mov	r2, r0
 800acc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d901      	bls.n	800acce <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800acca:	2303      	movs	r3, #3
 800accc:	e1c2      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800acce:	4b21      	ldr	r3, [pc, #132]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1f0      	bne.n	800acbc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 0304 	and.w	r3, r3, #4
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	f000 8086 	beq.w	800adf4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ace8:	4b1b      	ldr	r3, [pc, #108]	@ (800ad58 <HAL_RCC_OscConfig+0x4a8>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a1a      	ldr	r2, [pc, #104]	@ (800ad58 <HAL_RCC_OscConfig+0x4a8>)
 800acee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800acf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800acf4:	f7f9 fb2c 	bl	8004350 <HAL_GetTick>
 800acf8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acfa:	e008      	b.n	800ad0e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acfc:	f7f9 fb28 	bl	8004350 <HAL_GetTick>
 800ad00:	4602      	mov	r2, r0
 800ad02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad04:	1ad3      	subs	r3, r2, r3
 800ad06:	2b64      	cmp	r3, #100	@ 0x64
 800ad08:	d901      	bls.n	800ad0e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	e1a2      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad0e:	4b12      	ldr	r3, [pc, #72]	@ (800ad58 <HAL_RCC_OscConfig+0x4a8>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d0f0      	beq.n	800acfc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d106      	bne.n	800ad30 <HAL_RCC_OscConfig+0x480>
 800ad22:	4b0c      	ldr	r3, [pc, #48]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ad24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad26:	4a0b      	ldr	r2, [pc, #44]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ad28:	f043 0301 	orr.w	r3, r3, #1
 800ad2c:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad2e:	e032      	b.n	800ad96 <HAL_RCC_OscConfig+0x4e6>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d111      	bne.n	800ad5c <HAL_RCC_OscConfig+0x4ac>
 800ad38:	4b06      	ldr	r3, [pc, #24]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ad3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad3c:	4a05      	ldr	r2, [pc, #20]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ad3e:	f023 0301 	bic.w	r3, r3, #1
 800ad42:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad44:	4b03      	ldr	r3, [pc, #12]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ad46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad48:	4a02      	ldr	r2, [pc, #8]	@ (800ad54 <HAL_RCC_OscConfig+0x4a4>)
 800ad4a:	f023 0304 	bic.w	r3, r3, #4
 800ad4e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad50:	e021      	b.n	800ad96 <HAL_RCC_OscConfig+0x4e6>
 800ad52:	bf00      	nop
 800ad54:	58024400 	.word	0x58024400
 800ad58:	58024800 	.word	0x58024800
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	2b05      	cmp	r3, #5
 800ad62:	d10c      	bne.n	800ad7e <HAL_RCC_OscConfig+0x4ce>
 800ad64:	4b83      	ldr	r3, [pc, #524]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800ad66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad68:	4a82      	ldr	r2, [pc, #520]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800ad6a:	f043 0304 	orr.w	r3, r3, #4
 800ad6e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad70:	4b80      	ldr	r3, [pc, #512]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800ad72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad74:	4a7f      	ldr	r2, [pc, #508]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800ad76:	f043 0301 	orr.w	r3, r3, #1
 800ad7a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad7c:	e00b      	b.n	800ad96 <HAL_RCC_OscConfig+0x4e6>
 800ad7e:	4b7d      	ldr	r3, [pc, #500]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800ad80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad82:	4a7c      	ldr	r2, [pc, #496]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800ad84:	f023 0301 	bic.w	r3, r3, #1
 800ad88:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad8a:	4b7a      	ldr	r3, [pc, #488]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800ad8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad8e:	4a79      	ldr	r2, [pc, #484]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800ad90:	f023 0304 	bic.w	r3, r3, #4
 800ad94:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d015      	beq.n	800adca <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad9e:	f7f9 fad7 	bl	8004350 <HAL_GetTick>
 800ada2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ada4:	e00a      	b.n	800adbc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ada6:	f7f9 fad3 	bl	8004350 <HAL_GetTick>
 800adaa:	4602      	mov	r2, r0
 800adac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adae:	1ad3      	subs	r3, r2, r3
 800adb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d901      	bls.n	800adbc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800adb8:	2303      	movs	r3, #3
 800adba:	e14b      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800adbc:	4b6d      	ldr	r3, [pc, #436]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800adbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adc0:	f003 0302 	and.w	r3, r3, #2
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d0ee      	beq.n	800ada6 <HAL_RCC_OscConfig+0x4f6>
 800adc8:	e014      	b.n	800adf4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adca:	f7f9 fac1 	bl	8004350 <HAL_GetTick>
 800adce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800add0:	e00a      	b.n	800ade8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800add2:	f7f9 fabd 	bl	8004350 <HAL_GetTick>
 800add6:	4602      	mov	r2, r0
 800add8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d901      	bls.n	800ade8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ade4:	2303      	movs	r3, #3
 800ade6:	e135      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ade8:	4b62      	ldr	r3, [pc, #392]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800adea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adec:	f003 0302 	and.w	r3, r3, #2
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1ee      	bne.n	800add2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f000 812a 	beq.w	800b052 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800adfe:	4b5d      	ldr	r3, [pc, #372]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae06:	2b18      	cmp	r3, #24
 800ae08:	f000 80ba 	beq.w	800af80 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	f040 8095 	bne.w	800af40 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae16:	4b57      	ldr	r3, [pc, #348]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a56      	ldr	r2, [pc, #344]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800ae1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ae20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae22:	f7f9 fa95 	bl	8004350 <HAL_GetTick>
 800ae26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae28:	e008      	b.n	800ae3c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae2a:	f7f9 fa91 	bl	8004350 <HAL_GetTick>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae32:	1ad3      	subs	r3, r2, r3
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d901      	bls.n	800ae3c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ae38:	2303      	movs	r3, #3
 800ae3a:	e10b      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae3c:	4b4d      	ldr	r3, [pc, #308]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d1f0      	bne.n	800ae2a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae48:	4b4a      	ldr	r3, [pc, #296]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800ae4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae4c:	4b4a      	ldr	r3, [pc, #296]	@ (800af78 <HAL_RCC_OscConfig+0x6c8>)
 800ae4e:	4013      	ands	r3, r2
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ae58:	0112      	lsls	r2, r2, #4
 800ae5a:	430a      	orrs	r2, r1
 800ae5c:	4945      	ldr	r1, [pc, #276]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	628b      	str	r3, [r1, #40]	@ 0x28
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae66:	3b01      	subs	r3, #1
 800ae68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae70:	3b01      	subs	r3, #1
 800ae72:	025b      	lsls	r3, r3, #9
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	431a      	orrs	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	041b      	lsls	r3, r3, #16
 800ae80:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ae84:	431a      	orrs	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	061b      	lsls	r3, r3, #24
 800ae8e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ae92:	4938      	ldr	r1, [pc, #224]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800ae94:	4313      	orrs	r3, r2
 800ae96:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ae98:	4b36      	ldr	r3, [pc, #216]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800ae9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae9c:	4a35      	ldr	r2, [pc, #212]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800ae9e:	f023 0301 	bic.w	r3, r3, #1
 800aea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aea4:	4b33      	ldr	r3, [pc, #204]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800aea6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aea8:	4b34      	ldr	r3, [pc, #208]	@ (800af7c <HAL_RCC_OscConfig+0x6cc>)
 800aeaa:	4013      	ands	r3, r2
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800aeb0:	00d2      	lsls	r2, r2, #3
 800aeb2:	4930      	ldr	r1, [pc, #192]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aeb8:	4b2e      	ldr	r3, [pc, #184]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800aeba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aebc:	f023 020c 	bic.w	r2, r3, #12
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aec4:	492b      	ldr	r1, [pc, #172]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800aec6:	4313      	orrs	r3, r2
 800aec8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800aeca:	4b2a      	ldr	r3, [pc, #168]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800aecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aece:	f023 0202 	bic.w	r2, r3, #2
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aed6:	4927      	ldr	r1, [pc, #156]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800aed8:	4313      	orrs	r3, r2
 800aeda:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aedc:	4b25      	ldr	r3, [pc, #148]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800aede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee0:	4a24      	ldr	r2, [pc, #144]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800aee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aee8:	4b22      	ldr	r3, [pc, #136]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800aeea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeec:	4a21      	ldr	r2, [pc, #132]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800aeee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800aef4:	4b1f      	ldr	r3, [pc, #124]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800aef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef8:	4a1e      	ldr	r2, [pc, #120]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800aefa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800aefe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800af00:	4b1c      	ldr	r3, [pc, #112]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800af02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af04:	4a1b      	ldr	r2, [pc, #108]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800af06:	f043 0301 	orr.w	r3, r3, #1
 800af0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af0c:	4b19      	ldr	r3, [pc, #100]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a18      	ldr	r2, [pc, #96]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800af12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800af16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af18:	f7f9 fa1a 	bl	8004350 <HAL_GetTick>
 800af1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af1e:	e008      	b.n	800af32 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af20:	f7f9 fa16 	bl	8004350 <HAL_GetTick>
 800af24:	4602      	mov	r2, r0
 800af26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	2b02      	cmp	r3, #2
 800af2c:	d901      	bls.n	800af32 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800af2e:	2303      	movs	r3, #3
 800af30:	e090      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af32:	4b10      	ldr	r3, [pc, #64]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d0f0      	beq.n	800af20 <HAL_RCC_OscConfig+0x670>
 800af3e:	e088      	b.n	800b052 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af40:	4b0c      	ldr	r3, [pc, #48]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a0b      	ldr	r2, [pc, #44]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800af46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af4c:	f7f9 fa00 	bl	8004350 <HAL_GetTick>
 800af50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af52:	e008      	b.n	800af66 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af54:	f7f9 f9fc 	bl	8004350 <HAL_GetTick>
 800af58:	4602      	mov	r2, r0
 800af5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5c:	1ad3      	subs	r3, r2, r3
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d901      	bls.n	800af66 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800af62:	2303      	movs	r3, #3
 800af64:	e076      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af66:	4b03      	ldr	r3, [pc, #12]	@ (800af74 <HAL_RCC_OscConfig+0x6c4>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1f0      	bne.n	800af54 <HAL_RCC_OscConfig+0x6a4>
 800af72:	e06e      	b.n	800b052 <HAL_RCC_OscConfig+0x7a2>
 800af74:	58024400 	.word	0x58024400
 800af78:	fffffc0c 	.word	0xfffffc0c
 800af7c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800af80:	4b36      	ldr	r3, [pc, #216]	@ (800b05c <HAL_RCC_OscConfig+0x7ac>)
 800af82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af84:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800af86:	4b35      	ldr	r3, [pc, #212]	@ (800b05c <HAL_RCC_OscConfig+0x7ac>)
 800af88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af8a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af90:	2b01      	cmp	r3, #1
 800af92:	d031      	beq.n	800aff8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	f003 0203 	and.w	r2, r3, #3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d12a      	bne.n	800aff8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	091b      	lsrs	r3, r3, #4
 800afa6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afae:	429a      	cmp	r2, r3
 800afb0:	d122      	bne.n	800aff8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d11a      	bne.n	800aff8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	0a5b      	lsrs	r3, r3, #9
 800afc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d111      	bne.n	800aff8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	0c1b      	lsrs	r3, r3, #16
 800afd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afe0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d108      	bne.n	800aff8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	0e1b      	lsrs	r3, r3, #24
 800afea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aff2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d001      	beq.n	800affc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e02b      	b.n	800b054 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800affc:	4b17      	ldr	r3, [pc, #92]	@ (800b05c <HAL_RCC_OscConfig+0x7ac>)
 800affe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b000:	08db      	lsrs	r3, r3, #3
 800b002:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b006:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b00c:	693a      	ldr	r2, [r7, #16]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d01f      	beq.n	800b052 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b012:	4b12      	ldr	r3, [pc, #72]	@ (800b05c <HAL_RCC_OscConfig+0x7ac>)
 800b014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b016:	4a11      	ldr	r2, [pc, #68]	@ (800b05c <HAL_RCC_OscConfig+0x7ac>)
 800b018:	f023 0301 	bic.w	r3, r3, #1
 800b01c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b01e:	f7f9 f997 	bl	8004350 <HAL_GetTick>
 800b022:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b024:	bf00      	nop
 800b026:	f7f9 f993 	bl	8004350 <HAL_GetTick>
 800b02a:	4602      	mov	r2, r0
 800b02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b02e:	4293      	cmp	r3, r2
 800b030:	d0f9      	beq.n	800b026 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b032:	4b0a      	ldr	r3, [pc, #40]	@ (800b05c <HAL_RCC_OscConfig+0x7ac>)
 800b034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b036:	4b0a      	ldr	r3, [pc, #40]	@ (800b060 <HAL_RCC_OscConfig+0x7b0>)
 800b038:	4013      	ands	r3, r2
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b03e:	00d2      	lsls	r2, r2, #3
 800b040:	4906      	ldr	r1, [pc, #24]	@ (800b05c <HAL_RCC_OscConfig+0x7ac>)
 800b042:	4313      	orrs	r3, r2
 800b044:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b046:	4b05      	ldr	r3, [pc, #20]	@ (800b05c <HAL_RCC_OscConfig+0x7ac>)
 800b048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b04a:	4a04      	ldr	r2, [pc, #16]	@ (800b05c <HAL_RCC_OscConfig+0x7ac>)
 800b04c:	f043 0301 	orr.w	r3, r3, #1
 800b050:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3730      	adds	r7, #48	@ 0x30
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	58024400 	.word	0x58024400
 800b060:	ffff0007 	.word	0xffff0007

0800b064 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	e19c      	b.n	800b3b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b078:	4b8a      	ldr	r3, [pc, #552]	@ (800b2a4 <HAL_RCC_ClockConfig+0x240>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f003 030f 	and.w	r3, r3, #15
 800b080:	683a      	ldr	r2, [r7, #0]
 800b082:	429a      	cmp	r2, r3
 800b084:	d910      	bls.n	800b0a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b086:	4b87      	ldr	r3, [pc, #540]	@ (800b2a4 <HAL_RCC_ClockConfig+0x240>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f023 020f 	bic.w	r2, r3, #15
 800b08e:	4985      	ldr	r1, [pc, #532]	@ (800b2a4 <HAL_RCC_ClockConfig+0x240>)
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	4313      	orrs	r3, r2
 800b094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b096:	4b83      	ldr	r3, [pc, #524]	@ (800b2a4 <HAL_RCC_ClockConfig+0x240>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 030f 	and.w	r3, r3, #15
 800b09e:	683a      	ldr	r2, [r7, #0]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d001      	beq.n	800b0a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	e184      	b.n	800b3b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 0304 	and.w	r3, r3, #4
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d010      	beq.n	800b0d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	691a      	ldr	r2, [r3, #16]
 800b0b8:	4b7b      	ldr	r3, [pc, #492]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b0ba:	699b      	ldr	r3, [r3, #24]
 800b0bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d908      	bls.n	800b0d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b0c4:	4b78      	ldr	r3, [pc, #480]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	691b      	ldr	r3, [r3, #16]
 800b0d0:	4975      	ldr	r1, [pc, #468]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 0308 	and.w	r3, r3, #8
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d010      	beq.n	800b104 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	695a      	ldr	r2, [r3, #20]
 800b0e6:	4b70      	ldr	r3, [pc, #448]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b0e8:	69db      	ldr	r3, [r3, #28]
 800b0ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d908      	bls.n	800b104 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b0f2:	4b6d      	ldr	r3, [pc, #436]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b0f4:	69db      	ldr	r3, [r3, #28]
 800b0f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	695b      	ldr	r3, [r3, #20]
 800b0fe:	496a      	ldr	r1, [pc, #424]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b100:	4313      	orrs	r3, r2
 800b102:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 0310 	and.w	r3, r3, #16
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d010      	beq.n	800b132 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	699a      	ldr	r2, [r3, #24]
 800b114:	4b64      	ldr	r3, [pc, #400]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b116:	69db      	ldr	r3, [r3, #28]
 800b118:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d908      	bls.n	800b132 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b120:	4b61      	ldr	r3, [pc, #388]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b122:	69db      	ldr	r3, [r3, #28]
 800b124:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	699b      	ldr	r3, [r3, #24]
 800b12c:	495e      	ldr	r1, [pc, #376]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b12e:	4313      	orrs	r3, r2
 800b130:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f003 0320 	and.w	r3, r3, #32
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d010      	beq.n	800b160 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	69da      	ldr	r2, [r3, #28]
 800b142:	4b59      	ldr	r3, [pc, #356]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b144:	6a1b      	ldr	r3, [r3, #32]
 800b146:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d908      	bls.n	800b160 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b14e:	4b56      	ldr	r3, [pc, #344]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b150:	6a1b      	ldr	r3, [r3, #32]
 800b152:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	69db      	ldr	r3, [r3, #28]
 800b15a:	4953      	ldr	r1, [pc, #332]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b15c:	4313      	orrs	r3, r2
 800b15e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f003 0302 	and.w	r3, r3, #2
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d010      	beq.n	800b18e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	68da      	ldr	r2, [r3, #12]
 800b170:	4b4d      	ldr	r3, [pc, #308]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b172:	699b      	ldr	r3, [r3, #24]
 800b174:	f003 030f 	and.w	r3, r3, #15
 800b178:	429a      	cmp	r2, r3
 800b17a:	d908      	bls.n	800b18e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b17c:	4b4a      	ldr	r3, [pc, #296]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b17e:	699b      	ldr	r3, [r3, #24]
 800b180:	f023 020f 	bic.w	r2, r3, #15
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	4947      	ldr	r1, [pc, #284]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b18a:	4313      	orrs	r3, r2
 800b18c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 0301 	and.w	r3, r3, #1
 800b196:	2b00      	cmp	r3, #0
 800b198:	d055      	beq.n	800b246 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b19a:	4b43      	ldr	r3, [pc, #268]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b19c:	699b      	ldr	r3, [r3, #24]
 800b19e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	4940      	ldr	r1, [pc, #256]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	2b02      	cmp	r3, #2
 800b1b2:	d107      	bne.n	800b1c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b1b4:	4b3c      	ldr	r3, [pc, #240]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d121      	bne.n	800b204 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e0f6      	b.n	800b3b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	2b03      	cmp	r3, #3
 800b1ca:	d107      	bne.n	800b1dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b1cc:	4b36      	ldr	r3, [pc, #216]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d115      	bne.n	800b204 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	e0ea      	b.n	800b3b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d107      	bne.n	800b1f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b1e4:	4b30      	ldr	r3, [pc, #192]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d109      	bne.n	800b204 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e0de      	b.n	800b3b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b1f4:	4b2c      	ldr	r3, [pc, #176]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 0304 	and.w	r3, r3, #4
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d101      	bne.n	800b204 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	e0d6      	b.n	800b3b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b204:	4b28      	ldr	r3, [pc, #160]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	f023 0207 	bic.w	r2, r3, #7
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	4925      	ldr	r1, [pc, #148]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b212:	4313      	orrs	r3, r2
 800b214:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b216:	f7f9 f89b 	bl	8004350 <HAL_GetTick>
 800b21a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b21c:	e00a      	b.n	800b234 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b21e:	f7f9 f897 	bl	8004350 <HAL_GetTick>
 800b222:	4602      	mov	r2, r0
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	1ad3      	subs	r3, r2, r3
 800b228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d901      	bls.n	800b234 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b230:	2303      	movs	r3, #3
 800b232:	e0be      	b.n	800b3b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b234:	4b1c      	ldr	r3, [pc, #112]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b236:	691b      	ldr	r3, [r3, #16]
 800b238:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	00db      	lsls	r3, r3, #3
 800b242:	429a      	cmp	r2, r3
 800b244:	d1eb      	bne.n	800b21e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f003 0302 	and.w	r3, r3, #2
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d010      	beq.n	800b274 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	68da      	ldr	r2, [r3, #12]
 800b256:	4b14      	ldr	r3, [pc, #80]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b258:	699b      	ldr	r3, [r3, #24]
 800b25a:	f003 030f 	and.w	r3, r3, #15
 800b25e:	429a      	cmp	r2, r3
 800b260:	d208      	bcs.n	800b274 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b262:	4b11      	ldr	r3, [pc, #68]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b264:	699b      	ldr	r3, [r3, #24]
 800b266:	f023 020f 	bic.w	r2, r3, #15
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	490e      	ldr	r1, [pc, #56]	@ (800b2a8 <HAL_RCC_ClockConfig+0x244>)
 800b270:	4313      	orrs	r3, r2
 800b272:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b274:	4b0b      	ldr	r3, [pc, #44]	@ (800b2a4 <HAL_RCC_ClockConfig+0x240>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 030f 	and.w	r3, r3, #15
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d214      	bcs.n	800b2ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b282:	4b08      	ldr	r3, [pc, #32]	@ (800b2a4 <HAL_RCC_ClockConfig+0x240>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f023 020f 	bic.w	r2, r3, #15
 800b28a:	4906      	ldr	r1, [pc, #24]	@ (800b2a4 <HAL_RCC_ClockConfig+0x240>)
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	4313      	orrs	r3, r2
 800b290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b292:	4b04      	ldr	r3, [pc, #16]	@ (800b2a4 <HAL_RCC_ClockConfig+0x240>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f003 030f 	and.w	r3, r3, #15
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d005      	beq.n	800b2ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e086      	b.n	800b3b2 <HAL_RCC_ClockConfig+0x34e>
 800b2a4:	52002000 	.word	0x52002000
 800b2a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d010      	beq.n	800b2da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	691a      	ldr	r2, [r3, #16]
 800b2bc:	4b3f      	ldr	r3, [pc, #252]	@ (800b3bc <HAL_RCC_ClockConfig+0x358>)
 800b2be:	699b      	ldr	r3, [r3, #24]
 800b2c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d208      	bcs.n	800b2da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b2c8:	4b3c      	ldr	r3, [pc, #240]	@ (800b3bc <HAL_RCC_ClockConfig+0x358>)
 800b2ca:	699b      	ldr	r3, [r3, #24]
 800b2cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	4939      	ldr	r1, [pc, #228]	@ (800b3bc <HAL_RCC_ClockConfig+0x358>)
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f003 0308 	and.w	r3, r3, #8
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d010      	beq.n	800b308 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	695a      	ldr	r2, [r3, #20]
 800b2ea:	4b34      	ldr	r3, [pc, #208]	@ (800b3bc <HAL_RCC_ClockConfig+0x358>)
 800b2ec:	69db      	ldr	r3, [r3, #28]
 800b2ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d208      	bcs.n	800b308 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b2f6:	4b31      	ldr	r3, [pc, #196]	@ (800b3bc <HAL_RCC_ClockConfig+0x358>)
 800b2f8:	69db      	ldr	r3, [r3, #28]
 800b2fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	492e      	ldr	r1, [pc, #184]	@ (800b3bc <HAL_RCC_ClockConfig+0x358>)
 800b304:	4313      	orrs	r3, r2
 800b306:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 0310 	and.w	r3, r3, #16
 800b310:	2b00      	cmp	r3, #0
 800b312:	d010      	beq.n	800b336 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	699a      	ldr	r2, [r3, #24]
 800b318:	4b28      	ldr	r3, [pc, #160]	@ (800b3bc <HAL_RCC_ClockConfig+0x358>)
 800b31a:	69db      	ldr	r3, [r3, #28]
 800b31c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b320:	429a      	cmp	r2, r3
 800b322:	d208      	bcs.n	800b336 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b324:	4b25      	ldr	r3, [pc, #148]	@ (800b3bc <HAL_RCC_ClockConfig+0x358>)
 800b326:	69db      	ldr	r3, [r3, #28]
 800b328:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	699b      	ldr	r3, [r3, #24]
 800b330:	4922      	ldr	r1, [pc, #136]	@ (800b3bc <HAL_RCC_ClockConfig+0x358>)
 800b332:	4313      	orrs	r3, r2
 800b334:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f003 0320 	and.w	r3, r3, #32
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d010      	beq.n	800b364 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	69da      	ldr	r2, [r3, #28]
 800b346:	4b1d      	ldr	r3, [pc, #116]	@ (800b3bc <HAL_RCC_ClockConfig+0x358>)
 800b348:	6a1b      	ldr	r3, [r3, #32]
 800b34a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b34e:	429a      	cmp	r2, r3
 800b350:	d208      	bcs.n	800b364 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b352:	4b1a      	ldr	r3, [pc, #104]	@ (800b3bc <HAL_RCC_ClockConfig+0x358>)
 800b354:	6a1b      	ldr	r3, [r3, #32]
 800b356:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	69db      	ldr	r3, [r3, #28]
 800b35e:	4917      	ldr	r1, [pc, #92]	@ (800b3bc <HAL_RCC_ClockConfig+0x358>)
 800b360:	4313      	orrs	r3, r2
 800b362:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b364:	f000 f834 	bl	800b3d0 <HAL_RCC_GetSysClockFreq>
 800b368:	4602      	mov	r2, r0
 800b36a:	4b14      	ldr	r3, [pc, #80]	@ (800b3bc <HAL_RCC_ClockConfig+0x358>)
 800b36c:	699b      	ldr	r3, [r3, #24]
 800b36e:	0a1b      	lsrs	r3, r3, #8
 800b370:	f003 030f 	and.w	r3, r3, #15
 800b374:	4912      	ldr	r1, [pc, #72]	@ (800b3c0 <HAL_RCC_ClockConfig+0x35c>)
 800b376:	5ccb      	ldrb	r3, [r1, r3]
 800b378:	f003 031f 	and.w	r3, r3, #31
 800b37c:	fa22 f303 	lsr.w	r3, r2, r3
 800b380:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b382:	4b0e      	ldr	r3, [pc, #56]	@ (800b3bc <HAL_RCC_ClockConfig+0x358>)
 800b384:	699b      	ldr	r3, [r3, #24]
 800b386:	f003 030f 	and.w	r3, r3, #15
 800b38a:	4a0d      	ldr	r2, [pc, #52]	@ (800b3c0 <HAL_RCC_ClockConfig+0x35c>)
 800b38c:	5cd3      	ldrb	r3, [r2, r3]
 800b38e:	f003 031f 	and.w	r3, r3, #31
 800b392:	693a      	ldr	r2, [r7, #16]
 800b394:	fa22 f303 	lsr.w	r3, r2, r3
 800b398:	4a0a      	ldr	r2, [pc, #40]	@ (800b3c4 <HAL_RCC_ClockConfig+0x360>)
 800b39a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b39c:	4a0a      	ldr	r2, [pc, #40]	@ (800b3c8 <HAL_RCC_ClockConfig+0x364>)
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b3a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b3cc <HAL_RCC_ClockConfig+0x368>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7f8 ff88 	bl	80042bc <HAL_InitTick>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3718      	adds	r7, #24
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	58024400 	.word	0x58024400
 800b3c0:	08014318 	.word	0x08014318
 800b3c4:	2400003c 	.word	0x2400003c
 800b3c8:	24000038 	.word	0x24000038
 800b3cc:	24000040 	.word	0x24000040

0800b3d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b089      	sub	sp, #36	@ 0x24
 800b3d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3d6:	4bb3      	ldr	r3, [pc, #716]	@ (800b6a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b3de:	2b18      	cmp	r3, #24
 800b3e0:	f200 8155 	bhi.w	800b68e <HAL_RCC_GetSysClockFreq+0x2be>
 800b3e4:	a201      	add	r2, pc, #4	@ (adr r2, 800b3ec <HAL_RCC_GetSysClockFreq+0x1c>)
 800b3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ea:	bf00      	nop
 800b3ec:	0800b451 	.word	0x0800b451
 800b3f0:	0800b68f 	.word	0x0800b68f
 800b3f4:	0800b68f 	.word	0x0800b68f
 800b3f8:	0800b68f 	.word	0x0800b68f
 800b3fc:	0800b68f 	.word	0x0800b68f
 800b400:	0800b68f 	.word	0x0800b68f
 800b404:	0800b68f 	.word	0x0800b68f
 800b408:	0800b68f 	.word	0x0800b68f
 800b40c:	0800b477 	.word	0x0800b477
 800b410:	0800b68f 	.word	0x0800b68f
 800b414:	0800b68f 	.word	0x0800b68f
 800b418:	0800b68f 	.word	0x0800b68f
 800b41c:	0800b68f 	.word	0x0800b68f
 800b420:	0800b68f 	.word	0x0800b68f
 800b424:	0800b68f 	.word	0x0800b68f
 800b428:	0800b68f 	.word	0x0800b68f
 800b42c:	0800b47d 	.word	0x0800b47d
 800b430:	0800b68f 	.word	0x0800b68f
 800b434:	0800b68f 	.word	0x0800b68f
 800b438:	0800b68f 	.word	0x0800b68f
 800b43c:	0800b68f 	.word	0x0800b68f
 800b440:	0800b68f 	.word	0x0800b68f
 800b444:	0800b68f 	.word	0x0800b68f
 800b448:	0800b68f 	.word	0x0800b68f
 800b44c:	0800b483 	.word	0x0800b483
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b450:	4b94      	ldr	r3, [pc, #592]	@ (800b6a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 0320 	and.w	r3, r3, #32
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d009      	beq.n	800b470 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b45c:	4b91      	ldr	r3, [pc, #580]	@ (800b6a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	08db      	lsrs	r3, r3, #3
 800b462:	f003 0303 	and.w	r3, r3, #3
 800b466:	4a90      	ldr	r2, [pc, #576]	@ (800b6a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b468:	fa22 f303 	lsr.w	r3, r2, r3
 800b46c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b46e:	e111      	b.n	800b694 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b470:	4b8d      	ldr	r3, [pc, #564]	@ (800b6a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b472:	61bb      	str	r3, [r7, #24]
      break;
 800b474:	e10e      	b.n	800b694 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b476:	4b8d      	ldr	r3, [pc, #564]	@ (800b6ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b478:	61bb      	str	r3, [r7, #24]
      break;
 800b47a:	e10b      	b.n	800b694 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b47c:	4b8c      	ldr	r3, [pc, #560]	@ (800b6b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b47e:	61bb      	str	r3, [r7, #24]
      break;
 800b480:	e108      	b.n	800b694 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b482:	4b88      	ldr	r3, [pc, #544]	@ (800b6a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b486:	f003 0303 	and.w	r3, r3, #3
 800b48a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b48c:	4b85      	ldr	r3, [pc, #532]	@ (800b6a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b48e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b490:	091b      	lsrs	r3, r3, #4
 800b492:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b496:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b498:	4b82      	ldr	r3, [pc, #520]	@ (800b6a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b49c:	f003 0301 	and.w	r3, r3, #1
 800b4a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b4a2:	4b80      	ldr	r3, [pc, #512]	@ (800b6a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4a6:	08db      	lsrs	r3, r3, #3
 800b4a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	fb02 f303 	mul.w	r3, r2, r3
 800b4b2:	ee07 3a90 	vmov	s15, r3
 800b4b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f000 80e1 	beq.w	800b688 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	f000 8083 	beq.w	800b5d4 <HAL_RCC_GetSysClockFreq+0x204>
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	f200 80a1 	bhi.w	800b618 <HAL_RCC_GetSysClockFreq+0x248>
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d003      	beq.n	800b4e4 <HAL_RCC_GetSysClockFreq+0x114>
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d056      	beq.n	800b590 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b4e2:	e099      	b.n	800b618 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4e4:	4b6f      	ldr	r3, [pc, #444]	@ (800b6a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 0320 	and.w	r3, r3, #32
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d02d      	beq.n	800b54c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4f0:	4b6c      	ldr	r3, [pc, #432]	@ (800b6a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	08db      	lsrs	r3, r3, #3
 800b4f6:	f003 0303 	and.w	r3, r3, #3
 800b4fa:	4a6b      	ldr	r2, [pc, #428]	@ (800b6a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b4fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b500:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	ee07 3a90 	vmov	s15, r3
 800b508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	ee07 3a90 	vmov	s15, r3
 800b512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b51a:	4b62      	ldr	r3, [pc, #392]	@ (800b6a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b51c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b51e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b522:	ee07 3a90 	vmov	s15, r3
 800b526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b52a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b52e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b6b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b53a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b53e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b542:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b546:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b54a:	e087      	b.n	800b65c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	ee07 3a90 	vmov	s15, r3
 800b552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b556:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b6b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b55a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b55e:	4b51      	ldr	r3, [pc, #324]	@ (800b6a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b566:	ee07 3a90 	vmov	s15, r3
 800b56a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b56e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b572:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b6b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b57a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b57e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b58a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b58e:	e065      	b.n	800b65c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	ee07 3a90 	vmov	s15, r3
 800b596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b59a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b6bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800b59e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5a2:	4b40      	ldr	r3, [pc, #256]	@ (800b6a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5aa:	ee07 3a90 	vmov	s15, r3
 800b5ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5b6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b6b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b5d2:	e043      	b.n	800b65c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	ee07 3a90 	vmov	s15, r3
 800b5da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5de:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b6c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b5e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5e6:	4b2f      	ldr	r3, [pc, #188]	@ (800b6a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ee:	ee07 3a90 	vmov	s15, r3
 800b5f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5fa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b6b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b606:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b60a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b60e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b612:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b616:	e021      	b.n	800b65c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	ee07 3a90 	vmov	s15, r3
 800b61e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b622:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b6bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800b626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b62a:	4b1e      	ldr	r3, [pc, #120]	@ (800b6a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b62c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b62e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b632:	ee07 3a90 	vmov	s15, r3
 800b636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b63a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b63e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b6b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b64a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b64e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b652:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b656:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b65a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b65c:	4b11      	ldr	r3, [pc, #68]	@ (800b6a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b65e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b660:	0a5b      	lsrs	r3, r3, #9
 800b662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b666:	3301      	adds	r3, #1
 800b668:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	ee07 3a90 	vmov	s15, r3
 800b670:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b674:	edd7 6a07 	vldr	s13, [r7, #28]
 800b678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b67c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b680:	ee17 3a90 	vmov	r3, s15
 800b684:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b686:	e005      	b.n	800b694 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b688:	2300      	movs	r3, #0
 800b68a:	61bb      	str	r3, [r7, #24]
      break;
 800b68c:	e002      	b.n	800b694 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b68e:	4b07      	ldr	r3, [pc, #28]	@ (800b6ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b690:	61bb      	str	r3, [r7, #24]
      break;
 800b692:	bf00      	nop
  }

  return sysclockfreq;
 800b694:	69bb      	ldr	r3, [r7, #24]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3724      	adds	r7, #36	@ 0x24
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	58024400 	.word	0x58024400
 800b6a8:	03d09000 	.word	0x03d09000
 800b6ac:	003d0900 	.word	0x003d0900
 800b6b0:	007a1200 	.word	0x007a1200
 800b6b4:	46000000 	.word	0x46000000
 800b6b8:	4c742400 	.word	0x4c742400
 800b6bc:	4a742400 	.word	0x4a742400
 800b6c0:	4af42400 	.word	0x4af42400

0800b6c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b6ca:	f7ff fe81 	bl	800b3d0 <HAL_RCC_GetSysClockFreq>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	4b10      	ldr	r3, [pc, #64]	@ (800b714 <HAL_RCC_GetHCLKFreq+0x50>)
 800b6d2:	699b      	ldr	r3, [r3, #24]
 800b6d4:	0a1b      	lsrs	r3, r3, #8
 800b6d6:	f003 030f 	and.w	r3, r3, #15
 800b6da:	490f      	ldr	r1, [pc, #60]	@ (800b718 <HAL_RCC_GetHCLKFreq+0x54>)
 800b6dc:	5ccb      	ldrb	r3, [r1, r3]
 800b6de:	f003 031f 	and.w	r3, r3, #31
 800b6e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b6e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6e8:	4b0a      	ldr	r3, [pc, #40]	@ (800b714 <HAL_RCC_GetHCLKFreq+0x50>)
 800b6ea:	699b      	ldr	r3, [r3, #24]
 800b6ec:	f003 030f 	and.w	r3, r3, #15
 800b6f0:	4a09      	ldr	r2, [pc, #36]	@ (800b718 <HAL_RCC_GetHCLKFreq+0x54>)
 800b6f2:	5cd3      	ldrb	r3, [r2, r3]
 800b6f4:	f003 031f 	and.w	r3, r3, #31
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b6fe:	4a07      	ldr	r2, [pc, #28]	@ (800b71c <HAL_RCC_GetHCLKFreq+0x58>)
 800b700:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b702:	4a07      	ldr	r2, [pc, #28]	@ (800b720 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b708:	4b04      	ldr	r3, [pc, #16]	@ (800b71c <HAL_RCC_GetHCLKFreq+0x58>)
 800b70a:	681b      	ldr	r3, [r3, #0]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	58024400 	.word	0x58024400
 800b718:	08014318 	.word	0x08014318
 800b71c:	2400003c 	.word	0x2400003c
 800b720:	24000038 	.word	0x24000038

0800b724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b728:	f7ff ffcc 	bl	800b6c4 <HAL_RCC_GetHCLKFreq>
 800b72c:	4602      	mov	r2, r0
 800b72e:	4b06      	ldr	r3, [pc, #24]	@ (800b748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b730:	69db      	ldr	r3, [r3, #28]
 800b732:	091b      	lsrs	r3, r3, #4
 800b734:	f003 0307 	and.w	r3, r3, #7
 800b738:	4904      	ldr	r1, [pc, #16]	@ (800b74c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b73a:	5ccb      	ldrb	r3, [r1, r3]
 800b73c:	f003 031f 	and.w	r3, r3, #31
 800b740:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b744:	4618      	mov	r0, r3
 800b746:	bd80      	pop	{r7, pc}
 800b748:	58024400 	.word	0x58024400
 800b74c:	08014318 	.word	0x08014318

0800b750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b754:	f7ff ffb6 	bl	800b6c4 <HAL_RCC_GetHCLKFreq>
 800b758:	4602      	mov	r2, r0
 800b75a:	4b06      	ldr	r3, [pc, #24]	@ (800b774 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b75c:	69db      	ldr	r3, [r3, #28]
 800b75e:	0a1b      	lsrs	r3, r3, #8
 800b760:	f003 0307 	and.w	r3, r3, #7
 800b764:	4904      	ldr	r1, [pc, #16]	@ (800b778 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b766:	5ccb      	ldrb	r3, [r1, r3]
 800b768:	f003 031f 	and.w	r3, r3, #31
 800b76c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b770:	4618      	mov	r0, r3
 800b772:	bd80      	pop	{r7, pc}
 800b774:	58024400 	.word	0x58024400
 800b778:	08014318 	.word	0x08014318

0800b77c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b77c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b780:	b0c6      	sub	sp, #280	@ 0x118
 800b782:	af00      	add	r7, sp, #0
 800b784:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b788:	2300      	movs	r3, #0
 800b78a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b78e:	2300      	movs	r3, #0
 800b790:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b7a0:	2500      	movs	r5, #0
 800b7a2:	ea54 0305 	orrs.w	r3, r4, r5
 800b7a6:	d049      	beq.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b7b2:	d02f      	beq.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b7b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b7b8:	d828      	bhi.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b7ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b7be:	d01a      	beq.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b7c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b7c4:	d822      	bhi.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d003      	beq.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b7ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7ce:	d007      	beq.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b7d0:	e01c      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7d2:	4bab      	ldr	r3, [pc, #684]	@ (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d6:	4aaa      	ldr	r2, [pc, #680]	@ (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b7de:	e01a      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7e4:	3308      	adds	r3, #8
 800b7e6:	2102      	movs	r1, #2
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f002 fa49 	bl	800dc80 <RCCEx_PLL2_Config>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b7f4:	e00f      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7fa:	3328      	adds	r3, #40	@ 0x28
 800b7fc:	2102      	movs	r1, #2
 800b7fe:	4618      	mov	r0, r3
 800b800:	f002 faf0 	bl	800dde4 <RCCEx_PLL3_Config>
 800b804:	4603      	mov	r3, r0
 800b806:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b80a:	e004      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b812:	e000      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b814:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b816:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10a      	bne.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b81e:	4b98      	ldr	r3, [pc, #608]	@ (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b822:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b82a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b82c:	4a94      	ldr	r2, [pc, #592]	@ (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b82e:	430b      	orrs	r3, r1
 800b830:	6513      	str	r3, [r2, #80]	@ 0x50
 800b832:	e003      	b.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b834:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b838:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b844:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b848:	f04f 0900 	mov.w	r9, #0
 800b84c:	ea58 0309 	orrs.w	r3, r8, r9
 800b850:	d047      	beq.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b858:	2b04      	cmp	r3, #4
 800b85a:	d82a      	bhi.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b85c:	a201      	add	r2, pc, #4	@ (adr r2, 800b864 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b862:	bf00      	nop
 800b864:	0800b879 	.word	0x0800b879
 800b868:	0800b887 	.word	0x0800b887
 800b86c:	0800b89d 	.word	0x0800b89d
 800b870:	0800b8bb 	.word	0x0800b8bb
 800b874:	0800b8bb 	.word	0x0800b8bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b878:	4b81      	ldr	r3, [pc, #516]	@ (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b87c:	4a80      	ldr	r2, [pc, #512]	@ (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b87e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b884:	e01a      	b.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b88a:	3308      	adds	r3, #8
 800b88c:	2100      	movs	r1, #0
 800b88e:	4618      	mov	r0, r3
 800b890:	f002 f9f6 	bl	800dc80 <RCCEx_PLL2_Config>
 800b894:	4603      	mov	r3, r0
 800b896:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b89a:	e00f      	b.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b89c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8a0:	3328      	adds	r3, #40	@ 0x28
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f002 fa9d 	bl	800dde4 <RCCEx_PLL3_Config>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b8b0:	e004      	b.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b8b8:	e000      	b.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b8ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10a      	bne.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b8c4:	4b6e      	ldr	r3, [pc, #440]	@ (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8c8:	f023 0107 	bic.w	r1, r3, #7
 800b8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8d2:	4a6b      	ldr	r2, [pc, #428]	@ (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8d4:	430b      	orrs	r3, r1
 800b8d6:	6513      	str	r3, [r2, #80]	@ 0x50
 800b8d8:	e003      	b.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b8de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ea:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800b8ee:	f04f 0b00 	mov.w	fp, #0
 800b8f2:	ea5a 030b 	orrs.w	r3, sl, fp
 800b8f6:	d05b      	beq.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b900:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b904:	d03b      	beq.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b906:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b90a:	d834      	bhi.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b90c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b910:	d037      	beq.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b912:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b916:	d82e      	bhi.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b918:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b91c:	d033      	beq.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b91e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b922:	d828      	bhi.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b924:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b928:	d01a      	beq.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b92a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b92e:	d822      	bhi.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b930:	2b00      	cmp	r3, #0
 800b932:	d003      	beq.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b934:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b938:	d007      	beq.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b93a:	e01c      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b93c:	4b50      	ldr	r3, [pc, #320]	@ (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b93e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b940:	4a4f      	ldr	r2, [pc, #316]	@ (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b948:	e01e      	b.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b94a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b94e:	3308      	adds	r3, #8
 800b950:	2100      	movs	r1, #0
 800b952:	4618      	mov	r0, r3
 800b954:	f002 f994 	bl	800dc80 <RCCEx_PLL2_Config>
 800b958:	4603      	mov	r3, r0
 800b95a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b95e:	e013      	b.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b964:	3328      	adds	r3, #40	@ 0x28
 800b966:	2100      	movs	r1, #0
 800b968:	4618      	mov	r0, r3
 800b96a:	f002 fa3b 	bl	800dde4 <RCCEx_PLL3_Config>
 800b96e:	4603      	mov	r3, r0
 800b970:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b974:	e008      	b.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b976:	2301      	movs	r3, #1
 800b978:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b97c:	e004      	b.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b97e:	bf00      	nop
 800b980:	e002      	b.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b982:	bf00      	nop
 800b984:	e000      	b.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b986:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b988:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10b      	bne.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b990:	4b3b      	ldr	r3, [pc, #236]	@ (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b994:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800b998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b99c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b9a0:	4a37      	ldr	r2, [pc, #220]	@ (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9a2:	430b      	orrs	r3, r1
 800b9a4:	6593      	str	r3, [r2, #88]	@ 0x58
 800b9a6:	e003      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b9bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b9c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	d05d      	beq.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b9d8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b9dc:	d03b      	beq.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b9de:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b9e2:	d834      	bhi.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b9e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b9e8:	d037      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b9ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b9ee:	d82e      	bhi.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b9f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b9f4:	d033      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b9f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b9fa:	d828      	bhi.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b9fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba00:	d01a      	beq.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800ba02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba06:	d822      	bhi.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d003      	beq.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ba0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba10:	d007      	beq.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ba12:	e01c      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba14:	4b1a      	ldr	r3, [pc, #104]	@ (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba18:	4a19      	ldr	r2, [pc, #100]	@ (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba20:	e01e      	b.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba26:	3308      	adds	r3, #8
 800ba28:	2100      	movs	r1, #0
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f002 f928 	bl	800dc80 <RCCEx_PLL2_Config>
 800ba30:	4603      	mov	r3, r0
 800ba32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ba36:	e013      	b.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba3c:	3328      	adds	r3, #40	@ 0x28
 800ba3e:	2100      	movs	r1, #0
 800ba40:	4618      	mov	r0, r3
 800ba42:	f002 f9cf 	bl	800dde4 <RCCEx_PLL3_Config>
 800ba46:	4603      	mov	r3, r0
 800ba48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba4c:	e008      	b.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ba54:	e004      	b.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ba56:	bf00      	nop
 800ba58:	e002      	b.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ba5a:	bf00      	nop
 800ba5c:	e000      	b.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ba5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10d      	bne.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ba68:	4b05      	ldr	r3, [pc, #20]	@ (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba6c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800ba70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ba78:	4a01      	ldr	r2, [pc, #4]	@ (800ba80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba7a:	430b      	orrs	r3, r1
 800ba7c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba7e:	e005      	b.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ba80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ba8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba94:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800ba98:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800baa2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800baa6:	460b      	mov	r3, r1
 800baa8:	4313      	orrs	r3, r2
 800baaa:	d03a      	beq.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800baac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bab2:	2b30      	cmp	r3, #48	@ 0x30
 800bab4:	d01f      	beq.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800bab6:	2b30      	cmp	r3, #48	@ 0x30
 800bab8:	d819      	bhi.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x372>
 800baba:	2b20      	cmp	r3, #32
 800babc:	d00c      	beq.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800babe:	2b20      	cmp	r3, #32
 800bac0:	d815      	bhi.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d019      	beq.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bac6:	2b10      	cmp	r3, #16
 800bac8:	d111      	bne.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baca:	4baa      	ldr	r3, [pc, #680]	@ (800bd74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bacc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bace:	4aa9      	ldr	r2, [pc, #676]	@ (800bd74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bad4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bad6:	e011      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800badc:	3308      	adds	r3, #8
 800bade:	2102      	movs	r1, #2
 800bae0:	4618      	mov	r0, r3
 800bae2:	f002 f8cd 	bl	800dc80 <RCCEx_PLL2_Config>
 800bae6:	4603      	mov	r3, r0
 800bae8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800baec:	e006      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800baf4:	e002      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800baf6:	bf00      	nop
 800baf8:	e000      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bafa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bafc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10a      	bne.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bb04:	4b9b      	ldr	r3, [pc, #620]	@ (800bd74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb08:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb12:	4a98      	ldr	r2, [pc, #608]	@ (800bd74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb14:	430b      	orrs	r3, r1
 800bb16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bb18:	e003      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bb22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bb2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bb32:	2300      	movs	r3, #0
 800bb34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bb38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	d051      	beq.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bb42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bb4c:	d035      	beq.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bb4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bb52:	d82e      	bhi.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bb54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bb58:	d031      	beq.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bb5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bb5e:	d828      	bhi.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bb60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb64:	d01a      	beq.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bb66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb6a:	d822      	bhi.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d003      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800bb70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb74:	d007      	beq.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800bb76:	e01c      	b.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb78:	4b7e      	ldr	r3, [pc, #504]	@ (800bd74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb7c:	4a7d      	ldr	r2, [pc, #500]	@ (800bd74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bb84:	e01c      	b.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb8a:	3308      	adds	r3, #8
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f002 f876 	bl	800dc80 <RCCEx_PLL2_Config>
 800bb94:	4603      	mov	r3, r0
 800bb96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bb9a:	e011      	b.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bba0:	3328      	adds	r3, #40	@ 0x28
 800bba2:	2100      	movs	r1, #0
 800bba4:	4618      	mov	r0, r3
 800bba6:	f002 f91d 	bl	800dde4 <RCCEx_PLL3_Config>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bbb0:	e006      	b.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bbb8:	e002      	b.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bbba:	bf00      	nop
 800bbbc:	e000      	b.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bbbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d10a      	bne.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bbc8:	4b6a      	ldr	r3, [pc, #424]	@ (800bd74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbcc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bbd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbd6:	4a67      	ldr	r2, [pc, #412]	@ (800bd74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbd8:	430b      	orrs	r3, r1
 800bbda:	6513      	str	r3, [r2, #80]	@ 0x50
 800bbdc:	e003      	b.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbe2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bbe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bbf2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bbfc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bc00:	460b      	mov	r3, r1
 800bc02:	4313      	orrs	r3, r2
 800bc04:	d053      	beq.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bc06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bc10:	d033      	beq.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bc12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bc16:	d82c      	bhi.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bc18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bc1c:	d02f      	beq.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bc1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bc22:	d826      	bhi.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bc24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bc28:	d02b      	beq.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bc2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bc2e:	d820      	bhi.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bc30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc34:	d012      	beq.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bc36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc3a:	d81a      	bhi.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d022      	beq.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800bc40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc44:	d115      	bne.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc4a:	3308      	adds	r3, #8
 800bc4c:	2101      	movs	r1, #1
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f002 f816 	bl	800dc80 <RCCEx_PLL2_Config>
 800bc54:	4603      	mov	r3, r0
 800bc56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bc5a:	e015      	b.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc60:	3328      	adds	r3, #40	@ 0x28
 800bc62:	2101      	movs	r1, #1
 800bc64:	4618      	mov	r0, r3
 800bc66:	f002 f8bd 	bl	800dde4 <RCCEx_PLL3_Config>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bc70:	e00a      	b.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc72:	2301      	movs	r3, #1
 800bc74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bc78:	e006      	b.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bc7a:	bf00      	nop
 800bc7c:	e004      	b.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bc7e:	bf00      	nop
 800bc80:	e002      	b.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bc82:	bf00      	nop
 800bc84:	e000      	b.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bc86:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10a      	bne.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bc90:	4b38      	ldr	r3, [pc, #224]	@ (800bd74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bc98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc9e:	4a35      	ldr	r2, [pc, #212]	@ (800bd74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bca0:	430b      	orrs	r3, r1
 800bca2:	6513      	str	r3, [r2, #80]	@ 0x50
 800bca4:	e003      	b.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bca6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bcae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bcba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bcc4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bcc8:	460b      	mov	r3, r1
 800bcca:	4313      	orrs	r3, r2
 800bccc:	d058      	beq.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bcce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bcd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bcda:	d033      	beq.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bcdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bce0:	d82c      	bhi.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bce6:	d02f      	beq.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcec:	d826      	bhi.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bcee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bcf2:	d02b      	beq.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bcf4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bcf8:	d820      	bhi.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bcfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bcfe:	d012      	beq.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800bd00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd04:	d81a      	bhi.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d022      	beq.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bd0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd0e:	d115      	bne.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd14:	3308      	adds	r3, #8
 800bd16:	2101      	movs	r1, #1
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f001 ffb1 	bl	800dc80 <RCCEx_PLL2_Config>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bd24:	e015      	b.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd2a:	3328      	adds	r3, #40	@ 0x28
 800bd2c:	2101      	movs	r1, #1
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f002 f858 	bl	800dde4 <RCCEx_PLL3_Config>
 800bd34:	4603      	mov	r3, r0
 800bd36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bd3a:	e00a      	b.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd42:	e006      	b.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bd44:	bf00      	nop
 800bd46:	e004      	b.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bd48:	bf00      	nop
 800bd4a:	e002      	b.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bd4c:	bf00      	nop
 800bd4e:	e000      	b.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bd50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d10e      	bne.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bd5a:	4b06      	ldr	r3, [pc, #24]	@ (800bd74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd5e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bd62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bd6a:	4a02      	ldr	r2, [pc, #8]	@ (800bd74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd6c:	430b      	orrs	r3, r1
 800bd6e:	6593      	str	r3, [r2, #88]	@ 0x58
 800bd70:	e006      	b.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bd72:	bf00      	nop
 800bd74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bd80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd88:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bd8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bd90:	2300      	movs	r3, #0
 800bd92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bd96:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	d037      	beq.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bda0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bda4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bda6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdaa:	d00e      	beq.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bdac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdb0:	d816      	bhi.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d018      	beq.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bdb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bdba:	d111      	bne.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdbc:	4bc4      	ldr	r3, [pc, #784]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdc0:	4ac3      	ldr	r2, [pc, #780]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bdc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bdc8:	e00f      	b.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bdca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdce:	3308      	adds	r3, #8
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f001 ff54 	bl	800dc80 <RCCEx_PLL2_Config>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bdde:	e004      	b.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bde6:	e000      	b.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bde8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d10a      	bne.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bdf2:	4bb7      	ldr	r3, [pc, #732]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdf6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bdfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be00:	4ab3      	ldr	r2, [pc, #716]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be02:	430b      	orrs	r3, r1
 800be04:	6513      	str	r3, [r2, #80]	@ 0x50
 800be06:	e003      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800be10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be18:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800be1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800be20:	2300      	movs	r3, #0
 800be22:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800be26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800be2a:	460b      	mov	r3, r1
 800be2c:	4313      	orrs	r3, r2
 800be2e:	d039      	beq.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800be30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be36:	2b03      	cmp	r3, #3
 800be38:	d81c      	bhi.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800be3a:	a201      	add	r2, pc, #4	@ (adr r2, 800be40 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800be3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be40:	0800be7d 	.word	0x0800be7d
 800be44:	0800be51 	.word	0x0800be51
 800be48:	0800be5f 	.word	0x0800be5f
 800be4c:	0800be7d 	.word	0x0800be7d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be50:	4b9f      	ldr	r3, [pc, #636]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be54:	4a9e      	ldr	r2, [pc, #632]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800be5c:	e00f      	b.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be62:	3308      	adds	r3, #8
 800be64:	2102      	movs	r1, #2
 800be66:	4618      	mov	r0, r3
 800be68:	f001 ff0a 	bl	800dc80 <RCCEx_PLL2_Config>
 800be6c:	4603      	mov	r3, r0
 800be6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800be72:	e004      	b.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800be74:	2301      	movs	r3, #1
 800be76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be7a:	e000      	b.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800be7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10a      	bne.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800be86:	4b92      	ldr	r3, [pc, #584]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be8a:	f023 0103 	bic.w	r1, r3, #3
 800be8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be94:	4a8e      	ldr	r2, [pc, #568]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be96:	430b      	orrs	r3, r1
 800be98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800be9a:	e003      	b.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bea0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800beb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800beb4:	2300      	movs	r3, #0
 800beb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800beba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bebe:	460b      	mov	r3, r1
 800bec0:	4313      	orrs	r3, r2
 800bec2:	f000 8099 	beq.w	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bec6:	4b83      	ldr	r3, [pc, #524]	@ (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4a82      	ldr	r2, [pc, #520]	@ (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800becc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bed0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bed2:	f7f8 fa3d 	bl	8004350 <HAL_GetTick>
 800bed6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800beda:	e00b      	b.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bedc:	f7f8 fa38 	bl	8004350 <HAL_GetTick>
 800bee0:	4602      	mov	r2, r0
 800bee2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	2b64      	cmp	r3, #100	@ 0x64
 800beea:	d903      	bls.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800beec:	2303      	movs	r3, #3
 800beee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bef2:	e005      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bef4:	4b77      	ldr	r3, [pc, #476]	@ (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800befc:	2b00      	cmp	r3, #0
 800befe:	d0ed      	beq.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bf00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d173      	bne.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bf08:	4b71      	ldr	r3, [pc, #452]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bf0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bf14:	4053      	eors	r3, r2
 800bf16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d015      	beq.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bf1e:	4b6c      	ldr	r3, [pc, #432]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf26:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bf2a:	4b69      	ldr	r3, [pc, #420]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf2e:	4a68      	ldr	r2, [pc, #416]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf34:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bf36:	4b66      	ldr	r3, [pc, #408]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf3a:	4a65      	ldr	r2, [pc, #404]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf40:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bf42:	4a63      	ldr	r2, [pc, #396]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf48:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bf4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bf52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf56:	d118      	bne.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf58:	f7f8 f9fa 	bl	8004350 <HAL_GetTick>
 800bf5c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf60:	e00d      	b.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf62:	f7f8 f9f5 	bl	8004350 <HAL_GetTick>
 800bf66:	4602      	mov	r2, r0
 800bf68:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bf6c:	1ad2      	subs	r2, r2, r3
 800bf6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d903      	bls.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bf76:	2303      	movs	r3, #3
 800bf78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800bf7c:	e005      	b.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf7e:	4b54      	ldr	r3, [pc, #336]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf82:	f003 0302 	and.w	r3, r3, #2
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d0eb      	beq.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bf8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d129      	bne.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bf92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bf9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bfa2:	d10e      	bne.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bfa4:	4b4a      	ldr	r3, [pc, #296]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfa6:	691b      	ldr	r3, [r3, #16]
 800bfa8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800bfac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bfb4:	091a      	lsrs	r2, r3, #4
 800bfb6:	4b48      	ldr	r3, [pc, #288]	@ (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bfb8:	4013      	ands	r3, r2
 800bfba:	4a45      	ldr	r2, [pc, #276]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfbc:	430b      	orrs	r3, r1
 800bfbe:	6113      	str	r3, [r2, #16]
 800bfc0:	e005      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bfc2:	4b43      	ldr	r3, [pc, #268]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	4a42      	ldr	r2, [pc, #264]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfc8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bfcc:	6113      	str	r3, [r2, #16]
 800bfce:	4b40      	ldr	r3, [pc, #256]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfd0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bfd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bfda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bfde:	4a3c      	ldr	r2, [pc, #240]	@ (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfe0:	430b      	orrs	r3, r1
 800bfe2:	6713      	str	r3, [r2, #112]	@ 0x70
 800bfe4:	e008      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bfe6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800bfee:	e003      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bff0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bff4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c000:	f002 0301 	and.w	r3, r2, #1
 800c004:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c008:	2300      	movs	r3, #0
 800c00a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c00e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c012:	460b      	mov	r3, r1
 800c014:	4313      	orrs	r3, r2
 800c016:	f000 808f 	beq.w	800c138 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c01e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c020:	2b28      	cmp	r3, #40	@ 0x28
 800c022:	d871      	bhi.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c024:	a201      	add	r2, pc, #4	@ (adr r2, 800c02c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c02a:	bf00      	nop
 800c02c:	0800c111 	.word	0x0800c111
 800c030:	0800c109 	.word	0x0800c109
 800c034:	0800c109 	.word	0x0800c109
 800c038:	0800c109 	.word	0x0800c109
 800c03c:	0800c109 	.word	0x0800c109
 800c040:	0800c109 	.word	0x0800c109
 800c044:	0800c109 	.word	0x0800c109
 800c048:	0800c109 	.word	0x0800c109
 800c04c:	0800c0dd 	.word	0x0800c0dd
 800c050:	0800c109 	.word	0x0800c109
 800c054:	0800c109 	.word	0x0800c109
 800c058:	0800c109 	.word	0x0800c109
 800c05c:	0800c109 	.word	0x0800c109
 800c060:	0800c109 	.word	0x0800c109
 800c064:	0800c109 	.word	0x0800c109
 800c068:	0800c109 	.word	0x0800c109
 800c06c:	0800c0f3 	.word	0x0800c0f3
 800c070:	0800c109 	.word	0x0800c109
 800c074:	0800c109 	.word	0x0800c109
 800c078:	0800c109 	.word	0x0800c109
 800c07c:	0800c109 	.word	0x0800c109
 800c080:	0800c109 	.word	0x0800c109
 800c084:	0800c109 	.word	0x0800c109
 800c088:	0800c109 	.word	0x0800c109
 800c08c:	0800c111 	.word	0x0800c111
 800c090:	0800c109 	.word	0x0800c109
 800c094:	0800c109 	.word	0x0800c109
 800c098:	0800c109 	.word	0x0800c109
 800c09c:	0800c109 	.word	0x0800c109
 800c0a0:	0800c109 	.word	0x0800c109
 800c0a4:	0800c109 	.word	0x0800c109
 800c0a8:	0800c109 	.word	0x0800c109
 800c0ac:	0800c111 	.word	0x0800c111
 800c0b0:	0800c109 	.word	0x0800c109
 800c0b4:	0800c109 	.word	0x0800c109
 800c0b8:	0800c109 	.word	0x0800c109
 800c0bc:	0800c109 	.word	0x0800c109
 800c0c0:	0800c109 	.word	0x0800c109
 800c0c4:	0800c109 	.word	0x0800c109
 800c0c8:	0800c109 	.word	0x0800c109
 800c0cc:	0800c111 	.word	0x0800c111
 800c0d0:	58024400 	.word	0x58024400
 800c0d4:	58024800 	.word	0x58024800
 800c0d8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0e0:	3308      	adds	r3, #8
 800c0e2:	2101      	movs	r1, #1
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f001 fdcb 	bl	800dc80 <RCCEx_PLL2_Config>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c0f0:	e00f      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0f6:	3328      	adds	r3, #40	@ 0x28
 800c0f8:	2101      	movs	r1, #1
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f001 fe72 	bl	800dde4 <RCCEx_PLL3_Config>
 800c100:	4603      	mov	r3, r0
 800c102:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c106:	e004      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c10e:	e000      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c110:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c112:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10a      	bne.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c11a:	4bbf      	ldr	r3, [pc, #764]	@ (800c418 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c11c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c11e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c126:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c128:	4abb      	ldr	r2, [pc, #748]	@ (800c418 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c12a:	430b      	orrs	r3, r1
 800c12c:	6553      	str	r3, [r2, #84]	@ 0x54
 800c12e:	e003      	b.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c130:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c134:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c140:	f002 0302 	and.w	r3, r2, #2
 800c144:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c148:	2300      	movs	r3, #0
 800c14a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c14e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c152:	460b      	mov	r3, r1
 800c154:	4313      	orrs	r3, r2
 800c156:	d041      	beq.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c15c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c15e:	2b05      	cmp	r3, #5
 800c160:	d824      	bhi.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c162:	a201      	add	r2, pc, #4	@ (adr r2, 800c168 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c168:	0800c1b5 	.word	0x0800c1b5
 800c16c:	0800c181 	.word	0x0800c181
 800c170:	0800c197 	.word	0x0800c197
 800c174:	0800c1b5 	.word	0x0800c1b5
 800c178:	0800c1b5 	.word	0x0800c1b5
 800c17c:	0800c1b5 	.word	0x0800c1b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c184:	3308      	adds	r3, #8
 800c186:	2101      	movs	r1, #1
 800c188:	4618      	mov	r0, r3
 800c18a:	f001 fd79 	bl	800dc80 <RCCEx_PLL2_Config>
 800c18e:	4603      	mov	r3, r0
 800c190:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c194:	e00f      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c19a:	3328      	adds	r3, #40	@ 0x28
 800c19c:	2101      	movs	r1, #1
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f001 fe20 	bl	800dde4 <RCCEx_PLL3_Config>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c1aa:	e004      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c1b2:	e000      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c1b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d10a      	bne.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c1be:	4b96      	ldr	r3, [pc, #600]	@ (800c418 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1c2:	f023 0107 	bic.w	r1, r3, #7
 800c1c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1cc:	4a92      	ldr	r2, [pc, #584]	@ (800c418 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1ce:	430b      	orrs	r3, r1
 800c1d0:	6553      	str	r3, [r2, #84]	@ 0x54
 800c1d2:	e003      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e4:	f002 0304 	and.w	r3, r2, #4
 800c1e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c1f2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	d044      	beq.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c1fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c204:	2b05      	cmp	r3, #5
 800c206:	d825      	bhi.n	800c254 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c208:	a201      	add	r2, pc, #4	@ (adr r2, 800c210 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c20e:	bf00      	nop
 800c210:	0800c25d 	.word	0x0800c25d
 800c214:	0800c229 	.word	0x0800c229
 800c218:	0800c23f 	.word	0x0800c23f
 800c21c:	0800c25d 	.word	0x0800c25d
 800c220:	0800c25d 	.word	0x0800c25d
 800c224:	0800c25d 	.word	0x0800c25d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c22c:	3308      	adds	r3, #8
 800c22e:	2101      	movs	r1, #1
 800c230:	4618      	mov	r0, r3
 800c232:	f001 fd25 	bl	800dc80 <RCCEx_PLL2_Config>
 800c236:	4603      	mov	r3, r0
 800c238:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c23c:	e00f      	b.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c242:	3328      	adds	r3, #40	@ 0x28
 800c244:	2101      	movs	r1, #1
 800c246:	4618      	mov	r0, r3
 800c248:	f001 fdcc 	bl	800dde4 <RCCEx_PLL3_Config>
 800c24c:	4603      	mov	r3, r0
 800c24e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c252:	e004      	b.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c254:	2301      	movs	r3, #1
 800c256:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c25a:	e000      	b.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c25c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c25e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c262:	2b00      	cmp	r3, #0
 800c264:	d10b      	bne.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c266:	4b6c      	ldr	r3, [pc, #432]	@ (800c418 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c26a:	f023 0107 	bic.w	r1, r3, #7
 800c26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c276:	4a68      	ldr	r2, [pc, #416]	@ (800c418 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c278:	430b      	orrs	r3, r1
 800c27a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c27c:	e003      	b.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c27e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c282:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28e:	f002 0320 	and.w	r3, r2, #32
 800c292:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c296:	2300      	movs	r3, #0
 800c298:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c29c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	d055      	beq.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c2ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c2b2:	d033      	beq.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c2b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c2b8:	d82c      	bhi.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2be:	d02f      	beq.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c2c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2c4:	d826      	bhi.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c2c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c2ca:	d02b      	beq.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c2cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c2d0:	d820      	bhi.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c2d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c2d6:	d012      	beq.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c2d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c2dc:	d81a      	bhi.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d022      	beq.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c2e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c2e6:	d115      	bne.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2ec:	3308      	adds	r3, #8
 800c2ee:	2100      	movs	r1, #0
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f001 fcc5 	bl	800dc80 <RCCEx_PLL2_Config>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c2fc:	e015      	b.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c302:	3328      	adds	r3, #40	@ 0x28
 800c304:	2102      	movs	r1, #2
 800c306:	4618      	mov	r0, r3
 800c308:	f001 fd6c 	bl	800dde4 <RCCEx_PLL3_Config>
 800c30c:	4603      	mov	r3, r0
 800c30e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c312:	e00a      	b.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c314:	2301      	movs	r3, #1
 800c316:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c31a:	e006      	b.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c31c:	bf00      	nop
 800c31e:	e004      	b.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c320:	bf00      	nop
 800c322:	e002      	b.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c324:	bf00      	nop
 800c326:	e000      	b.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c32a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d10b      	bne.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c332:	4b39      	ldr	r3, [pc, #228]	@ (800c418 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c336:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c33e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c342:	4a35      	ldr	r2, [pc, #212]	@ (800c418 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c344:	430b      	orrs	r3, r1
 800c346:	6553      	str	r3, [r2, #84]	@ 0x54
 800c348:	e003      	b.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c34a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c34e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c35e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c362:	2300      	movs	r3, #0
 800c364:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c368:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c36c:	460b      	mov	r3, r1
 800c36e:	4313      	orrs	r3, r2
 800c370:	d058      	beq.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c376:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c37a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c37e:	d033      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c380:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c384:	d82c      	bhi.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c38a:	d02f      	beq.n	800c3ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c38c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c390:	d826      	bhi.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c392:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c396:	d02b      	beq.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c398:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c39c:	d820      	bhi.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c39e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3a2:	d012      	beq.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c3a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3a8:	d81a      	bhi.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d022      	beq.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c3ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3b2:	d115      	bne.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3b8:	3308      	adds	r3, #8
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f001 fc5f 	bl	800dc80 <RCCEx_PLL2_Config>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c3c8:	e015      	b.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3ce:	3328      	adds	r3, #40	@ 0x28
 800c3d0:	2102      	movs	r1, #2
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f001 fd06 	bl	800dde4 <RCCEx_PLL3_Config>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c3de:	e00a      	b.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c3e6:	e006      	b.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c3e8:	bf00      	nop
 800c3ea:	e004      	b.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c3ec:	bf00      	nop
 800c3ee:	e002      	b.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c3f0:	bf00      	nop
 800c3f2:	e000      	b.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c3f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d10e      	bne.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c3fe:	4b06      	ldr	r3, [pc, #24]	@ (800c418 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c402:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c40a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c40e:	4a02      	ldr	r2, [pc, #8]	@ (800c418 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c410:	430b      	orrs	r3, r1
 800c412:	6593      	str	r3, [r2, #88]	@ 0x58
 800c414:	e006      	b.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c416:	bf00      	nop
 800c418:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c41c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c420:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c430:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c434:	2300      	movs	r3, #0
 800c436:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c43a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c43e:	460b      	mov	r3, r1
 800c440:	4313      	orrs	r3, r2
 800c442:	d055      	beq.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c448:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c44c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c450:	d033      	beq.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c452:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c456:	d82c      	bhi.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c45c:	d02f      	beq.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c45e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c462:	d826      	bhi.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c464:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c468:	d02b      	beq.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c46a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c46e:	d820      	bhi.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c470:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c474:	d012      	beq.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c476:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c47a:	d81a      	bhi.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d022      	beq.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c484:	d115      	bne.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c48a:	3308      	adds	r3, #8
 800c48c:	2100      	movs	r1, #0
 800c48e:	4618      	mov	r0, r3
 800c490:	f001 fbf6 	bl	800dc80 <RCCEx_PLL2_Config>
 800c494:	4603      	mov	r3, r0
 800c496:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c49a:	e015      	b.n	800c4c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4a0:	3328      	adds	r3, #40	@ 0x28
 800c4a2:	2102      	movs	r1, #2
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f001 fc9d 	bl	800dde4 <RCCEx_PLL3_Config>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c4b0:	e00a      	b.n	800c4c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c4b8:	e006      	b.n	800c4c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c4ba:	bf00      	nop
 800c4bc:	e004      	b.n	800c4c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c4be:	bf00      	nop
 800c4c0:	e002      	b.n	800c4c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c4c2:	bf00      	nop
 800c4c4:	e000      	b.n	800c4c8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c4c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d10b      	bne.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c4d0:	4ba0      	ldr	r3, [pc, #640]	@ (800c754 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c4d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c4e0:	4a9c      	ldr	r2, [pc, #624]	@ (800c754 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4e2:	430b      	orrs	r3, r1
 800c4e4:	6593      	str	r3, [r2, #88]	@ 0x58
 800c4e6:	e003      	b.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f8:	f002 0308 	and.w	r3, r2, #8
 800c4fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c500:	2300      	movs	r3, #0
 800c502:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c506:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c50a:	460b      	mov	r3, r1
 800c50c:	4313      	orrs	r3, r2
 800c50e:	d01e      	beq.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c514:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c51c:	d10c      	bne.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c51e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c522:	3328      	adds	r3, #40	@ 0x28
 800c524:	2102      	movs	r1, #2
 800c526:	4618      	mov	r0, r3
 800c528:	f001 fc5c 	bl	800dde4 <RCCEx_PLL3_Config>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d002      	beq.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c532:	2301      	movs	r3, #1
 800c534:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c538:	4b86      	ldr	r3, [pc, #536]	@ (800c754 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c53a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c53c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c548:	4a82      	ldr	r2, [pc, #520]	@ (800c754 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c54a:	430b      	orrs	r3, r1
 800c54c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c54e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c556:	f002 0310 	and.w	r3, r2, #16
 800c55a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c55e:	2300      	movs	r3, #0
 800c560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c564:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c568:	460b      	mov	r3, r1
 800c56a:	4313      	orrs	r3, r2
 800c56c:	d01e      	beq.n	800c5ac <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c56e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c57a:	d10c      	bne.n	800c596 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c580:	3328      	adds	r3, #40	@ 0x28
 800c582:	2102      	movs	r1, #2
 800c584:	4618      	mov	r0, r3
 800c586:	f001 fc2d 	bl	800dde4 <RCCEx_PLL3_Config>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d002      	beq.n	800c596 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c596:	4b6f      	ldr	r3, [pc, #444]	@ (800c754 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c59a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c59e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c5a6:	4a6b      	ldr	r2, [pc, #428]	@ (800c754 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5a8:	430b      	orrs	r3, r1
 800c5aa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c5b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c5be:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	d03e      	beq.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c5d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c5d4:	d022      	beq.n	800c61c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c5d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c5da:	d81b      	bhi.n	800c614 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d003      	beq.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c5e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5e4:	d00b      	beq.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c5e6:	e015      	b.n	800c614 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c5e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ec:	3308      	adds	r3, #8
 800c5ee:	2100      	movs	r1, #0
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f001 fb45 	bl	800dc80 <RCCEx_PLL2_Config>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c5fc:	e00f      	b.n	800c61e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c602:	3328      	adds	r3, #40	@ 0x28
 800c604:	2102      	movs	r1, #2
 800c606:	4618      	mov	r0, r3
 800c608:	f001 fbec 	bl	800dde4 <RCCEx_PLL3_Config>
 800c60c:	4603      	mov	r3, r0
 800c60e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c612:	e004      	b.n	800c61e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c614:	2301      	movs	r3, #1
 800c616:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c61a:	e000      	b.n	800c61e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c61c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c61e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c622:	2b00      	cmp	r3, #0
 800c624:	d10b      	bne.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c626:	4b4b      	ldr	r3, [pc, #300]	@ (800c754 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c62a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c632:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c636:	4a47      	ldr	r2, [pc, #284]	@ (800c754 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c638:	430b      	orrs	r3, r1
 800c63a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c63c:	e003      	b.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c63e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c642:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c652:	673b      	str	r3, [r7, #112]	@ 0x70
 800c654:	2300      	movs	r3, #0
 800c656:	677b      	str	r3, [r7, #116]	@ 0x74
 800c658:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c65c:	460b      	mov	r3, r1
 800c65e:	4313      	orrs	r3, r2
 800c660:	d03b      	beq.n	800c6da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c66a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c66e:	d01f      	beq.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c670:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c674:	d818      	bhi.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c676:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c67a:	d003      	beq.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c67c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c680:	d007      	beq.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c682:	e011      	b.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c684:	4b33      	ldr	r3, [pc, #204]	@ (800c754 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c688:	4a32      	ldr	r2, [pc, #200]	@ (800c754 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c68a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c68e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c690:	e00f      	b.n	800c6b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c696:	3328      	adds	r3, #40	@ 0x28
 800c698:	2101      	movs	r1, #1
 800c69a:	4618      	mov	r0, r3
 800c69c:	f001 fba2 	bl	800dde4 <RCCEx_PLL3_Config>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c6a6:	e004      	b.n	800c6b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c6ae:	e000      	b.n	800c6b2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c6b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d10b      	bne.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c6ba:	4b26      	ldr	r3, [pc, #152]	@ (800c754 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c6ca:	4a22      	ldr	r2, [pc, #136]	@ (800c754 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6cc:	430b      	orrs	r3, r1
 800c6ce:	6553      	str	r3, [r2, #84]	@ 0x54
 800c6d0:	e003      	b.n	800c6da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c6d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c6e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c6ec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	d034      	beq.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d003      	beq.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c704:	d007      	beq.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c706:	e011      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c708:	4b12      	ldr	r3, [pc, #72]	@ (800c754 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c70a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c70c:	4a11      	ldr	r2, [pc, #68]	@ (800c754 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c70e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c714:	e00e      	b.n	800c734 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c71a:	3308      	adds	r3, #8
 800c71c:	2102      	movs	r1, #2
 800c71e:	4618      	mov	r0, r3
 800c720:	f001 faae 	bl	800dc80 <RCCEx_PLL2_Config>
 800c724:	4603      	mov	r3, r0
 800c726:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c72a:	e003      	b.n	800c734 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c732:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c734:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d10d      	bne.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c73c:	4b05      	ldr	r3, [pc, #20]	@ (800c754 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c73e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c740:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c74a:	4a02      	ldr	r2, [pc, #8]	@ (800c754 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c74c:	430b      	orrs	r3, r1
 800c74e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c750:	e006      	b.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c752:	bf00      	nop
 800c754:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c758:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c75c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c768:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c76c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c76e:	2300      	movs	r3, #0
 800c770:	667b      	str	r3, [r7, #100]	@ 0x64
 800c772:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c776:	460b      	mov	r3, r1
 800c778:	4313      	orrs	r3, r2
 800c77a:	d00c      	beq.n	800c796 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c780:	3328      	adds	r3, #40	@ 0x28
 800c782:	2102      	movs	r1, #2
 800c784:	4618      	mov	r0, r3
 800c786:	f001 fb2d 	bl	800dde4 <RCCEx_PLL3_Config>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c790:	2301      	movs	r3, #1
 800c792:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c7a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c7a8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	d036      	beq.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c7b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c7b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c7bc:	d018      	beq.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c7be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c7c2:	d811      	bhi.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c7c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7c8:	d014      	beq.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c7ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7ce:	d80b      	bhi.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d011      	beq.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c7d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7d8:	d106      	bne.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7da:	4bb7      	ldr	r3, [pc, #732]	@ (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7de:	4ab6      	ldr	r2, [pc, #728]	@ (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c7e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c7e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c7e6:	e008      	b.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7ee:	e004      	b.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c7f0:	bf00      	nop
 800c7f2:	e002      	b.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c7f4:	bf00      	nop
 800c7f6:	e000      	b.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c7f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10a      	bne.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c802:	4bad      	ldr	r3, [pc, #692]	@ (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c806:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c80e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c810:	4aa9      	ldr	r2, [pc, #676]	@ (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c812:	430b      	orrs	r3, r1
 800c814:	6553      	str	r3, [r2, #84]	@ 0x54
 800c816:	e003      	b.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c818:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c81c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c828:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c82c:	653b      	str	r3, [r7, #80]	@ 0x50
 800c82e:	2300      	movs	r3, #0
 800c830:	657b      	str	r3, [r7, #84]	@ 0x54
 800c832:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c836:	460b      	mov	r3, r1
 800c838:	4313      	orrs	r3, r2
 800c83a:	d009      	beq.n	800c850 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c83c:	4b9e      	ldr	r3, [pc, #632]	@ (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c83e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c840:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c84a:	4a9b      	ldr	r2, [pc, #620]	@ (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c84c:	430b      	orrs	r3, r1
 800c84e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c858:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c85c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c85e:	2300      	movs	r3, #0
 800c860:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c862:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c866:	460b      	mov	r3, r1
 800c868:	4313      	orrs	r3, r2
 800c86a:	d009      	beq.n	800c880 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c86c:	4b92      	ldr	r3, [pc, #584]	@ (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c86e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c870:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c878:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c87a:	4a8f      	ldr	r2, [pc, #572]	@ (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c87c:	430b      	orrs	r3, r1
 800c87e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c88c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c88e:	2300      	movs	r3, #0
 800c890:	647b      	str	r3, [r7, #68]	@ 0x44
 800c892:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c896:	460b      	mov	r3, r1
 800c898:	4313      	orrs	r3, r2
 800c89a:	d00e      	beq.n	800c8ba <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c89c:	4b86      	ldr	r3, [pc, #536]	@ (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	4a85      	ldr	r2, [pc, #532]	@ (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c8a6:	6113      	str	r3, [r2, #16]
 800c8a8:	4b83      	ldr	r3, [pc, #524]	@ (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8aa:	6919      	ldr	r1, [r3, #16]
 800c8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c8b4:	4a80      	ldr	r2, [pc, #512]	@ (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8b6:	430b      	orrs	r3, r1
 800c8b8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c8c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8cc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	d009      	beq.n	800c8ea <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c8d6:	4b78      	ldr	r3, [pc, #480]	@ (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c8de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8e4:	4a74      	ldr	r2, [pc, #464]	@ (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8e6:	430b      	orrs	r3, r1
 800c8e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c8f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8fc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c900:	460b      	mov	r3, r1
 800c902:	4313      	orrs	r3, r2
 800c904:	d00a      	beq.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c906:	4b6c      	ldr	r3, [pc, #432]	@ (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c90a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c90e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c916:	4a68      	ldr	r2, [pc, #416]	@ (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c918:	430b      	orrs	r3, r1
 800c91a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c924:	2100      	movs	r1, #0
 800c926:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c928:	f003 0301 	and.w	r3, r3, #1
 800c92c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c92e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c932:	460b      	mov	r3, r1
 800c934:	4313      	orrs	r3, r2
 800c936:	d011      	beq.n	800c95c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c93c:	3308      	adds	r3, #8
 800c93e:	2100      	movs	r1, #0
 800c940:	4618      	mov	r0, r3
 800c942:	f001 f99d 	bl	800dc80 <RCCEx_PLL2_Config>
 800c946:	4603      	mov	r3, r0
 800c948:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c94c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c950:	2b00      	cmp	r3, #0
 800c952:	d003      	beq.n	800c95c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c954:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c958:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c95c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c964:	2100      	movs	r1, #0
 800c966:	6239      	str	r1, [r7, #32]
 800c968:	f003 0302 	and.w	r3, r3, #2
 800c96c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c96e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c972:	460b      	mov	r3, r1
 800c974:	4313      	orrs	r3, r2
 800c976:	d011      	beq.n	800c99c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c97c:	3308      	adds	r3, #8
 800c97e:	2101      	movs	r1, #1
 800c980:	4618      	mov	r0, r3
 800c982:	f001 f97d 	bl	800dc80 <RCCEx_PLL2_Config>
 800c986:	4603      	mov	r3, r0
 800c988:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c98c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c990:	2b00      	cmp	r3, #0
 800c992:	d003      	beq.n	800c99c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c994:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c998:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	61b9      	str	r1, [r7, #24]
 800c9a8:	f003 0304 	and.w	r3, r3, #4
 800c9ac:	61fb      	str	r3, [r7, #28]
 800c9ae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	d011      	beq.n	800c9dc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9bc:	3308      	adds	r3, #8
 800c9be:	2102      	movs	r1, #2
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f001 f95d 	bl	800dc80 <RCCEx_PLL2_Config>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c9cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d003      	beq.n	800c9dc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	6139      	str	r1, [r7, #16]
 800c9e8:	f003 0308 	and.w	r3, r3, #8
 800c9ec:	617b      	str	r3, [r7, #20]
 800c9ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	d011      	beq.n	800ca1c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9fc:	3328      	adds	r3, #40	@ 0x28
 800c9fe:	2100      	movs	r1, #0
 800ca00:	4618      	mov	r0, r3
 800ca02:	f001 f9ef 	bl	800dde4 <RCCEx_PLL3_Config>
 800ca06:	4603      	mov	r3, r0
 800ca08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800ca0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d003      	beq.n	800ca1c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ca1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca24:	2100      	movs	r1, #0
 800ca26:	60b9      	str	r1, [r7, #8]
 800ca28:	f003 0310 	and.w	r3, r3, #16
 800ca2c:	60fb      	str	r3, [r7, #12]
 800ca2e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ca32:	460b      	mov	r3, r1
 800ca34:	4313      	orrs	r3, r2
 800ca36:	d011      	beq.n	800ca5c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca3c:	3328      	adds	r3, #40	@ 0x28
 800ca3e:	2101      	movs	r1, #1
 800ca40:	4618      	mov	r0, r3
 800ca42:	f001 f9cf 	bl	800dde4 <RCCEx_PLL3_Config>
 800ca46:	4603      	mov	r3, r0
 800ca48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ca4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d003      	beq.n	800ca5c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ca5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca64:	2100      	movs	r1, #0
 800ca66:	6039      	str	r1, [r7, #0]
 800ca68:	f003 0320 	and.w	r3, r3, #32
 800ca6c:	607b      	str	r3, [r7, #4]
 800ca6e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ca72:	460b      	mov	r3, r1
 800ca74:	4313      	orrs	r3, r2
 800ca76:	d011      	beq.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ca78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca7c:	3328      	adds	r3, #40	@ 0x28
 800ca7e:	2102      	movs	r1, #2
 800ca80:	4618      	mov	r0, r3
 800ca82:	f001 f9af 	bl	800dde4 <RCCEx_PLL3_Config>
 800ca86:	4603      	mov	r3, r0
 800ca88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ca8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d003      	beq.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800ca9c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d101      	bne.n	800caa8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800caa4:	2300      	movs	r3, #0
 800caa6:	e000      	b.n	800caaa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800caa8:	2301      	movs	r3, #1
}
 800caaa:	4618      	mov	r0, r3
 800caac:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800cab0:	46bd      	mov	sp, r7
 800cab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cab6:	bf00      	nop
 800cab8:	58024400 	.word	0x58024400

0800cabc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b090      	sub	sp, #64	@ 0x40
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caca:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800cace:	430b      	orrs	r3, r1
 800cad0:	f040 8094 	bne.w	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cad4:	4b9b      	ldr	r3, [pc, #620]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cad8:	f003 0307 	and.w	r3, r3, #7
 800cadc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cae0:	2b04      	cmp	r3, #4
 800cae2:	f200 8087 	bhi.w	800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800cae6:	a201      	add	r2, pc, #4	@ (adr r2, 800caec <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800cae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caec:	0800cb01 	.word	0x0800cb01
 800caf0:	0800cb29 	.word	0x0800cb29
 800caf4:	0800cb51 	.word	0x0800cb51
 800caf8:	0800cbed 	.word	0x0800cbed
 800cafc:	0800cb79 	.word	0x0800cb79
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb00:	4b90      	ldr	r3, [pc, #576]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cb0c:	d108      	bne.n	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb12:	4618      	mov	r0, r3
 800cb14:	f000 ff62 	bl	800d9dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb1c:	f000 bc93 	b.w	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb20:	2300      	movs	r3, #0
 800cb22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb24:	f000 bc8f 	b.w	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb28:	4b86      	ldr	r3, [pc, #536]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cb30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cb34:	d108      	bne.n	800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb36:	f107 0318 	add.w	r3, r7, #24
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f000 fca6 	bl	800d48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb44:	f000 bc7f 	b.w	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb4c:	f000 bc7b 	b.w	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb50:	4b7c      	ldr	r3, [pc, #496]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cb58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb5c:	d108      	bne.n	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb5e:	f107 030c 	add.w	r3, r7, #12
 800cb62:	4618      	mov	r0, r3
 800cb64:	f000 fde6 	bl	800d734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb6c:	f000 bc6b 	b.w	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb70:	2300      	movs	r3, #0
 800cb72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb74:	f000 bc67 	b.w	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb78:	4b72      	ldr	r3, [pc, #456]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cb80:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb82:	4b70      	ldr	r3, [pc, #448]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f003 0304 	and.w	r3, r3, #4
 800cb8a:	2b04      	cmp	r3, #4
 800cb8c:	d10c      	bne.n	800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cb8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d109      	bne.n	800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb94:	4b6b      	ldr	r3, [pc, #428]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	08db      	lsrs	r3, r3, #3
 800cb9a:	f003 0303 	and.w	r3, r3, #3
 800cb9e:	4a6a      	ldr	r2, [pc, #424]	@ (800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cba0:	fa22 f303 	lsr.w	r3, r2, r3
 800cba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cba6:	e01f      	b.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cba8:	4b66      	ldr	r3, [pc, #408]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbb4:	d106      	bne.n	800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cbb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cbbc:	d102      	bne.n	800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cbbe:	4b63      	ldr	r3, [pc, #396]	@ (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cbc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbc2:	e011      	b.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cbc4:	4b5f      	ldr	r3, [pc, #380]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cbd0:	d106      	bne.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cbd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbd8:	d102      	bne.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cbda:	4b5d      	ldr	r3, [pc, #372]	@ (800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cbdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbde:	e003      	b.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cbe4:	f000 bc2f 	b.w	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cbe8:	f000 bc2d 	b.w	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cbec:	4b59      	ldr	r3, [pc, #356]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cbee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbf0:	f000 bc29 	b.w	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbf8:	f000 bc25 	b.w	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cbfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc00:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800cc04:	430b      	orrs	r3, r1
 800cc06:	f040 80a7 	bne.w	800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cc0a:	4b4e      	ldr	r3, [pc, #312]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc0e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800cc12:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cc1a:	d054      	beq.n	800ccc6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cc1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cc22:	f200 808b 	bhi.w	800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cc26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cc2c:	f000 8083 	beq.w	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800cc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc32:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cc36:	f200 8081 	bhi.w	800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cc3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cc40:	d02f      	beq.n	800cca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800cc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cc48:	d878      	bhi.n	800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d004      	beq.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800cc50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc56:	d012      	beq.n	800cc7e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800cc58:	e070      	b.n	800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc5a:	4b3a      	ldr	r3, [pc, #232]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cc62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cc66:	d107      	bne.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f000 feb5 	bl	800d9dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc76:	e3e6      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc7c:	e3e3      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc7e:	4b31      	ldr	r3, [pc, #196]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cc86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc8a:	d107      	bne.n	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc8c:	f107 0318 	add.w	r3, r7, #24
 800cc90:	4618      	mov	r0, r3
 800cc92:	f000 fbfb 	bl	800d48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc9a:	e3d4      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cca0:	e3d1      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cca2:	4b28      	ldr	r3, [pc, #160]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ccaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ccae:	d107      	bne.n	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccb0:	f107 030c 	add.w	r3, r7, #12
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 fd3d 	bl	800d734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccbe:	e3c2      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccc4:	e3bf      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ccc6:	4b1f      	ldr	r3, [pc, #124]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ccca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ccce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ccd0:	4b1c      	ldr	r3, [pc, #112]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f003 0304 	and.w	r3, r3, #4
 800ccd8:	2b04      	cmp	r3, #4
 800ccda:	d10c      	bne.n	800ccf6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ccdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d109      	bne.n	800ccf6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cce2:	4b18      	ldr	r3, [pc, #96]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	08db      	lsrs	r3, r3, #3
 800cce8:	f003 0303 	and.w	r3, r3, #3
 800ccec:	4a16      	ldr	r2, [pc, #88]	@ (800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ccee:	fa22 f303 	lsr.w	r3, r2, r3
 800ccf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccf4:	e01e      	b.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ccf6:	4b13      	ldr	r3, [pc, #76]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd02:	d106      	bne.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800cd04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd0a:	d102      	bne.n	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd0c:	4b0f      	ldr	r3, [pc, #60]	@ (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cd0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd10:	e010      	b.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd12:	4b0c      	ldr	r3, [pc, #48]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd1e:	d106      	bne.n	800cd2e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cd20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd26:	d102      	bne.n	800cd2e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd28:	4b09      	ldr	r3, [pc, #36]	@ (800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cd2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd2c:	e002      	b.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cd32:	e388      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cd34:	e387      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd36:	4b07      	ldr	r3, [pc, #28]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cd38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd3a:	e384      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd40:	e381      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cd42:	bf00      	nop
 800cd44:	58024400 	.word	0x58024400
 800cd48:	03d09000 	.word	0x03d09000
 800cd4c:	003d0900 	.word	0x003d0900
 800cd50:	007a1200 	.word	0x007a1200
 800cd54:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cd58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd5c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800cd60:	430b      	orrs	r3, r1
 800cd62:	f040 809c 	bne.w	800ce9e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cd66:	4b9e      	ldr	r3, [pc, #632]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd6a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800cd6e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cd70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cd76:	d054      	beq.n	800ce22 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800cd78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cd7e:	f200 808b 	bhi.w	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cd82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cd88:	f000 8083 	beq.w	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cd92:	f200 8081 	bhi.w	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cd9c:	d02f      	beq.n	800cdfe <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cda4:	d878      	bhi.n	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d004      	beq.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800cdac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cdb2:	d012      	beq.n	800cdda <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800cdb4:	e070      	b.n	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cdb6:	4b8a      	ldr	r3, [pc, #552]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cdbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cdc2:	d107      	bne.n	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cdc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f000 fe07 	bl	800d9dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdd2:	e338      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdd8:	e335      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdda:	4b81      	ldr	r3, [pc, #516]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cde2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cde6:	d107      	bne.n	800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cde8:	f107 0318 	add.w	r3, r7, #24
 800cdec:	4618      	mov	r0, r3
 800cdee:	f000 fb4d 	bl	800d48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdf6:	e326      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdfc:	e323      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cdfe:	4b78      	ldr	r3, [pc, #480]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ce06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce0a:	d107      	bne.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce0c:	f107 030c 	add.w	r3, r7, #12
 800ce10:	4618      	mov	r0, r3
 800ce12:	f000 fc8f 	bl	800d734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce1a:	e314      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce20:	e311      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce22:	4b6f      	ldr	r3, [pc, #444]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ce2a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce2c:	4b6c      	ldr	r3, [pc, #432]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f003 0304 	and.w	r3, r3, #4
 800ce34:	2b04      	cmp	r3, #4
 800ce36:	d10c      	bne.n	800ce52 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ce38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d109      	bne.n	800ce52 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce3e:	4b68      	ldr	r3, [pc, #416]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	08db      	lsrs	r3, r3, #3
 800ce44:	f003 0303 	and.w	r3, r3, #3
 800ce48:	4a66      	ldr	r2, [pc, #408]	@ (800cfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ce4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ce4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce50:	e01e      	b.n	800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce52:	4b63      	ldr	r3, [pc, #396]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce5e:	d106      	bne.n	800ce6e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ce60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce66:	d102      	bne.n	800ce6e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ce68:	4b5f      	ldr	r3, [pc, #380]	@ (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ce6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce6c:	e010      	b.n	800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce6e:	4b5c      	ldr	r3, [pc, #368]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce7a:	d106      	bne.n	800ce8a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800ce7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce82:	d102      	bne.n	800ce8a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce84:	4b59      	ldr	r3, [pc, #356]	@ (800cfec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ce86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce88:	e002      	b.n	800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ce8e:	e2da      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce90:	e2d9      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ce92:	4b57      	ldr	r3, [pc, #348]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ce94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce96:	e2d6      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce9c:	e2d3      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ce9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cea2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800cea6:	430b      	orrs	r3, r1
 800cea8:	f040 80a7 	bne.w	800cffa <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ceac:	4b4c      	ldr	r3, [pc, #304]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ceae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ceb0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ceb4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ceb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cebc:	d055      	beq.n	800cf6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800cebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cec4:	f200 8096 	bhi.w	800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cece:	f000 8084 	beq.w	800cfda <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800ced2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ced8:	f200 808c 	bhi.w	800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cede:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cee2:	d030      	beq.n	800cf46 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ceea:	f200 8083 	bhi.w	800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ceee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d004      	beq.n	800cefe <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800cef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cefa:	d012      	beq.n	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800cefc:	e07a      	b.n	800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cefe:	4b38      	ldr	r3, [pc, #224]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cf0a:	d107      	bne.n	800cf1c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf10:	4618      	mov	r0, r3
 800cf12:	f000 fd63 	bl	800d9dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf1a:	e294      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf20:	e291      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf22:	4b2f      	ldr	r3, [pc, #188]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf2e:	d107      	bne.n	800cf40 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf30:	f107 0318 	add.w	r3, r7, #24
 800cf34:	4618      	mov	r0, r3
 800cf36:	f000 faa9 	bl	800d48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cf3a:	69bb      	ldr	r3, [r7, #24]
 800cf3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf3e:	e282      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf40:	2300      	movs	r3, #0
 800cf42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf44:	e27f      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf46:	4b26      	ldr	r3, [pc, #152]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cf4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf52:	d107      	bne.n	800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf54:	f107 030c 	add.w	r3, r7, #12
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f000 fbeb 	bl	800d734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf62:	e270      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf64:	2300      	movs	r3, #0
 800cf66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf68:	e26d      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cf6a:	4b1d      	ldr	r3, [pc, #116]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cf72:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cf74:	4b1a      	ldr	r3, [pc, #104]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f003 0304 	and.w	r3, r3, #4
 800cf7c:	2b04      	cmp	r3, #4
 800cf7e:	d10c      	bne.n	800cf9a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800cf80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d109      	bne.n	800cf9a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf86:	4b16      	ldr	r3, [pc, #88]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	08db      	lsrs	r3, r3, #3
 800cf8c:	f003 0303 	and.w	r3, r3, #3
 800cf90:	4a14      	ldr	r2, [pc, #80]	@ (800cfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cf92:	fa22 f303 	lsr.w	r3, r2, r3
 800cf96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf98:	e01e      	b.n	800cfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cf9a:	4b11      	ldr	r3, [pc, #68]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfa6:	d106      	bne.n	800cfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800cfa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cfae:	d102      	bne.n	800cfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cfb0:	4b0d      	ldr	r3, [pc, #52]	@ (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cfb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cfb4:	e010      	b.n	800cfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cfb6:	4b0a      	ldr	r3, [pc, #40]	@ (800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cfbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cfc2:	d106      	bne.n	800cfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800cfc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfca:	d102      	bne.n	800cfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cfcc:	4b07      	ldr	r3, [pc, #28]	@ (800cfec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cfce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cfd0:	e002      	b.n	800cfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cfd6:	e236      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cfd8:	e235      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cfda:	4b05      	ldr	r3, [pc, #20]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cfdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfde:	e232      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cfe0:	58024400 	.word	0x58024400
 800cfe4:	03d09000 	.word	0x03d09000
 800cfe8:	003d0900 	.word	0x003d0900
 800cfec:	007a1200 	.word	0x007a1200
 800cff0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800cff4:	2300      	movs	r3, #0
 800cff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cff8:	e225      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cffe:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d002:	430b      	orrs	r3, r1
 800d004:	f040 8085 	bne.w	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d008:	4b9c      	ldr	r3, [pc, #624]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d00a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d00c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d010:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800d012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d014:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d018:	d06b      	beq.n	800d0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d01c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d020:	d874      	bhi.n	800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d024:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d028:	d056      	beq.n	800d0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d02c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d030:	d86c      	bhi.n	800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d034:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d038:	d03b      	beq.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d03c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d040:	d864      	bhi.n	800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d044:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d048:	d021      	beq.n	800d08e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d04c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d050:	d85c      	bhi.n	800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d054:	2b00      	cmp	r3, #0
 800d056:	d004      	beq.n	800d062 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d05a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d05e:	d004      	beq.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d060:	e054      	b.n	800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d062:	f7fe fb5f 	bl	800b724 <HAL_RCC_GetPCLK1Freq>
 800d066:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d068:	e1ed      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d06a:	4b84      	ldr	r3, [pc, #528]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d072:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d076:	d107      	bne.n	800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d078:	f107 0318 	add.w	r3, r7, #24
 800d07c:	4618      	mov	r0, r3
 800d07e:	f000 fa05 	bl	800d48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d082:	69fb      	ldr	r3, [r7, #28]
 800d084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d086:	e1de      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d08c:	e1db      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d08e:	4b7b      	ldr	r3, [pc, #492]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d096:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d09a:	d107      	bne.n	800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d09c:	f107 030c 	add.w	r3, r7, #12
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f000 fb47 	bl	800d734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0aa:	e1cc      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0b0:	e1c9      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d0b2:	4b72      	ldr	r3, [pc, #456]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f003 0304 	and.w	r3, r3, #4
 800d0ba:	2b04      	cmp	r3, #4
 800d0bc:	d109      	bne.n	800d0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0be:	4b6f      	ldr	r3, [pc, #444]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	08db      	lsrs	r3, r3, #3
 800d0c4:	f003 0303 	and.w	r3, r3, #3
 800d0c8:	4a6d      	ldr	r2, [pc, #436]	@ (800d280 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d0ca:	fa22 f303 	lsr.w	r3, r2, r3
 800d0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0d0:	e1b9      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0d6:	e1b6      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d0d8:	4b68      	ldr	r3, [pc, #416]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d0e4:	d102      	bne.n	800d0ec <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d0e6:	4b67      	ldr	r3, [pc, #412]	@ (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0ea:	e1ac      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0f0:	e1a9      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d0f2:	4b62      	ldr	r3, [pc, #392]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d0fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d0fe:	d102      	bne.n	800d106 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d100:	4b61      	ldr	r3, [pc, #388]	@ (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d104:	e19f      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d106:	2300      	movs	r3, #0
 800d108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d10a:	e19c      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d10c:	2300      	movs	r3, #0
 800d10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d110:	e199      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d112:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d116:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d11a:	430b      	orrs	r3, r1
 800d11c:	d173      	bne.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d11e:	4b57      	ldr	r3, [pc, #348]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d122:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d126:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d12a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d12e:	d02f      	beq.n	800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d132:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d136:	d863      	bhi.n	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d004      	beq.n	800d148 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d144:	d012      	beq.n	800d16c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d146:	e05b      	b.n	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d148:	4b4c      	ldr	r3, [pc, #304]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d150:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d154:	d107      	bne.n	800d166 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d156:	f107 0318 	add.w	r3, r7, #24
 800d15a:	4618      	mov	r0, r3
 800d15c:	f000 f996 	bl	800d48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d160:	69bb      	ldr	r3, [r7, #24]
 800d162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d164:	e16f      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d166:	2300      	movs	r3, #0
 800d168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d16a:	e16c      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d16c:	4b43      	ldr	r3, [pc, #268]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d178:	d107      	bne.n	800d18a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d17a:	f107 030c 	add.w	r3, r7, #12
 800d17e:	4618      	mov	r0, r3
 800d180:	f000 fad8 	bl	800d734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d188:	e15d      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d18a:	2300      	movs	r3, #0
 800d18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d18e:	e15a      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d190:	4b3a      	ldr	r3, [pc, #232]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d194:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d198:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d19a:	4b38      	ldr	r3, [pc, #224]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f003 0304 	and.w	r3, r3, #4
 800d1a2:	2b04      	cmp	r3, #4
 800d1a4:	d10c      	bne.n	800d1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d1a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d109      	bne.n	800d1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1ac:	4b33      	ldr	r3, [pc, #204]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	08db      	lsrs	r3, r3, #3
 800d1b2:	f003 0303 	and.w	r3, r3, #3
 800d1b6:	4a32      	ldr	r2, [pc, #200]	@ (800d280 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d1b8:	fa22 f303 	lsr.w	r3, r2, r3
 800d1bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1be:	e01e      	b.n	800d1fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d1c0:	4b2e      	ldr	r3, [pc, #184]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1cc:	d106      	bne.n	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1d4:	d102      	bne.n	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d1d6:	4b2b      	ldr	r3, [pc, #172]	@ (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1da:	e010      	b.n	800d1fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d1dc:	4b27      	ldr	r3, [pc, #156]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1e8:	d106      	bne.n	800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d1ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1f0:	d102      	bne.n	800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d1f2:	4b25      	ldr	r3, [pc, #148]	@ (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1f6:	e002      	b.n	800d1fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d1fc:	e123      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d1fe:	e122      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d200:	2300      	movs	r3, #0
 800d202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d204:	e11f      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d206:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d20a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d20e:	430b      	orrs	r3, r1
 800d210:	d13c      	bne.n	800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d212:	4b1a      	ldr	r3, [pc, #104]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d21a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d004      	beq.n	800d22c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d228:	d012      	beq.n	800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d22a:	e023      	b.n	800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d22c:	4b13      	ldr	r3, [pc, #76]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d234:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d238:	d107      	bne.n	800d24a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d23a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d23e:	4618      	mov	r0, r3
 800d240:	f000 fbcc 	bl	800d9dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d248:	e0fd      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d24e:	e0fa      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d250:	4b0a      	ldr	r3, [pc, #40]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d258:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d25c:	d107      	bne.n	800d26e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d25e:	f107 0318 	add.w	r3, r7, #24
 800d262:	4618      	mov	r0, r3
 800d264:	f000 f912 	bl	800d48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d268:	6a3b      	ldr	r3, [r7, #32]
 800d26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d26c:	e0eb      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d26e:	2300      	movs	r3, #0
 800d270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d272:	e0e8      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d274:	2300      	movs	r3, #0
 800d276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d278:	e0e5      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d27a:	bf00      	nop
 800d27c:	58024400 	.word	0x58024400
 800d280:	03d09000 	.word	0x03d09000
 800d284:	003d0900 	.word	0x003d0900
 800d288:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d28c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d290:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d294:	430b      	orrs	r3, r1
 800d296:	f040 8085 	bne.w	800d3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d29a:	4b6d      	ldr	r3, [pc, #436]	@ (800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d29c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d29e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d2a2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d2aa:	d06b      	beq.n	800d384 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d2b2:	d874      	bhi.n	800d39e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2ba:	d056      	beq.n	800d36a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2c2:	d86c      	bhi.n	800d39e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d2ca:	d03b      	beq.n	800d344 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d2d2:	d864      	bhi.n	800d39e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d2da:	d021      	beq.n	800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d2e2:	d85c      	bhi.n	800d39e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d004      	beq.n	800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2f0:	d004      	beq.n	800d2fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d2f2:	e054      	b.n	800d39e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d2f4:	f000 f8b4 	bl	800d460 <HAL_RCCEx_GetD3PCLK1Freq>
 800d2f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d2fa:	e0a4      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d2fc:	4b54      	ldr	r3, [pc, #336]	@ (800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d304:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d308:	d107      	bne.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d30a:	f107 0318 	add.w	r3, r7, #24
 800d30e:	4618      	mov	r0, r3
 800d310:	f000 f8bc 	bl	800d48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d318:	e095      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d31a:	2300      	movs	r3, #0
 800d31c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d31e:	e092      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d320:	4b4b      	ldr	r3, [pc, #300]	@ (800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d328:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d32c:	d107      	bne.n	800d33e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d32e:	f107 030c 	add.w	r3, r7, #12
 800d332:	4618      	mov	r0, r3
 800d334:	f000 f9fe 	bl	800d734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d33c:	e083      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d33e:	2300      	movs	r3, #0
 800d340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d342:	e080      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d344:	4b42      	ldr	r3, [pc, #264]	@ (800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f003 0304 	and.w	r3, r3, #4
 800d34c:	2b04      	cmp	r3, #4
 800d34e:	d109      	bne.n	800d364 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d350:	4b3f      	ldr	r3, [pc, #252]	@ (800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	08db      	lsrs	r3, r3, #3
 800d356:	f003 0303 	and.w	r3, r3, #3
 800d35a:	4a3e      	ldr	r2, [pc, #248]	@ (800d454 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d35c:	fa22 f303 	lsr.w	r3, r2, r3
 800d360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d362:	e070      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d364:	2300      	movs	r3, #0
 800d366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d368:	e06d      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d36a:	4b39      	ldr	r3, [pc, #228]	@ (800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d376:	d102      	bne.n	800d37e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d378:	4b37      	ldr	r3, [pc, #220]	@ (800d458 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d37c:	e063      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d37e:	2300      	movs	r3, #0
 800d380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d382:	e060      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d384:	4b32      	ldr	r3, [pc, #200]	@ (800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d38c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d390:	d102      	bne.n	800d398 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d392:	4b32      	ldr	r3, [pc, #200]	@ (800d45c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d396:	e056      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d398:	2300      	movs	r3, #0
 800d39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d39c:	e053      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3a2:	e050      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d3a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3a8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d3ac:	430b      	orrs	r3, r1
 800d3ae:	d148      	bne.n	800d442 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d3b0:	4b27      	ldr	r3, [pc, #156]	@ (800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d3b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d3b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d3c0:	d02a      	beq.n	800d418 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d3c8:	d838      	bhi.n	800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d004      	beq.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d3d6:	d00d      	beq.n	800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d3d8:	e030      	b.n	800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d3da:	4b1d      	ldr	r3, [pc, #116]	@ (800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d3e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d3e6:	d102      	bne.n	800d3ee <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d3e8:	4b1c      	ldr	r3, [pc, #112]	@ (800d45c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3ec:	e02b      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3f2:	e028      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d3f4:	4b16      	ldr	r3, [pc, #88]	@ (800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d3fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d400:	d107      	bne.n	800d412 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d406:	4618      	mov	r0, r3
 800d408:	f000 fae8 	bl	800d9dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d410:	e019      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d412:	2300      	movs	r3, #0
 800d414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d416:	e016      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d418:	4b0d      	ldr	r3, [pc, #52]	@ (800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d420:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d424:	d107      	bne.n	800d436 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d426:	f107 0318 	add.w	r3, r7, #24
 800d42a:	4618      	mov	r0, r3
 800d42c:	f000 f82e 	bl	800d48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d434:	e007      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d436:	2300      	movs	r3, #0
 800d438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d43a:	e004      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d43c:	2300      	movs	r3, #0
 800d43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d440:	e001      	b.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d442:	2300      	movs	r3, #0
 800d444:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3740      	adds	r7, #64	@ 0x40
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	58024400 	.word	0x58024400
 800d454:	03d09000 	.word	0x03d09000
 800d458:	003d0900 	.word	0x003d0900
 800d45c:	007a1200 	.word	0x007a1200

0800d460 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d464:	f7fe f92e 	bl	800b6c4 <HAL_RCC_GetHCLKFreq>
 800d468:	4602      	mov	r2, r0
 800d46a:	4b06      	ldr	r3, [pc, #24]	@ (800d484 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d46c:	6a1b      	ldr	r3, [r3, #32]
 800d46e:	091b      	lsrs	r3, r3, #4
 800d470:	f003 0307 	and.w	r3, r3, #7
 800d474:	4904      	ldr	r1, [pc, #16]	@ (800d488 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d476:	5ccb      	ldrb	r3, [r1, r3]
 800d478:	f003 031f 	and.w	r3, r3, #31
 800d47c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d480:	4618      	mov	r0, r3
 800d482:	bd80      	pop	{r7, pc}
 800d484:	58024400 	.word	0x58024400
 800d488:	08014318 	.word	0x08014318

0800d48c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b089      	sub	sp, #36	@ 0x24
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d494:	4ba1      	ldr	r3, [pc, #644]	@ (800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d498:	f003 0303 	and.w	r3, r3, #3
 800d49c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d49e:	4b9f      	ldr	r3, [pc, #636]	@ (800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4a2:	0b1b      	lsrs	r3, r3, #12
 800d4a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d4a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d4aa:	4b9c      	ldr	r3, [pc, #624]	@ (800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4ae:	091b      	lsrs	r3, r3, #4
 800d4b0:	f003 0301 	and.w	r3, r3, #1
 800d4b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d4b6:	4b99      	ldr	r3, [pc, #612]	@ (800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4ba:	08db      	lsrs	r3, r3, #3
 800d4bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d4c0:	693a      	ldr	r2, [r7, #16]
 800d4c2:	fb02 f303 	mul.w	r3, r2, r3
 800d4c6:	ee07 3a90 	vmov	s15, r3
 800d4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	f000 8111 	beq.w	800d6fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d4da:	69bb      	ldr	r3, [r7, #24]
 800d4dc:	2b02      	cmp	r3, #2
 800d4de:	f000 8083 	beq.w	800d5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d4e2:	69bb      	ldr	r3, [r7, #24]
 800d4e4:	2b02      	cmp	r3, #2
 800d4e6:	f200 80a1 	bhi.w	800d62c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d003      	beq.n	800d4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d4f0:	69bb      	ldr	r3, [r7, #24]
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d056      	beq.n	800d5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d4f6:	e099      	b.n	800d62c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4f8:	4b88      	ldr	r3, [pc, #544]	@ (800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f003 0320 	and.w	r3, r3, #32
 800d500:	2b00      	cmp	r3, #0
 800d502:	d02d      	beq.n	800d560 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d504:	4b85      	ldr	r3, [pc, #532]	@ (800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	08db      	lsrs	r3, r3, #3
 800d50a:	f003 0303 	and.w	r3, r3, #3
 800d50e:	4a84      	ldr	r2, [pc, #528]	@ (800d720 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d510:	fa22 f303 	lsr.w	r3, r2, r3
 800d514:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	ee07 3a90 	vmov	s15, r3
 800d51c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	ee07 3a90 	vmov	s15, r3
 800d526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d52a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d52e:	4b7b      	ldr	r3, [pc, #492]	@ (800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d536:	ee07 3a90 	vmov	s15, r3
 800d53a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d53e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d542:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d54a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d54e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d55a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d55e:	e087      	b.n	800d670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	ee07 3a90 	vmov	s15, r3
 800d566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d56a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d728 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d56e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d572:	4b6a      	ldr	r3, [pc, #424]	@ (800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d57a:	ee07 3a90 	vmov	s15, r3
 800d57e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d582:	ed97 6a03 	vldr	s12, [r7, #12]
 800d586:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d58a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d58e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d59a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d59e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5a2:	e065      	b.n	800d670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	ee07 3a90 	vmov	s15, r3
 800d5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d72c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d5b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5b6:	4b59      	ldr	r3, [pc, #356]	@ (800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5be:	ee07 3a90 	vmov	s15, r3
 800d5c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d5ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5e6:	e043      	b.n	800d670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	ee07 3a90 	vmov	s15, r3
 800d5ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d730 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d5f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5fa:	4b48      	ldr	r3, [pc, #288]	@ (800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d602:	ee07 3a90 	vmov	s15, r3
 800d606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d60a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d60e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d61a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d61e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d622:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d62a:	e021      	b.n	800d670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	ee07 3a90 	vmov	s15, r3
 800d632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d636:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d72c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d63a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d63e:	4b37      	ldr	r3, [pc, #220]	@ (800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d646:	ee07 3a90 	vmov	s15, r3
 800d64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d64e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d652:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d65a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d65e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d66a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d66e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d670:	4b2a      	ldr	r3, [pc, #168]	@ (800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d674:	0a5b      	lsrs	r3, r3, #9
 800d676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d67a:	ee07 3a90 	vmov	s15, r3
 800d67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d682:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d68a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d68e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d696:	ee17 2a90 	vmov	r2, s15
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d69e:	4b1f      	ldr	r3, [pc, #124]	@ (800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6a2:	0c1b      	lsrs	r3, r3, #16
 800d6a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6a8:	ee07 3a90 	vmov	s15, r3
 800d6ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d6b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6c4:	ee17 2a90 	vmov	r2, s15
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d6cc:	4b13      	ldr	r3, [pc, #76]	@ (800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6d0:	0e1b      	lsrs	r3, r3, #24
 800d6d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6d6:	ee07 3a90 	vmov	s15, r3
 800d6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d6e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6f2:	ee17 2a90 	vmov	r2, s15
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d6fa:	e008      	b.n	800d70e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2200      	movs	r2, #0
 800d706:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2200      	movs	r2, #0
 800d70c:	609a      	str	r2, [r3, #8]
}
 800d70e:	bf00      	nop
 800d710:	3724      	adds	r7, #36	@ 0x24
 800d712:	46bd      	mov	sp, r7
 800d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d718:	4770      	bx	lr
 800d71a:	bf00      	nop
 800d71c:	58024400 	.word	0x58024400
 800d720:	03d09000 	.word	0x03d09000
 800d724:	46000000 	.word	0x46000000
 800d728:	4c742400 	.word	0x4c742400
 800d72c:	4a742400 	.word	0x4a742400
 800d730:	4af42400 	.word	0x4af42400

0800d734 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d734:	b480      	push	{r7}
 800d736:	b089      	sub	sp, #36	@ 0x24
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d73c:	4ba1      	ldr	r3, [pc, #644]	@ (800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d73e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d740:	f003 0303 	and.w	r3, r3, #3
 800d744:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d746:	4b9f      	ldr	r3, [pc, #636]	@ (800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d74a:	0d1b      	lsrs	r3, r3, #20
 800d74c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d750:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d752:	4b9c      	ldr	r3, [pc, #624]	@ (800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d756:	0a1b      	lsrs	r3, r3, #8
 800d758:	f003 0301 	and.w	r3, r3, #1
 800d75c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d75e:	4b99      	ldr	r3, [pc, #612]	@ (800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d762:	08db      	lsrs	r3, r3, #3
 800d764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d768:	693a      	ldr	r2, [r7, #16]
 800d76a:	fb02 f303 	mul.w	r3, r2, r3
 800d76e:	ee07 3a90 	vmov	s15, r3
 800d772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d776:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f000 8111 	beq.w	800d9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d782:	69bb      	ldr	r3, [r7, #24]
 800d784:	2b02      	cmp	r3, #2
 800d786:	f000 8083 	beq.w	800d890 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	2b02      	cmp	r3, #2
 800d78e:	f200 80a1 	bhi.w	800d8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d792:	69bb      	ldr	r3, [r7, #24]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d003      	beq.n	800d7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d798:	69bb      	ldr	r3, [r7, #24]
 800d79a:	2b01      	cmp	r3, #1
 800d79c:	d056      	beq.n	800d84c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d79e:	e099      	b.n	800d8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7a0:	4b88      	ldr	r3, [pc, #544]	@ (800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f003 0320 	and.w	r3, r3, #32
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d02d      	beq.n	800d808 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d7ac:	4b85      	ldr	r3, [pc, #532]	@ (800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	08db      	lsrs	r3, r3, #3
 800d7b2:	f003 0303 	and.w	r3, r3, #3
 800d7b6:	4a84      	ldr	r2, [pc, #528]	@ (800d9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800d7bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	ee07 3a90 	vmov	s15, r3
 800d7c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	ee07 3a90 	vmov	s15, r3
 800d7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7d6:	4b7b      	ldr	r3, [pc, #492]	@ (800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7de:	ee07 3a90 	vmov	s15, r3
 800d7e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d7ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d802:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d806:	e087      	b.n	800d918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	ee07 3a90 	vmov	s15, r3
 800d80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d812:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d9d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d81a:	4b6a      	ldr	r3, [pc, #424]	@ (800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d81c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d822:	ee07 3a90 	vmov	s15, r3
 800d826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d82a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d82e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d83a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d83e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d842:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d84a:	e065      	b.n	800d918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	ee07 3a90 	vmov	s15, r3
 800d852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d856:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d85a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d85e:	4b59      	ldr	r3, [pc, #356]	@ (800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d866:	ee07 3a90 	vmov	s15, r3
 800d86a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d86e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d872:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d87a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d87e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d88a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d88e:	e043      	b.n	800d918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	ee07 3a90 	vmov	s15, r3
 800d896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d89a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d89e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8a2:	4b48      	ldr	r3, [pc, #288]	@ (800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8aa:	ee07 3a90 	vmov	s15, r3
 800d8ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d8ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d8c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8d2:	e021      	b.n	800d918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	ee07 3a90 	vmov	s15, r3
 800d8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d8e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8e6:	4b37      	ldr	r3, [pc, #220]	@ (800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8ee:	ee07 3a90 	vmov	s15, r3
 800d8f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d8fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d90a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d916:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d918:	4b2a      	ldr	r3, [pc, #168]	@ (800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d91a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d91c:	0a5b      	lsrs	r3, r3, #9
 800d91e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d922:	ee07 3a90 	vmov	s15, r3
 800d926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d92a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d92e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d932:	edd7 6a07 	vldr	s13, [r7, #28]
 800d936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d93a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d93e:	ee17 2a90 	vmov	r2, s15
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d946:	4b1f      	ldr	r3, [pc, #124]	@ (800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d94a:	0c1b      	lsrs	r3, r3, #16
 800d94c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d950:	ee07 3a90 	vmov	s15, r3
 800d954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d958:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d95c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d960:	edd7 6a07 	vldr	s13, [r7, #28]
 800d964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d96c:	ee17 2a90 	vmov	r2, s15
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d974:	4b13      	ldr	r3, [pc, #76]	@ (800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d978:	0e1b      	lsrs	r3, r3, #24
 800d97a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d97e:	ee07 3a90 	vmov	s15, r3
 800d982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d986:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d98a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d98e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d99a:	ee17 2a90 	vmov	r2, s15
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d9a2:	e008      	b.n	800d9b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	609a      	str	r2, [r3, #8]
}
 800d9b6:	bf00      	nop
 800d9b8:	3724      	adds	r7, #36	@ 0x24
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr
 800d9c2:	bf00      	nop
 800d9c4:	58024400 	.word	0x58024400
 800d9c8:	03d09000 	.word	0x03d09000
 800d9cc:	46000000 	.word	0x46000000
 800d9d0:	4c742400 	.word	0x4c742400
 800d9d4:	4a742400 	.word	0x4a742400
 800d9d8:	4af42400 	.word	0x4af42400

0800d9dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b089      	sub	sp, #36	@ 0x24
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d9e4:	4ba0      	ldr	r3, [pc, #640]	@ (800dc68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9e8:	f003 0303 	and.w	r3, r3, #3
 800d9ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d9ee:	4b9e      	ldr	r3, [pc, #632]	@ (800dc68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9f2:	091b      	lsrs	r3, r3, #4
 800d9f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d9f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d9fa:	4b9b      	ldr	r3, [pc, #620]	@ (800dc68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9fe:	f003 0301 	and.w	r3, r3, #1
 800da02:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800da04:	4b98      	ldr	r3, [pc, #608]	@ (800dc68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da08:	08db      	lsrs	r3, r3, #3
 800da0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da0e:	693a      	ldr	r2, [r7, #16]
 800da10:	fb02 f303 	mul.w	r3, r2, r3
 800da14:	ee07 3a90 	vmov	s15, r3
 800da18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da1c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	2b00      	cmp	r3, #0
 800da24:	f000 8111 	beq.w	800dc4a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800da28:	69bb      	ldr	r3, [r7, #24]
 800da2a:	2b02      	cmp	r3, #2
 800da2c:	f000 8083 	beq.w	800db36 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800da30:	69bb      	ldr	r3, [r7, #24]
 800da32:	2b02      	cmp	r3, #2
 800da34:	f200 80a1 	bhi.w	800db7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800da38:	69bb      	ldr	r3, [r7, #24]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d003      	beq.n	800da46 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	2b01      	cmp	r3, #1
 800da42:	d056      	beq.n	800daf2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800da44:	e099      	b.n	800db7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da46:	4b88      	ldr	r3, [pc, #544]	@ (800dc68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f003 0320 	and.w	r3, r3, #32
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d02d      	beq.n	800daae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800da52:	4b85      	ldr	r3, [pc, #532]	@ (800dc68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	08db      	lsrs	r3, r3, #3
 800da58:	f003 0303 	and.w	r3, r3, #3
 800da5c:	4a83      	ldr	r2, [pc, #524]	@ (800dc6c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800da5e:	fa22 f303 	lsr.w	r3, r2, r3
 800da62:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	ee07 3a90 	vmov	s15, r3
 800da6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	ee07 3a90 	vmov	s15, r3
 800da74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da7c:	4b7a      	ldr	r3, [pc, #488]	@ (800dc68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da84:	ee07 3a90 	vmov	s15, r3
 800da88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800da90:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800daa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800daa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daa8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800daac:	e087      	b.n	800dbbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	ee07 3a90 	vmov	s15, r3
 800dab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dab8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800dc74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dabc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dac0:	4b69      	ldr	r3, [pc, #420]	@ (800dc68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dac8:	ee07 3a90 	vmov	s15, r3
 800dacc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dad0:	ed97 6a03 	vldr	s12, [r7, #12]
 800dad4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dadc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dae0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800daf0:	e065      	b.n	800dbbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	ee07 3a90 	vmov	s15, r3
 800daf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dafc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800dc78 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800db00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db04:	4b58      	ldr	r3, [pc, #352]	@ (800dc68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db0c:	ee07 3a90 	vmov	s15, r3
 800db10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db14:	ed97 6a03 	vldr	s12, [r7, #12]
 800db18:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db34:	e043      	b.n	800dbbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	ee07 3a90 	vmov	s15, r3
 800db3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db40:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800dc7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800db44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db48:	4b47      	ldr	r3, [pc, #284]	@ (800dc68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db50:	ee07 3a90 	vmov	s15, r3
 800db54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db58:	ed97 6a03 	vldr	s12, [r7, #12]
 800db5c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db78:	e021      	b.n	800dbbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	ee07 3a90 	vmov	s15, r3
 800db80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db84:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800dc74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800db88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db8c:	4b36      	ldr	r3, [pc, #216]	@ (800dc68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db94:	ee07 3a90 	vmov	s15, r3
 800db98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800dba0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dba4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dbb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dbbc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800dbbe:	4b2a      	ldr	r3, [pc, #168]	@ (800dc68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbc2:	0a5b      	lsrs	r3, r3, #9
 800dbc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dbc8:	ee07 3a90 	vmov	s15, r3
 800dbcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dbd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dbd8:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbe4:	ee17 2a90 	vmov	r2, s15
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800dbec:	4b1e      	ldr	r3, [pc, #120]	@ (800dc68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbf0:	0c1b      	lsrs	r3, r3, #16
 800dbf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dbf6:	ee07 3a90 	vmov	s15, r3
 800dbfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dc02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc06:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc12:	ee17 2a90 	vmov	r2, s15
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dc1a:	4b13      	ldr	r3, [pc, #76]	@ (800dc68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc1e:	0e1b      	lsrs	r3, r3, #24
 800dc20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc24:	ee07 3a90 	vmov	s15, r3
 800dc28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dc30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc34:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc40:	ee17 2a90 	vmov	r2, s15
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dc48:	e008      	b.n	800dc5c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	609a      	str	r2, [r3, #8]
}
 800dc5c:	bf00      	nop
 800dc5e:	3724      	adds	r7, #36	@ 0x24
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr
 800dc68:	58024400 	.word	0x58024400
 800dc6c:	03d09000 	.word	0x03d09000
 800dc70:	46000000 	.word	0x46000000
 800dc74:	4c742400 	.word	0x4c742400
 800dc78:	4a742400 	.word	0x4a742400
 800dc7c:	4af42400 	.word	0x4af42400

0800dc80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dc8e:	4b53      	ldr	r3, [pc, #332]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dc90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc92:	f003 0303 	and.w	r3, r3, #3
 800dc96:	2b03      	cmp	r3, #3
 800dc98:	d101      	bne.n	800dc9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e099      	b.n	800ddd2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dc9e:	4b4f      	ldr	r3, [pc, #316]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4a4e      	ldr	r2, [pc, #312]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dca4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcaa:	f7f6 fb51 	bl	8004350 <HAL_GetTick>
 800dcae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dcb0:	e008      	b.n	800dcc4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dcb2:	f7f6 fb4d 	bl	8004350 <HAL_GetTick>
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	1ad3      	subs	r3, r2, r3
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	d901      	bls.n	800dcc4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dcc0:	2303      	movs	r3, #3
 800dcc2:	e086      	b.n	800ddd2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dcc4:	4b45      	ldr	r3, [pc, #276]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d1f0      	bne.n	800dcb2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dcd0:	4b42      	ldr	r3, [pc, #264]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dcd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcd4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	031b      	lsls	r3, r3, #12
 800dcde:	493f      	ldr	r1, [pc, #252]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dce0:	4313      	orrs	r3, r2
 800dce2:	628b      	str	r3, [r1, #40]	@ 0x28
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	685b      	ldr	r3, [r3, #4]
 800dce8:	3b01      	subs	r3, #1
 800dcea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	689b      	ldr	r3, [r3, #8]
 800dcf2:	3b01      	subs	r3, #1
 800dcf4:	025b      	lsls	r3, r3, #9
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	431a      	orrs	r2, r3
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	68db      	ldr	r3, [r3, #12]
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	041b      	lsls	r3, r3, #16
 800dd02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800dd06:	431a      	orrs	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	691b      	ldr	r3, [r3, #16]
 800dd0c:	3b01      	subs	r3, #1
 800dd0e:	061b      	lsls	r3, r3, #24
 800dd10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800dd14:	4931      	ldr	r1, [pc, #196]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dd16:	4313      	orrs	r3, r2
 800dd18:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dd1a:	4b30      	ldr	r3, [pc, #192]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dd1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	695b      	ldr	r3, [r3, #20]
 800dd26:	492d      	ldr	r1, [pc, #180]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dd2c:	4b2b      	ldr	r3, [pc, #172]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dd2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd30:	f023 0220 	bic.w	r2, r3, #32
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	699b      	ldr	r3, [r3, #24]
 800dd38:	4928      	ldr	r1, [pc, #160]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dd3a:	4313      	orrs	r3, r2
 800dd3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dd3e:	4b27      	ldr	r3, [pc, #156]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dd40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd42:	4a26      	ldr	r2, [pc, #152]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dd44:	f023 0310 	bic.w	r3, r3, #16
 800dd48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dd4a:	4b24      	ldr	r3, [pc, #144]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dd4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dd4e:	4b24      	ldr	r3, [pc, #144]	@ (800dde0 <RCCEx_PLL2_Config+0x160>)
 800dd50:	4013      	ands	r3, r2
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	69d2      	ldr	r2, [r2, #28]
 800dd56:	00d2      	lsls	r2, r2, #3
 800dd58:	4920      	ldr	r1, [pc, #128]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dd5e:	4b1f      	ldr	r3, [pc, #124]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dd60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd62:	4a1e      	ldr	r2, [pc, #120]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dd64:	f043 0310 	orr.w	r3, r3, #16
 800dd68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d106      	bne.n	800dd7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dd70:	4b1a      	ldr	r3, [pc, #104]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dd72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd74:	4a19      	ldr	r2, [pc, #100]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dd76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dd7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd7c:	e00f      	b.n	800dd9e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d106      	bne.n	800dd92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dd84:	4b15      	ldr	r3, [pc, #84]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dd86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd88:	4a14      	ldr	r2, [pc, #80]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dd8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd90:	e005      	b.n	800dd9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dd92:	4b12      	ldr	r3, [pc, #72]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dd94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd96:	4a11      	ldr	r2, [pc, #68]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dd98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dd9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dd9e:	4b0f      	ldr	r3, [pc, #60]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4a0e      	ldr	r2, [pc, #56]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800dda4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dda8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddaa:	f7f6 fad1 	bl	8004350 <HAL_GetTick>
 800ddae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ddb0:	e008      	b.n	800ddc4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ddb2:	f7f6 facd 	bl	8004350 <HAL_GetTick>
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	1ad3      	subs	r3, r2, r3
 800ddbc:	2b02      	cmp	r3, #2
 800ddbe:	d901      	bls.n	800ddc4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ddc0:	2303      	movs	r3, #3
 800ddc2:	e006      	b.n	800ddd2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ddc4:	4b05      	ldr	r3, [pc, #20]	@ (800dddc <RCCEx_PLL2_Config+0x15c>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d0f0      	beq.n	800ddb2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ddd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3710      	adds	r7, #16
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	58024400 	.word	0x58024400
 800dde0:	ffff0007 	.word	0xffff0007

0800dde4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ddf2:	4b53      	ldr	r3, [pc, #332]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800ddf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddf6:	f003 0303 	and.w	r3, r3, #3
 800ddfa:	2b03      	cmp	r3, #3
 800ddfc:	d101      	bne.n	800de02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ddfe:	2301      	movs	r3, #1
 800de00:	e099      	b.n	800df36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800de02:	4b4f      	ldr	r3, [pc, #316]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4a4e      	ldr	r2, [pc, #312]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800de08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800de0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de0e:	f7f6 fa9f 	bl	8004350 <HAL_GetTick>
 800de12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800de14:	e008      	b.n	800de28 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800de16:	f7f6 fa9b 	bl	8004350 <HAL_GetTick>
 800de1a:	4602      	mov	r2, r0
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	1ad3      	subs	r3, r2, r3
 800de20:	2b02      	cmp	r3, #2
 800de22:	d901      	bls.n	800de28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800de24:	2303      	movs	r3, #3
 800de26:	e086      	b.n	800df36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800de28:	4b45      	ldr	r3, [pc, #276]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800de30:	2b00      	cmp	r3, #0
 800de32:	d1f0      	bne.n	800de16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800de34:	4b42      	ldr	r3, [pc, #264]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800de36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de38:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	051b      	lsls	r3, r3, #20
 800de42:	493f      	ldr	r1, [pc, #252]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800de44:	4313      	orrs	r3, r2
 800de46:	628b      	str	r3, [r1, #40]	@ 0x28
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	685b      	ldr	r3, [r3, #4]
 800de4c:	3b01      	subs	r3, #1
 800de4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	689b      	ldr	r3, [r3, #8]
 800de56:	3b01      	subs	r3, #1
 800de58:	025b      	lsls	r3, r3, #9
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	431a      	orrs	r2, r3
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	68db      	ldr	r3, [r3, #12]
 800de62:	3b01      	subs	r3, #1
 800de64:	041b      	lsls	r3, r3, #16
 800de66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800de6a:	431a      	orrs	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	691b      	ldr	r3, [r3, #16]
 800de70:	3b01      	subs	r3, #1
 800de72:	061b      	lsls	r3, r3, #24
 800de74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800de78:	4931      	ldr	r1, [pc, #196]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800de7a:	4313      	orrs	r3, r2
 800de7c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800de7e:	4b30      	ldr	r3, [pc, #192]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800de80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	695b      	ldr	r3, [r3, #20]
 800de8a:	492d      	ldr	r1, [pc, #180]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800de8c:	4313      	orrs	r3, r2
 800de8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800de90:	4b2b      	ldr	r3, [pc, #172]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800de92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de94:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	699b      	ldr	r3, [r3, #24]
 800de9c:	4928      	ldr	r1, [pc, #160]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800de9e:	4313      	orrs	r3, r2
 800dea0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dea2:	4b27      	ldr	r3, [pc, #156]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800dea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dea6:	4a26      	ldr	r2, [pc, #152]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800dea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800deac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800deae:	4b24      	ldr	r3, [pc, #144]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800deb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800deb2:	4b24      	ldr	r3, [pc, #144]	@ (800df44 <RCCEx_PLL3_Config+0x160>)
 800deb4:	4013      	ands	r3, r2
 800deb6:	687a      	ldr	r2, [r7, #4]
 800deb8:	69d2      	ldr	r2, [r2, #28]
 800deba:	00d2      	lsls	r2, r2, #3
 800debc:	4920      	ldr	r1, [pc, #128]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800debe:	4313      	orrs	r3, r2
 800dec0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dec2:	4b1f      	ldr	r3, [pc, #124]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800dec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dec6:	4a1e      	ldr	r2, [pc, #120]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800dec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800decc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d106      	bne.n	800dee2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ded4:	4b1a      	ldr	r3, [pc, #104]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800ded6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ded8:	4a19      	ldr	r2, [pc, #100]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800deda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800dede:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dee0:	e00f      	b.n	800df02 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d106      	bne.n	800def6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dee8:	4b15      	ldr	r3, [pc, #84]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800deea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deec:	4a14      	ldr	r2, [pc, #80]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800deee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800def2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800def4:	e005      	b.n	800df02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800def6:	4b12      	ldr	r3, [pc, #72]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800def8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800defa:	4a11      	ldr	r2, [pc, #68]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800defc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800df00:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800df02:	4b0f      	ldr	r3, [pc, #60]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4a0e      	ldr	r2, [pc, #56]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800df08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800df0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df0e:	f7f6 fa1f 	bl	8004350 <HAL_GetTick>
 800df12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800df14:	e008      	b.n	800df28 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800df16:	f7f6 fa1b 	bl	8004350 <HAL_GetTick>
 800df1a:	4602      	mov	r2, r0
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	1ad3      	subs	r3, r2, r3
 800df20:	2b02      	cmp	r3, #2
 800df22:	d901      	bls.n	800df28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800df24:	2303      	movs	r3, #3
 800df26:	e006      	b.n	800df36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800df28:	4b05      	ldr	r3, [pc, #20]	@ (800df40 <RCCEx_PLL3_Config+0x15c>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800df30:	2b00      	cmp	r3, #0
 800df32:	d0f0      	beq.n	800df16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800df34:	7bfb      	ldrb	r3, [r7, #15]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3710      	adds	r7, #16
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	58024400 	.word	0x58024400
 800df44:	ffff0007 	.word	0xffff0007

0800df48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d101      	bne.n	800df5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800df56:	2301      	movs	r3, #1
 800df58:	e049      	b.n	800dfee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800df60:	b2db      	uxtb	r3, r3
 800df62:	2b00      	cmp	r3, #0
 800df64:	d106      	bne.n	800df74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2200      	movs	r2, #0
 800df6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f7f5 fe44 	bl	8003bfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2202      	movs	r2, #2
 800df78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681a      	ldr	r2, [r3, #0]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	3304      	adds	r3, #4
 800df84:	4619      	mov	r1, r3
 800df86:	4610      	mov	r0, r2
 800df88:	f000 fbf0 	bl	800e76c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2201      	movs	r2, #1
 800df90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2201      	movs	r2, #1
 800df98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2201      	movs	r2, #1
 800dfa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2201      	movs	r2, #1
 800dfb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2201      	movs	r2, #1
 800dfd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2201      	movs	r2, #1
 800dfe0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dfec:	2300      	movs	r3, #0
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3708      	adds	r7, #8
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
	...

0800dff8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d109      	bne.n	800e01c <HAL_TIM_PWM_Start+0x24>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	2b01      	cmp	r3, #1
 800e012:	bf14      	ite	ne
 800e014:	2301      	movne	r3, #1
 800e016:	2300      	moveq	r3, #0
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	e03c      	b.n	800e096 <HAL_TIM_PWM_Start+0x9e>
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	2b04      	cmp	r3, #4
 800e020:	d109      	bne.n	800e036 <HAL_TIM_PWM_Start+0x3e>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e028:	b2db      	uxtb	r3, r3
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	bf14      	ite	ne
 800e02e:	2301      	movne	r3, #1
 800e030:	2300      	moveq	r3, #0
 800e032:	b2db      	uxtb	r3, r3
 800e034:	e02f      	b.n	800e096 <HAL_TIM_PWM_Start+0x9e>
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	2b08      	cmp	r3, #8
 800e03a:	d109      	bne.n	800e050 <HAL_TIM_PWM_Start+0x58>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e042:	b2db      	uxtb	r3, r3
 800e044:	2b01      	cmp	r3, #1
 800e046:	bf14      	ite	ne
 800e048:	2301      	movne	r3, #1
 800e04a:	2300      	moveq	r3, #0
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	e022      	b.n	800e096 <HAL_TIM_PWM_Start+0x9e>
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	2b0c      	cmp	r3, #12
 800e054:	d109      	bne.n	800e06a <HAL_TIM_PWM_Start+0x72>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	2b01      	cmp	r3, #1
 800e060:	bf14      	ite	ne
 800e062:	2301      	movne	r3, #1
 800e064:	2300      	moveq	r3, #0
 800e066:	b2db      	uxtb	r3, r3
 800e068:	e015      	b.n	800e096 <HAL_TIM_PWM_Start+0x9e>
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	2b10      	cmp	r3, #16
 800e06e:	d109      	bne.n	800e084 <HAL_TIM_PWM_Start+0x8c>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e076:	b2db      	uxtb	r3, r3
 800e078:	2b01      	cmp	r3, #1
 800e07a:	bf14      	ite	ne
 800e07c:	2301      	movne	r3, #1
 800e07e:	2300      	moveq	r3, #0
 800e080:	b2db      	uxtb	r3, r3
 800e082:	e008      	b.n	800e096 <HAL_TIM_PWM_Start+0x9e>
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	bf14      	ite	ne
 800e090:	2301      	movne	r3, #1
 800e092:	2300      	moveq	r3, #0
 800e094:	b2db      	uxtb	r3, r3
 800e096:	2b00      	cmp	r3, #0
 800e098:	d001      	beq.n	800e09e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e09a:	2301      	movs	r3, #1
 800e09c:	e0ab      	b.n	800e1f6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d104      	bne.n	800e0ae <HAL_TIM_PWM_Start+0xb6>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2202      	movs	r2, #2
 800e0a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e0ac:	e023      	b.n	800e0f6 <HAL_TIM_PWM_Start+0xfe>
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	2b04      	cmp	r3, #4
 800e0b2:	d104      	bne.n	800e0be <HAL_TIM_PWM_Start+0xc6>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2202      	movs	r2, #2
 800e0b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e0bc:	e01b      	b.n	800e0f6 <HAL_TIM_PWM_Start+0xfe>
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	2b08      	cmp	r3, #8
 800e0c2:	d104      	bne.n	800e0ce <HAL_TIM_PWM_Start+0xd6>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2202      	movs	r2, #2
 800e0c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e0cc:	e013      	b.n	800e0f6 <HAL_TIM_PWM_Start+0xfe>
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	2b0c      	cmp	r3, #12
 800e0d2:	d104      	bne.n	800e0de <HAL_TIM_PWM_Start+0xe6>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2202      	movs	r2, #2
 800e0d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e0dc:	e00b      	b.n	800e0f6 <HAL_TIM_PWM_Start+0xfe>
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	2b10      	cmp	r3, #16
 800e0e2:	d104      	bne.n	800e0ee <HAL_TIM_PWM_Start+0xf6>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2202      	movs	r2, #2
 800e0e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e0ec:	e003      	b.n	800e0f6 <HAL_TIM_PWM_Start+0xfe>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2202      	movs	r2, #2
 800e0f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	6839      	ldr	r1, [r7, #0]
 800e0fe:	4618      	mov	r0, r3
 800e100:	f000 ffe6 	bl	800f0d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4a3d      	ldr	r2, [pc, #244]	@ (800e200 <HAL_TIM_PWM_Start+0x208>)
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d013      	beq.n	800e136 <HAL_TIM_PWM_Start+0x13e>
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	4a3c      	ldr	r2, [pc, #240]	@ (800e204 <HAL_TIM_PWM_Start+0x20c>)
 800e114:	4293      	cmp	r3, r2
 800e116:	d00e      	beq.n	800e136 <HAL_TIM_PWM_Start+0x13e>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4a3a      	ldr	r2, [pc, #232]	@ (800e208 <HAL_TIM_PWM_Start+0x210>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d009      	beq.n	800e136 <HAL_TIM_PWM_Start+0x13e>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4a39      	ldr	r2, [pc, #228]	@ (800e20c <HAL_TIM_PWM_Start+0x214>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d004      	beq.n	800e136 <HAL_TIM_PWM_Start+0x13e>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a37      	ldr	r2, [pc, #220]	@ (800e210 <HAL_TIM_PWM_Start+0x218>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d101      	bne.n	800e13a <HAL_TIM_PWM_Start+0x142>
 800e136:	2301      	movs	r3, #1
 800e138:	e000      	b.n	800e13c <HAL_TIM_PWM_Start+0x144>
 800e13a:	2300      	movs	r3, #0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d007      	beq.n	800e150 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e14e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4a2a      	ldr	r2, [pc, #168]	@ (800e200 <HAL_TIM_PWM_Start+0x208>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d02c      	beq.n	800e1b4 <HAL_TIM_PWM_Start+0x1bc>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e162:	d027      	beq.n	800e1b4 <HAL_TIM_PWM_Start+0x1bc>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4a2a      	ldr	r2, [pc, #168]	@ (800e214 <HAL_TIM_PWM_Start+0x21c>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d022      	beq.n	800e1b4 <HAL_TIM_PWM_Start+0x1bc>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	4a29      	ldr	r2, [pc, #164]	@ (800e218 <HAL_TIM_PWM_Start+0x220>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d01d      	beq.n	800e1b4 <HAL_TIM_PWM_Start+0x1bc>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4a27      	ldr	r2, [pc, #156]	@ (800e21c <HAL_TIM_PWM_Start+0x224>)
 800e17e:	4293      	cmp	r3, r2
 800e180:	d018      	beq.n	800e1b4 <HAL_TIM_PWM_Start+0x1bc>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	4a1f      	ldr	r2, [pc, #124]	@ (800e204 <HAL_TIM_PWM_Start+0x20c>)
 800e188:	4293      	cmp	r3, r2
 800e18a:	d013      	beq.n	800e1b4 <HAL_TIM_PWM_Start+0x1bc>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a23      	ldr	r2, [pc, #140]	@ (800e220 <HAL_TIM_PWM_Start+0x228>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d00e      	beq.n	800e1b4 <HAL_TIM_PWM_Start+0x1bc>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4a1b      	ldr	r2, [pc, #108]	@ (800e208 <HAL_TIM_PWM_Start+0x210>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d009      	beq.n	800e1b4 <HAL_TIM_PWM_Start+0x1bc>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	4a1f      	ldr	r2, [pc, #124]	@ (800e224 <HAL_TIM_PWM_Start+0x22c>)
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d004      	beq.n	800e1b4 <HAL_TIM_PWM_Start+0x1bc>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4a1e      	ldr	r2, [pc, #120]	@ (800e228 <HAL_TIM_PWM_Start+0x230>)
 800e1b0:	4293      	cmp	r3, r2
 800e1b2:	d115      	bne.n	800e1e0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	689a      	ldr	r2, [r3, #8]
 800e1ba:	4b1c      	ldr	r3, [pc, #112]	@ (800e22c <HAL_TIM_PWM_Start+0x234>)
 800e1bc:	4013      	ands	r3, r2
 800e1be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2b06      	cmp	r3, #6
 800e1c4:	d015      	beq.n	800e1f2 <HAL_TIM_PWM_Start+0x1fa>
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1cc:	d011      	beq.n	800e1f2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f042 0201 	orr.w	r2, r2, #1
 800e1dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1de:	e008      	b.n	800e1f2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	681a      	ldr	r2, [r3, #0]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f042 0201 	orr.w	r2, r2, #1
 800e1ee:	601a      	str	r2, [r3, #0]
 800e1f0:	e000      	b.n	800e1f4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e1f4:	2300      	movs	r3, #0
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	40010000 	.word	0x40010000
 800e204:	40010400 	.word	0x40010400
 800e208:	40014000 	.word	0x40014000
 800e20c:	40014400 	.word	0x40014400
 800e210:	40014800 	.word	0x40014800
 800e214:	40000400 	.word	0x40000400
 800e218:	40000800 	.word	0x40000800
 800e21c:	40000c00 	.word	0x40000c00
 800e220:	40001800 	.word	0x40001800
 800e224:	4000e000 	.word	0x4000e000
 800e228:	4000e400 	.word	0x4000e400
 800e22c:	00010007 	.word	0x00010007

0800e230 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	2200      	movs	r2, #0
 800e240:	6839      	ldr	r1, [r7, #0]
 800e242:	4618      	mov	r0, r3
 800e244:	f000 ff44 	bl	800f0d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4a3e      	ldr	r2, [pc, #248]	@ (800e348 <HAL_TIM_PWM_Stop+0x118>)
 800e24e:	4293      	cmp	r3, r2
 800e250:	d013      	beq.n	800e27a <HAL_TIM_PWM_Stop+0x4a>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4a3d      	ldr	r2, [pc, #244]	@ (800e34c <HAL_TIM_PWM_Stop+0x11c>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	d00e      	beq.n	800e27a <HAL_TIM_PWM_Stop+0x4a>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4a3b      	ldr	r2, [pc, #236]	@ (800e350 <HAL_TIM_PWM_Stop+0x120>)
 800e262:	4293      	cmp	r3, r2
 800e264:	d009      	beq.n	800e27a <HAL_TIM_PWM_Stop+0x4a>
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4a3a      	ldr	r2, [pc, #232]	@ (800e354 <HAL_TIM_PWM_Stop+0x124>)
 800e26c:	4293      	cmp	r3, r2
 800e26e:	d004      	beq.n	800e27a <HAL_TIM_PWM_Stop+0x4a>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a38      	ldr	r2, [pc, #224]	@ (800e358 <HAL_TIM_PWM_Stop+0x128>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d101      	bne.n	800e27e <HAL_TIM_PWM_Stop+0x4e>
 800e27a:	2301      	movs	r3, #1
 800e27c:	e000      	b.n	800e280 <HAL_TIM_PWM_Stop+0x50>
 800e27e:	2300      	movs	r3, #0
 800e280:	2b00      	cmp	r3, #0
 800e282:	d017      	beq.n	800e2b4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	6a1a      	ldr	r2, [r3, #32]
 800e28a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e28e:	4013      	ands	r3, r2
 800e290:	2b00      	cmp	r3, #0
 800e292:	d10f      	bne.n	800e2b4 <HAL_TIM_PWM_Stop+0x84>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	6a1a      	ldr	r2, [r3, #32]
 800e29a:	f240 4344 	movw	r3, #1092	@ 0x444
 800e29e:	4013      	ands	r3, r2
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d107      	bne.n	800e2b4 <HAL_TIM_PWM_Stop+0x84>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e2b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	6a1a      	ldr	r2, [r3, #32]
 800e2ba:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e2be:	4013      	ands	r3, r2
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d10f      	bne.n	800e2e4 <HAL_TIM_PWM_Stop+0xb4>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	6a1a      	ldr	r2, [r3, #32]
 800e2ca:	f240 4344 	movw	r3, #1092	@ 0x444
 800e2ce:	4013      	ands	r3, r2
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d107      	bne.n	800e2e4 <HAL_TIM_PWM_Stop+0xb4>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	f022 0201 	bic.w	r2, r2, #1
 800e2e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d104      	bne.n	800e2f4 <HAL_TIM_PWM_Stop+0xc4>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e2f2:	e023      	b.n	800e33c <HAL_TIM_PWM_Stop+0x10c>
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	2b04      	cmp	r3, #4
 800e2f8:	d104      	bne.n	800e304 <HAL_TIM_PWM_Stop+0xd4>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e302:	e01b      	b.n	800e33c <HAL_TIM_PWM_Stop+0x10c>
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	2b08      	cmp	r3, #8
 800e308:	d104      	bne.n	800e314 <HAL_TIM_PWM_Stop+0xe4>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2201      	movs	r2, #1
 800e30e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e312:	e013      	b.n	800e33c <HAL_TIM_PWM_Stop+0x10c>
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	2b0c      	cmp	r3, #12
 800e318:	d104      	bne.n	800e324 <HAL_TIM_PWM_Stop+0xf4>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2201      	movs	r2, #1
 800e31e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e322:	e00b      	b.n	800e33c <HAL_TIM_PWM_Stop+0x10c>
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	2b10      	cmp	r3, #16
 800e328:	d104      	bne.n	800e334 <HAL_TIM_PWM_Stop+0x104>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2201      	movs	r2, #1
 800e32e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e332:	e003      	b.n	800e33c <HAL_TIM_PWM_Stop+0x10c>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2201      	movs	r2, #1
 800e338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800e33c:	2300      	movs	r3, #0
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	40010000 	.word	0x40010000
 800e34c:	40010400 	.word	0x40010400
 800e350:	40014000 	.word	0x40014000
 800e354:	40014400 	.word	0x40014400
 800e358:	40014800 	.word	0x40014800

0800e35c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d101      	bne.n	800e36e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e36a:	2301      	movs	r3, #1
 800e36c:	e049      	b.n	800e402 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e374:	b2db      	uxtb	r3, r3
 800e376:	2b00      	cmp	r3, #0
 800e378:	d106      	bne.n	800e388 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2200      	movs	r2, #0
 800e37e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f7f5 fc88 	bl	8003c98 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2202      	movs	r2, #2
 800e38c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	3304      	adds	r3, #4
 800e398:	4619      	mov	r1, r3
 800e39a:	4610      	mov	r0, r2
 800e39c:	f000 f9e6 	bl	800e76c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e400:	2300      	movs	r3, #0
}
 800e402:	4618      	mov	r0, r3
 800e404:	3708      	adds	r7, #8
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b086      	sub	sp, #24
 800e40e:	af00      	add	r7, sp, #0
 800e410:	60f8      	str	r0, [r7, #12]
 800e412:	60b9      	str	r1, [r7, #8]
 800e414:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e416:	2300      	movs	r3, #0
 800e418:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e420:	2b01      	cmp	r3, #1
 800e422:	d101      	bne.n	800e428 <HAL_TIM_IC_ConfigChannel+0x1e>
 800e424:	2302      	movs	r3, #2
 800e426:	e088      	b.n	800e53a <HAL_TIM_IC_ConfigChannel+0x130>
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2201      	movs	r2, #1
 800e42c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d11b      	bne.n	800e46e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800e446:	f000 fd0d 	bl	800ee64 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	699a      	ldr	r2, [r3, #24]
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f022 020c 	bic.w	r2, r2, #12
 800e458:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	6999      	ldr	r1, [r3, #24]
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	689a      	ldr	r2, [r3, #8]
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	430a      	orrs	r2, r1
 800e46a:	619a      	str	r2, [r3, #24]
 800e46c:	e060      	b.n	800e530 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2b04      	cmp	r3, #4
 800e472:	d11c      	bne.n	800e4ae <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800e484:	f000 fd6e 	bl	800ef64 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	699a      	ldr	r2, [r3, #24]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e496:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	6999      	ldr	r1, [r3, #24]
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	689b      	ldr	r3, [r3, #8]
 800e4a2:	021a      	lsls	r2, r3, #8
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	430a      	orrs	r2, r1
 800e4aa:	619a      	str	r2, [r3, #24]
 800e4ac:	e040      	b.n	800e530 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2b08      	cmp	r3, #8
 800e4b2:	d11b      	bne.n	800e4ec <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800e4c4:	f000 fd8b 	bl	800efde <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	69da      	ldr	r2, [r3, #28]
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f022 020c 	bic.w	r2, r2, #12
 800e4d6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	69d9      	ldr	r1, [r3, #28]
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	689a      	ldr	r2, [r3, #8]
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	430a      	orrs	r2, r1
 800e4e8:	61da      	str	r2, [r3, #28]
 800e4ea:	e021      	b.n	800e530 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2b0c      	cmp	r3, #12
 800e4f0:	d11c      	bne.n	800e52c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800e502:	f000 fda8 	bl	800f056 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	69da      	ldr	r2, [r3, #28]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e514:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	69d9      	ldr	r1, [r3, #28]
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	689b      	ldr	r3, [r3, #8]
 800e520:	021a      	lsls	r2, r3, #8
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	430a      	orrs	r2, r1
 800e528:	61da      	str	r2, [r3, #28]
 800e52a:	e001      	b.n	800e530 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800e52c:	2301      	movs	r3, #1
 800e52e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2200      	movs	r2, #0
 800e534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e538:	7dfb      	ldrb	r3, [r7, #23]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3718      	adds	r7, #24
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
	...

0800e544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b086      	sub	sp, #24
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60f8      	str	r0, [r7, #12]
 800e54c:	60b9      	str	r1, [r7, #8]
 800e54e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e550:	2300      	movs	r3, #0
 800e552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d101      	bne.n	800e562 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e55e:	2302      	movs	r3, #2
 800e560:	e0ff      	b.n	800e762 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2201      	movs	r2, #1
 800e566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2b14      	cmp	r3, #20
 800e56e:	f200 80f0 	bhi.w	800e752 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e572:	a201      	add	r2, pc, #4	@ (adr r2, 800e578 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e578:	0800e5cd 	.word	0x0800e5cd
 800e57c:	0800e753 	.word	0x0800e753
 800e580:	0800e753 	.word	0x0800e753
 800e584:	0800e753 	.word	0x0800e753
 800e588:	0800e60d 	.word	0x0800e60d
 800e58c:	0800e753 	.word	0x0800e753
 800e590:	0800e753 	.word	0x0800e753
 800e594:	0800e753 	.word	0x0800e753
 800e598:	0800e64f 	.word	0x0800e64f
 800e59c:	0800e753 	.word	0x0800e753
 800e5a0:	0800e753 	.word	0x0800e753
 800e5a4:	0800e753 	.word	0x0800e753
 800e5a8:	0800e68f 	.word	0x0800e68f
 800e5ac:	0800e753 	.word	0x0800e753
 800e5b0:	0800e753 	.word	0x0800e753
 800e5b4:	0800e753 	.word	0x0800e753
 800e5b8:	0800e6d1 	.word	0x0800e6d1
 800e5bc:	0800e753 	.word	0x0800e753
 800e5c0:	0800e753 	.word	0x0800e753
 800e5c4:	0800e753 	.word	0x0800e753
 800e5c8:	0800e711 	.word	0x0800e711
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	68b9      	ldr	r1, [r7, #8]
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f000 f970 	bl	800e8b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	699a      	ldr	r2, [r3, #24]
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f042 0208 	orr.w	r2, r2, #8
 800e5e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	699a      	ldr	r2, [r3, #24]
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f022 0204 	bic.w	r2, r2, #4
 800e5f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	6999      	ldr	r1, [r3, #24]
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	691a      	ldr	r2, [r3, #16]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	430a      	orrs	r2, r1
 800e608:	619a      	str	r2, [r3, #24]
      break;
 800e60a:	e0a5      	b.n	800e758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	68b9      	ldr	r1, [r7, #8]
 800e612:	4618      	mov	r0, r3
 800e614:	f000 f9e0 	bl	800e9d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	699a      	ldr	r2, [r3, #24]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	699a      	ldr	r2, [r3, #24]
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	6999      	ldr	r1, [r3, #24]
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	691b      	ldr	r3, [r3, #16]
 800e642:	021a      	lsls	r2, r3, #8
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	430a      	orrs	r2, r1
 800e64a:	619a      	str	r2, [r3, #24]
      break;
 800e64c:	e084      	b.n	800e758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	68b9      	ldr	r1, [r7, #8]
 800e654:	4618      	mov	r0, r3
 800e656:	f000 fa49 	bl	800eaec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	69da      	ldr	r2, [r3, #28]
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f042 0208 	orr.w	r2, r2, #8
 800e668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	69da      	ldr	r2, [r3, #28]
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f022 0204 	bic.w	r2, r2, #4
 800e678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	69d9      	ldr	r1, [r3, #28]
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	691a      	ldr	r2, [r3, #16]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	430a      	orrs	r2, r1
 800e68a:	61da      	str	r2, [r3, #28]
      break;
 800e68c:	e064      	b.n	800e758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	68b9      	ldr	r1, [r7, #8]
 800e694:	4618      	mov	r0, r3
 800e696:	f000 fab1 	bl	800ebfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	69da      	ldr	r2, [r3, #28]
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e6a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	69da      	ldr	r2, [r3, #28]
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e6b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	69d9      	ldr	r1, [r3, #28]
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	691b      	ldr	r3, [r3, #16]
 800e6c4:	021a      	lsls	r2, r3, #8
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	430a      	orrs	r2, r1
 800e6cc:	61da      	str	r2, [r3, #28]
      break;
 800e6ce:	e043      	b.n	800e758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	68b9      	ldr	r1, [r7, #8]
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f000 fafa 	bl	800ecd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f042 0208 	orr.w	r2, r2, #8
 800e6ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f022 0204 	bic.w	r2, r2, #4
 800e6fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	691a      	ldr	r2, [r3, #16]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	430a      	orrs	r2, r1
 800e70c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e70e:	e023      	b.n	800e758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	68b9      	ldr	r1, [r7, #8]
 800e716:	4618      	mov	r0, r3
 800e718:	f000 fb3e 	bl	800ed98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e72a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e73a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	691b      	ldr	r3, [r3, #16]
 800e746:	021a      	lsls	r2, r3, #8
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	430a      	orrs	r2, r1
 800e74e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e750:	e002      	b.n	800e758 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e752:	2301      	movs	r3, #1
 800e754:	75fb      	strb	r3, [r7, #23]
      break;
 800e756:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2200      	movs	r2, #0
 800e75c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e760:	7dfb      	ldrb	r3, [r7, #23]
}
 800e762:	4618      	mov	r0, r3
 800e764:	3718      	adds	r7, #24
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop

0800e76c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b085      	sub	sp, #20
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	4a44      	ldr	r2, [pc, #272]	@ (800e890 <TIM_Base_SetConfig+0x124>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d013      	beq.n	800e7ac <TIM_Base_SetConfig+0x40>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e78a:	d00f      	beq.n	800e7ac <TIM_Base_SetConfig+0x40>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	4a41      	ldr	r2, [pc, #260]	@ (800e894 <TIM_Base_SetConfig+0x128>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d00b      	beq.n	800e7ac <TIM_Base_SetConfig+0x40>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	4a40      	ldr	r2, [pc, #256]	@ (800e898 <TIM_Base_SetConfig+0x12c>)
 800e798:	4293      	cmp	r3, r2
 800e79a:	d007      	beq.n	800e7ac <TIM_Base_SetConfig+0x40>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	4a3f      	ldr	r2, [pc, #252]	@ (800e89c <TIM_Base_SetConfig+0x130>)
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	d003      	beq.n	800e7ac <TIM_Base_SetConfig+0x40>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	4a3e      	ldr	r2, [pc, #248]	@ (800e8a0 <TIM_Base_SetConfig+0x134>)
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d108      	bne.n	800e7be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e7b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	685b      	ldr	r3, [r3, #4]
 800e7b8:	68fa      	ldr	r2, [r7, #12]
 800e7ba:	4313      	orrs	r3, r2
 800e7bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	4a33      	ldr	r2, [pc, #204]	@ (800e890 <TIM_Base_SetConfig+0x124>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d027      	beq.n	800e816 <TIM_Base_SetConfig+0xaa>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7cc:	d023      	beq.n	800e816 <TIM_Base_SetConfig+0xaa>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	4a30      	ldr	r2, [pc, #192]	@ (800e894 <TIM_Base_SetConfig+0x128>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d01f      	beq.n	800e816 <TIM_Base_SetConfig+0xaa>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4a2f      	ldr	r2, [pc, #188]	@ (800e898 <TIM_Base_SetConfig+0x12c>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d01b      	beq.n	800e816 <TIM_Base_SetConfig+0xaa>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4a2e      	ldr	r2, [pc, #184]	@ (800e89c <TIM_Base_SetConfig+0x130>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d017      	beq.n	800e816 <TIM_Base_SetConfig+0xaa>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	4a2d      	ldr	r2, [pc, #180]	@ (800e8a0 <TIM_Base_SetConfig+0x134>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d013      	beq.n	800e816 <TIM_Base_SetConfig+0xaa>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	4a2c      	ldr	r2, [pc, #176]	@ (800e8a4 <TIM_Base_SetConfig+0x138>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d00f      	beq.n	800e816 <TIM_Base_SetConfig+0xaa>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	4a2b      	ldr	r2, [pc, #172]	@ (800e8a8 <TIM_Base_SetConfig+0x13c>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d00b      	beq.n	800e816 <TIM_Base_SetConfig+0xaa>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	4a2a      	ldr	r2, [pc, #168]	@ (800e8ac <TIM_Base_SetConfig+0x140>)
 800e802:	4293      	cmp	r3, r2
 800e804:	d007      	beq.n	800e816 <TIM_Base_SetConfig+0xaa>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	4a29      	ldr	r2, [pc, #164]	@ (800e8b0 <TIM_Base_SetConfig+0x144>)
 800e80a:	4293      	cmp	r3, r2
 800e80c:	d003      	beq.n	800e816 <TIM_Base_SetConfig+0xaa>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	4a28      	ldr	r2, [pc, #160]	@ (800e8b4 <TIM_Base_SetConfig+0x148>)
 800e812:	4293      	cmp	r3, r2
 800e814:	d108      	bne.n	800e828 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e81c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	68db      	ldr	r3, [r3, #12]
 800e822:	68fa      	ldr	r2, [r7, #12]
 800e824:	4313      	orrs	r3, r2
 800e826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	695b      	ldr	r3, [r3, #20]
 800e832:	4313      	orrs	r3, r2
 800e834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	68fa      	ldr	r2, [r7, #12]
 800e83a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	689a      	ldr	r2, [r3, #8]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	4a10      	ldr	r2, [pc, #64]	@ (800e890 <TIM_Base_SetConfig+0x124>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d00f      	beq.n	800e874 <TIM_Base_SetConfig+0x108>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	4a12      	ldr	r2, [pc, #72]	@ (800e8a0 <TIM_Base_SetConfig+0x134>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d00b      	beq.n	800e874 <TIM_Base_SetConfig+0x108>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	4a11      	ldr	r2, [pc, #68]	@ (800e8a4 <TIM_Base_SetConfig+0x138>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d007      	beq.n	800e874 <TIM_Base_SetConfig+0x108>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	4a10      	ldr	r2, [pc, #64]	@ (800e8a8 <TIM_Base_SetConfig+0x13c>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d003      	beq.n	800e874 <TIM_Base_SetConfig+0x108>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	4a0f      	ldr	r2, [pc, #60]	@ (800e8ac <TIM_Base_SetConfig+0x140>)
 800e870:	4293      	cmp	r3, r2
 800e872:	d103      	bne.n	800e87c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	691a      	ldr	r2, [r3, #16]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2201      	movs	r2, #1
 800e880:	615a      	str	r2, [r3, #20]
}
 800e882:	bf00      	nop
 800e884:	3714      	adds	r7, #20
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr
 800e88e:	bf00      	nop
 800e890:	40010000 	.word	0x40010000
 800e894:	40000400 	.word	0x40000400
 800e898:	40000800 	.word	0x40000800
 800e89c:	40000c00 	.word	0x40000c00
 800e8a0:	40010400 	.word	0x40010400
 800e8a4:	40014000 	.word	0x40014000
 800e8a8:	40014400 	.word	0x40014400
 800e8ac:	40014800 	.word	0x40014800
 800e8b0:	4000e000 	.word	0x4000e000
 800e8b4:	4000e400 	.word	0x4000e400

0800e8b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b087      	sub	sp, #28
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6a1b      	ldr	r3, [r3, #32]
 800e8c6:	f023 0201 	bic.w	r2, r3, #1
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6a1b      	ldr	r3, [r3, #32]
 800e8d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	699b      	ldr	r3, [r3, #24]
 800e8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e8e0:	68fa      	ldr	r2, [r7, #12]
 800e8e2:	4b37      	ldr	r3, [pc, #220]	@ (800e9c0 <TIM_OC1_SetConfig+0x108>)
 800e8e4:	4013      	ands	r3, r2
 800e8e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f023 0303 	bic.w	r3, r3, #3
 800e8ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	68fa      	ldr	r2, [r7, #12]
 800e8f6:	4313      	orrs	r3, r2
 800e8f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	f023 0302 	bic.w	r3, r3, #2
 800e900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	689b      	ldr	r3, [r3, #8]
 800e906:	697a      	ldr	r2, [r7, #20]
 800e908:	4313      	orrs	r3, r2
 800e90a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	4a2d      	ldr	r2, [pc, #180]	@ (800e9c4 <TIM_OC1_SetConfig+0x10c>)
 800e910:	4293      	cmp	r3, r2
 800e912:	d00f      	beq.n	800e934 <TIM_OC1_SetConfig+0x7c>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	4a2c      	ldr	r2, [pc, #176]	@ (800e9c8 <TIM_OC1_SetConfig+0x110>)
 800e918:	4293      	cmp	r3, r2
 800e91a:	d00b      	beq.n	800e934 <TIM_OC1_SetConfig+0x7c>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	4a2b      	ldr	r2, [pc, #172]	@ (800e9cc <TIM_OC1_SetConfig+0x114>)
 800e920:	4293      	cmp	r3, r2
 800e922:	d007      	beq.n	800e934 <TIM_OC1_SetConfig+0x7c>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	4a2a      	ldr	r2, [pc, #168]	@ (800e9d0 <TIM_OC1_SetConfig+0x118>)
 800e928:	4293      	cmp	r3, r2
 800e92a:	d003      	beq.n	800e934 <TIM_OC1_SetConfig+0x7c>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	4a29      	ldr	r2, [pc, #164]	@ (800e9d4 <TIM_OC1_SetConfig+0x11c>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d10c      	bne.n	800e94e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	f023 0308 	bic.w	r3, r3, #8
 800e93a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	68db      	ldr	r3, [r3, #12]
 800e940:	697a      	ldr	r2, [r7, #20]
 800e942:	4313      	orrs	r3, r2
 800e944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	f023 0304 	bic.w	r3, r3, #4
 800e94c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	4a1c      	ldr	r2, [pc, #112]	@ (800e9c4 <TIM_OC1_SetConfig+0x10c>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d00f      	beq.n	800e976 <TIM_OC1_SetConfig+0xbe>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	4a1b      	ldr	r2, [pc, #108]	@ (800e9c8 <TIM_OC1_SetConfig+0x110>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d00b      	beq.n	800e976 <TIM_OC1_SetConfig+0xbe>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4a1a      	ldr	r2, [pc, #104]	@ (800e9cc <TIM_OC1_SetConfig+0x114>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d007      	beq.n	800e976 <TIM_OC1_SetConfig+0xbe>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4a19      	ldr	r2, [pc, #100]	@ (800e9d0 <TIM_OC1_SetConfig+0x118>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d003      	beq.n	800e976 <TIM_OC1_SetConfig+0xbe>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4a18      	ldr	r2, [pc, #96]	@ (800e9d4 <TIM_OC1_SetConfig+0x11c>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d111      	bne.n	800e99a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e97c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	695b      	ldr	r3, [r3, #20]
 800e98a:	693a      	ldr	r2, [r7, #16]
 800e98c:	4313      	orrs	r3, r2
 800e98e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	699b      	ldr	r3, [r3, #24]
 800e994:	693a      	ldr	r2, [r7, #16]
 800e996:	4313      	orrs	r3, r2
 800e998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	693a      	ldr	r2, [r7, #16]
 800e99e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	68fa      	ldr	r2, [r7, #12]
 800e9a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	685a      	ldr	r2, [r3, #4]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	697a      	ldr	r2, [r7, #20]
 800e9b2:	621a      	str	r2, [r3, #32]
}
 800e9b4:	bf00      	nop
 800e9b6:	371c      	adds	r7, #28
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9be:	4770      	bx	lr
 800e9c0:	fffeff8f 	.word	0xfffeff8f
 800e9c4:	40010000 	.word	0x40010000
 800e9c8:	40010400 	.word	0x40010400
 800e9cc:	40014000 	.word	0x40014000
 800e9d0:	40014400 	.word	0x40014400
 800e9d4:	40014800 	.word	0x40014800

0800e9d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b087      	sub	sp, #28
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6a1b      	ldr	r3, [r3, #32]
 800e9e6:	f023 0210 	bic.w	r2, r3, #16
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6a1b      	ldr	r3, [r3, #32]
 800e9f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	699b      	ldr	r3, [r3, #24]
 800e9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ea00:	68fa      	ldr	r2, [r7, #12]
 800ea02:	4b34      	ldr	r3, [pc, #208]	@ (800ead4 <TIM_OC2_SetConfig+0xfc>)
 800ea04:	4013      	ands	r3, r2
 800ea06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ea0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	021b      	lsls	r3, r3, #8
 800ea16:	68fa      	ldr	r2, [r7, #12]
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	f023 0320 	bic.w	r3, r3, #32
 800ea22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	689b      	ldr	r3, [r3, #8]
 800ea28:	011b      	lsls	r3, r3, #4
 800ea2a:	697a      	ldr	r2, [r7, #20]
 800ea2c:	4313      	orrs	r3, r2
 800ea2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	4a29      	ldr	r2, [pc, #164]	@ (800ead8 <TIM_OC2_SetConfig+0x100>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d003      	beq.n	800ea40 <TIM_OC2_SetConfig+0x68>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	4a28      	ldr	r2, [pc, #160]	@ (800eadc <TIM_OC2_SetConfig+0x104>)
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	d10d      	bne.n	800ea5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ea46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	011b      	lsls	r3, r3, #4
 800ea4e:	697a      	ldr	r2, [r7, #20]
 800ea50:	4313      	orrs	r3, r2
 800ea52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4a1e      	ldr	r2, [pc, #120]	@ (800ead8 <TIM_OC2_SetConfig+0x100>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d00f      	beq.n	800ea84 <TIM_OC2_SetConfig+0xac>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	4a1d      	ldr	r2, [pc, #116]	@ (800eadc <TIM_OC2_SetConfig+0x104>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d00b      	beq.n	800ea84 <TIM_OC2_SetConfig+0xac>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	4a1c      	ldr	r2, [pc, #112]	@ (800eae0 <TIM_OC2_SetConfig+0x108>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d007      	beq.n	800ea84 <TIM_OC2_SetConfig+0xac>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	4a1b      	ldr	r2, [pc, #108]	@ (800eae4 <TIM_OC2_SetConfig+0x10c>)
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d003      	beq.n	800ea84 <TIM_OC2_SetConfig+0xac>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	4a1a      	ldr	r2, [pc, #104]	@ (800eae8 <TIM_OC2_SetConfig+0x110>)
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d113      	bne.n	800eaac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ea8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ea92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	695b      	ldr	r3, [r3, #20]
 800ea98:	009b      	lsls	r3, r3, #2
 800ea9a:	693a      	ldr	r2, [r7, #16]
 800ea9c:	4313      	orrs	r3, r2
 800ea9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	699b      	ldr	r3, [r3, #24]
 800eaa4:	009b      	lsls	r3, r3, #2
 800eaa6:	693a      	ldr	r2, [r7, #16]
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	693a      	ldr	r2, [r7, #16]
 800eab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	68fa      	ldr	r2, [r7, #12]
 800eab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	685a      	ldr	r2, [r3, #4]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	697a      	ldr	r2, [r7, #20]
 800eac4:	621a      	str	r2, [r3, #32]
}
 800eac6:	bf00      	nop
 800eac8:	371c      	adds	r7, #28
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr
 800ead2:	bf00      	nop
 800ead4:	feff8fff 	.word	0xfeff8fff
 800ead8:	40010000 	.word	0x40010000
 800eadc:	40010400 	.word	0x40010400
 800eae0:	40014000 	.word	0x40014000
 800eae4:	40014400 	.word	0x40014400
 800eae8:	40014800 	.word	0x40014800

0800eaec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b087      	sub	sp, #28
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6a1b      	ldr	r3, [r3, #32]
 800eafa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6a1b      	ldr	r3, [r3, #32]
 800eb06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	69db      	ldr	r3, [r3, #28]
 800eb12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eb14:	68fa      	ldr	r2, [r7, #12]
 800eb16:	4b33      	ldr	r3, [pc, #204]	@ (800ebe4 <TIM_OC3_SetConfig+0xf8>)
 800eb18:	4013      	ands	r3, r2
 800eb1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f023 0303 	bic.w	r3, r3, #3
 800eb22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eb34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	689b      	ldr	r3, [r3, #8]
 800eb3a:	021b      	lsls	r3, r3, #8
 800eb3c:	697a      	ldr	r2, [r7, #20]
 800eb3e:	4313      	orrs	r3, r2
 800eb40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	4a28      	ldr	r2, [pc, #160]	@ (800ebe8 <TIM_OC3_SetConfig+0xfc>)
 800eb46:	4293      	cmp	r3, r2
 800eb48:	d003      	beq.n	800eb52 <TIM_OC3_SetConfig+0x66>
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	4a27      	ldr	r2, [pc, #156]	@ (800ebec <TIM_OC3_SetConfig+0x100>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d10d      	bne.n	800eb6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eb58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	68db      	ldr	r3, [r3, #12]
 800eb5e:	021b      	lsls	r3, r3, #8
 800eb60:	697a      	ldr	r2, [r7, #20]
 800eb62:	4313      	orrs	r3, r2
 800eb64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eb6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	4a1d      	ldr	r2, [pc, #116]	@ (800ebe8 <TIM_OC3_SetConfig+0xfc>)
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d00f      	beq.n	800eb96 <TIM_OC3_SetConfig+0xaa>
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	4a1c      	ldr	r2, [pc, #112]	@ (800ebec <TIM_OC3_SetConfig+0x100>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d00b      	beq.n	800eb96 <TIM_OC3_SetConfig+0xaa>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	4a1b      	ldr	r2, [pc, #108]	@ (800ebf0 <TIM_OC3_SetConfig+0x104>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d007      	beq.n	800eb96 <TIM_OC3_SetConfig+0xaa>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4a1a      	ldr	r2, [pc, #104]	@ (800ebf4 <TIM_OC3_SetConfig+0x108>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d003      	beq.n	800eb96 <TIM_OC3_SetConfig+0xaa>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	4a19      	ldr	r2, [pc, #100]	@ (800ebf8 <TIM_OC3_SetConfig+0x10c>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d113      	bne.n	800ebbe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	695b      	ldr	r3, [r3, #20]
 800ebaa:	011b      	lsls	r3, r3, #4
 800ebac:	693a      	ldr	r2, [r7, #16]
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	699b      	ldr	r3, [r3, #24]
 800ebb6:	011b      	lsls	r3, r3, #4
 800ebb8:	693a      	ldr	r2, [r7, #16]
 800ebba:	4313      	orrs	r3, r2
 800ebbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	693a      	ldr	r2, [r7, #16]
 800ebc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	68fa      	ldr	r2, [r7, #12]
 800ebc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	685a      	ldr	r2, [r3, #4]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	697a      	ldr	r2, [r7, #20]
 800ebd6:	621a      	str	r2, [r3, #32]
}
 800ebd8:	bf00      	nop
 800ebda:	371c      	adds	r7, #28
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr
 800ebe4:	fffeff8f 	.word	0xfffeff8f
 800ebe8:	40010000 	.word	0x40010000
 800ebec:	40010400 	.word	0x40010400
 800ebf0:	40014000 	.word	0x40014000
 800ebf4:	40014400 	.word	0x40014400
 800ebf8:	40014800 	.word	0x40014800

0800ebfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b087      	sub	sp, #28
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6a1b      	ldr	r3, [r3, #32]
 800ec0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6a1b      	ldr	r3, [r3, #32]
 800ec16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	69db      	ldr	r3, [r3, #28]
 800ec22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	4b24      	ldr	r3, [pc, #144]	@ (800ecb8 <TIM_OC4_SetConfig+0xbc>)
 800ec28:	4013      	ands	r3, r2
 800ec2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ec32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	021b      	lsls	r3, r3, #8
 800ec3a:	68fa      	ldr	r2, [r7, #12]
 800ec3c:	4313      	orrs	r3, r2
 800ec3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ec46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	689b      	ldr	r3, [r3, #8]
 800ec4c:	031b      	lsls	r3, r3, #12
 800ec4e:	693a      	ldr	r2, [r7, #16]
 800ec50:	4313      	orrs	r3, r2
 800ec52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	4a19      	ldr	r2, [pc, #100]	@ (800ecbc <TIM_OC4_SetConfig+0xc0>)
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d00f      	beq.n	800ec7c <TIM_OC4_SetConfig+0x80>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	4a18      	ldr	r2, [pc, #96]	@ (800ecc0 <TIM_OC4_SetConfig+0xc4>)
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d00b      	beq.n	800ec7c <TIM_OC4_SetConfig+0x80>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	4a17      	ldr	r2, [pc, #92]	@ (800ecc4 <TIM_OC4_SetConfig+0xc8>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d007      	beq.n	800ec7c <TIM_OC4_SetConfig+0x80>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	4a16      	ldr	r2, [pc, #88]	@ (800ecc8 <TIM_OC4_SetConfig+0xcc>)
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d003      	beq.n	800ec7c <TIM_OC4_SetConfig+0x80>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	4a15      	ldr	r2, [pc, #84]	@ (800eccc <TIM_OC4_SetConfig+0xd0>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d109      	bne.n	800ec90 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ec82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	695b      	ldr	r3, [r3, #20]
 800ec88:	019b      	lsls	r3, r3, #6
 800ec8a:	697a      	ldr	r2, [r7, #20]
 800ec8c:	4313      	orrs	r3, r2
 800ec8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	697a      	ldr	r2, [r7, #20]
 800ec94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	68fa      	ldr	r2, [r7, #12]
 800ec9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	685a      	ldr	r2, [r3, #4]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	693a      	ldr	r2, [r7, #16]
 800eca8:	621a      	str	r2, [r3, #32]
}
 800ecaa:	bf00      	nop
 800ecac:	371c      	adds	r7, #28
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop
 800ecb8:	feff8fff 	.word	0xfeff8fff
 800ecbc:	40010000 	.word	0x40010000
 800ecc0:	40010400 	.word	0x40010400
 800ecc4:	40014000 	.word	0x40014000
 800ecc8:	40014400 	.word	0x40014400
 800eccc:	40014800 	.word	0x40014800

0800ecd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b087      	sub	sp, #28
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6a1b      	ldr	r3, [r3, #32]
 800ecde:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6a1b      	ldr	r3, [r3, #32]
 800ecea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ecf8:	68fa      	ldr	r2, [r7, #12]
 800ecfa:	4b21      	ldr	r3, [pc, #132]	@ (800ed80 <TIM_OC5_SetConfig+0xb0>)
 800ecfc:	4013      	ands	r3, r2
 800ecfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	68fa      	ldr	r2, [r7, #12]
 800ed06:	4313      	orrs	r3, r2
 800ed08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ed10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	041b      	lsls	r3, r3, #16
 800ed18:	693a      	ldr	r2, [r7, #16]
 800ed1a:	4313      	orrs	r3, r2
 800ed1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	4a18      	ldr	r2, [pc, #96]	@ (800ed84 <TIM_OC5_SetConfig+0xb4>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d00f      	beq.n	800ed46 <TIM_OC5_SetConfig+0x76>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	4a17      	ldr	r2, [pc, #92]	@ (800ed88 <TIM_OC5_SetConfig+0xb8>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d00b      	beq.n	800ed46 <TIM_OC5_SetConfig+0x76>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	4a16      	ldr	r2, [pc, #88]	@ (800ed8c <TIM_OC5_SetConfig+0xbc>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d007      	beq.n	800ed46 <TIM_OC5_SetConfig+0x76>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	4a15      	ldr	r2, [pc, #84]	@ (800ed90 <TIM_OC5_SetConfig+0xc0>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d003      	beq.n	800ed46 <TIM_OC5_SetConfig+0x76>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	4a14      	ldr	r2, [pc, #80]	@ (800ed94 <TIM_OC5_SetConfig+0xc4>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d109      	bne.n	800ed5a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ed4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	695b      	ldr	r3, [r3, #20]
 800ed52:	021b      	lsls	r3, r3, #8
 800ed54:	697a      	ldr	r2, [r7, #20]
 800ed56:	4313      	orrs	r3, r2
 800ed58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	697a      	ldr	r2, [r7, #20]
 800ed5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	68fa      	ldr	r2, [r7, #12]
 800ed64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	685a      	ldr	r2, [r3, #4]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	693a      	ldr	r2, [r7, #16]
 800ed72:	621a      	str	r2, [r3, #32]
}
 800ed74:	bf00      	nop
 800ed76:	371c      	adds	r7, #28
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr
 800ed80:	fffeff8f 	.word	0xfffeff8f
 800ed84:	40010000 	.word	0x40010000
 800ed88:	40010400 	.word	0x40010400
 800ed8c:	40014000 	.word	0x40014000
 800ed90:	40014400 	.word	0x40014400
 800ed94:	40014800 	.word	0x40014800

0800ed98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b087      	sub	sp, #28
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6a1b      	ldr	r3, [r3, #32]
 800eda6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6a1b      	ldr	r3, [r3, #32]
 800edb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	685b      	ldr	r3, [r3, #4]
 800edb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800edc0:	68fa      	ldr	r2, [r7, #12]
 800edc2:	4b22      	ldr	r3, [pc, #136]	@ (800ee4c <TIM_OC6_SetConfig+0xb4>)
 800edc4:	4013      	ands	r3, r2
 800edc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	021b      	lsls	r3, r3, #8
 800edce:	68fa      	ldr	r2, [r7, #12]
 800edd0:	4313      	orrs	r3, r2
 800edd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800edda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	689b      	ldr	r3, [r3, #8]
 800ede0:	051b      	lsls	r3, r3, #20
 800ede2:	693a      	ldr	r2, [r7, #16]
 800ede4:	4313      	orrs	r3, r2
 800ede6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	4a19      	ldr	r2, [pc, #100]	@ (800ee50 <TIM_OC6_SetConfig+0xb8>)
 800edec:	4293      	cmp	r3, r2
 800edee:	d00f      	beq.n	800ee10 <TIM_OC6_SetConfig+0x78>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	4a18      	ldr	r2, [pc, #96]	@ (800ee54 <TIM_OC6_SetConfig+0xbc>)
 800edf4:	4293      	cmp	r3, r2
 800edf6:	d00b      	beq.n	800ee10 <TIM_OC6_SetConfig+0x78>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	4a17      	ldr	r2, [pc, #92]	@ (800ee58 <TIM_OC6_SetConfig+0xc0>)
 800edfc:	4293      	cmp	r3, r2
 800edfe:	d007      	beq.n	800ee10 <TIM_OC6_SetConfig+0x78>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	4a16      	ldr	r2, [pc, #88]	@ (800ee5c <TIM_OC6_SetConfig+0xc4>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d003      	beq.n	800ee10 <TIM_OC6_SetConfig+0x78>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	4a15      	ldr	r2, [pc, #84]	@ (800ee60 <TIM_OC6_SetConfig+0xc8>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d109      	bne.n	800ee24 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ee16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	695b      	ldr	r3, [r3, #20]
 800ee1c:	029b      	lsls	r3, r3, #10
 800ee1e:	697a      	ldr	r2, [r7, #20]
 800ee20:	4313      	orrs	r3, r2
 800ee22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	697a      	ldr	r2, [r7, #20]
 800ee28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	68fa      	ldr	r2, [r7, #12]
 800ee2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	685a      	ldr	r2, [r3, #4]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	693a      	ldr	r2, [r7, #16]
 800ee3c:	621a      	str	r2, [r3, #32]
}
 800ee3e:	bf00      	nop
 800ee40:	371c      	adds	r7, #28
 800ee42:	46bd      	mov	sp, r7
 800ee44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee48:	4770      	bx	lr
 800ee4a:	bf00      	nop
 800ee4c:	feff8fff 	.word	0xfeff8fff
 800ee50:	40010000 	.word	0x40010000
 800ee54:	40010400 	.word	0x40010400
 800ee58:	40014000 	.word	0x40014000
 800ee5c:	40014400 	.word	0x40014400
 800ee60:	40014800 	.word	0x40014800

0800ee64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b087      	sub	sp, #28
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	60f8      	str	r0, [r7, #12]
 800ee6c:	60b9      	str	r1, [r7, #8]
 800ee6e:	607a      	str	r2, [r7, #4]
 800ee70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	6a1b      	ldr	r3, [r3, #32]
 800ee76:	f023 0201 	bic.w	r2, r3, #1
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	699b      	ldr	r3, [r3, #24]
 800ee82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	6a1b      	ldr	r3, [r3, #32]
 800ee88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	4a2c      	ldr	r2, [pc, #176]	@ (800ef40 <TIM_TI1_SetConfig+0xdc>)
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d023      	beq.n	800eeda <TIM_TI1_SetConfig+0x76>
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee98:	d01f      	beq.n	800eeda <TIM_TI1_SetConfig+0x76>
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	4a29      	ldr	r2, [pc, #164]	@ (800ef44 <TIM_TI1_SetConfig+0xe0>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d01b      	beq.n	800eeda <TIM_TI1_SetConfig+0x76>
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	4a28      	ldr	r2, [pc, #160]	@ (800ef48 <TIM_TI1_SetConfig+0xe4>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d017      	beq.n	800eeda <TIM_TI1_SetConfig+0x76>
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	4a27      	ldr	r2, [pc, #156]	@ (800ef4c <TIM_TI1_SetConfig+0xe8>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d013      	beq.n	800eeda <TIM_TI1_SetConfig+0x76>
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	4a26      	ldr	r2, [pc, #152]	@ (800ef50 <TIM_TI1_SetConfig+0xec>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d00f      	beq.n	800eeda <TIM_TI1_SetConfig+0x76>
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	4a25      	ldr	r2, [pc, #148]	@ (800ef54 <TIM_TI1_SetConfig+0xf0>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d00b      	beq.n	800eeda <TIM_TI1_SetConfig+0x76>
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	4a24      	ldr	r2, [pc, #144]	@ (800ef58 <TIM_TI1_SetConfig+0xf4>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d007      	beq.n	800eeda <TIM_TI1_SetConfig+0x76>
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	4a23      	ldr	r2, [pc, #140]	@ (800ef5c <TIM_TI1_SetConfig+0xf8>)
 800eece:	4293      	cmp	r3, r2
 800eed0:	d003      	beq.n	800eeda <TIM_TI1_SetConfig+0x76>
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	4a22      	ldr	r2, [pc, #136]	@ (800ef60 <TIM_TI1_SetConfig+0xfc>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d101      	bne.n	800eede <TIM_TI1_SetConfig+0x7a>
 800eeda:	2301      	movs	r3, #1
 800eedc:	e000      	b.n	800eee0 <TIM_TI1_SetConfig+0x7c>
 800eede:	2300      	movs	r3, #0
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d008      	beq.n	800eef6 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	f023 0303 	bic.w	r3, r3, #3
 800eeea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800eeec:	697a      	ldr	r2, [r7, #20]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	4313      	orrs	r3, r2
 800eef2:	617b      	str	r3, [r7, #20]
 800eef4:	e003      	b.n	800eefe <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	f043 0301 	orr.w	r3, r3, #1
 800eefc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ef04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	011b      	lsls	r3, r3, #4
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	697a      	ldr	r2, [r7, #20]
 800ef0e:	4313      	orrs	r3, r2
 800ef10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	f023 030a 	bic.w	r3, r3, #10
 800ef18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	f003 030a 	and.w	r3, r3, #10
 800ef20:	693a      	ldr	r2, [r7, #16]
 800ef22:	4313      	orrs	r3, r2
 800ef24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	697a      	ldr	r2, [r7, #20]
 800ef2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	693a      	ldr	r2, [r7, #16]
 800ef30:	621a      	str	r2, [r3, #32]
}
 800ef32:	bf00      	nop
 800ef34:	371c      	adds	r7, #28
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr
 800ef3e:	bf00      	nop
 800ef40:	40010000 	.word	0x40010000
 800ef44:	40000400 	.word	0x40000400
 800ef48:	40000800 	.word	0x40000800
 800ef4c:	40000c00 	.word	0x40000c00
 800ef50:	40010400 	.word	0x40010400
 800ef54:	40001800 	.word	0x40001800
 800ef58:	40014000 	.word	0x40014000
 800ef5c:	4000e000 	.word	0x4000e000
 800ef60:	4000e400 	.word	0x4000e400

0800ef64 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b087      	sub	sp, #28
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	60f8      	str	r0, [r7, #12]
 800ef6c:	60b9      	str	r1, [r7, #8]
 800ef6e:	607a      	str	r2, [r7, #4]
 800ef70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	6a1b      	ldr	r3, [r3, #32]
 800ef76:	f023 0210 	bic.w	r2, r3, #16
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	699b      	ldr	r3, [r3, #24]
 800ef82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	6a1b      	ldr	r3, [r3, #32]
 800ef88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ef90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	021b      	lsls	r3, r3, #8
 800ef96:	697a      	ldr	r2, [r7, #20]
 800ef98:	4313      	orrs	r3, r2
 800ef9a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800efa2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	031b      	lsls	r3, r3, #12
 800efa8:	b29b      	uxth	r3, r3
 800efaa:	697a      	ldr	r2, [r7, #20]
 800efac:	4313      	orrs	r3, r2
 800efae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800efb6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	011b      	lsls	r3, r3, #4
 800efbc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800efc0:	693a      	ldr	r2, [r7, #16]
 800efc2:	4313      	orrs	r3, r2
 800efc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	697a      	ldr	r2, [r7, #20]
 800efca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	693a      	ldr	r2, [r7, #16]
 800efd0:	621a      	str	r2, [r3, #32]
}
 800efd2:	bf00      	nop
 800efd4:	371c      	adds	r7, #28
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr

0800efde <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800efde:	b480      	push	{r7}
 800efe0:	b087      	sub	sp, #28
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	60f8      	str	r0, [r7, #12]
 800efe6:	60b9      	str	r1, [r7, #8]
 800efe8:	607a      	str	r2, [r7, #4]
 800efea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	6a1b      	ldr	r3, [r3, #32]
 800eff0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	69db      	ldr	r3, [r3, #28]
 800effc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	6a1b      	ldr	r3, [r3, #32]
 800f002:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	f023 0303 	bic.w	r3, r3, #3
 800f00a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800f00c:	697a      	ldr	r2, [r7, #20]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	4313      	orrs	r3, r2
 800f012:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f01a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	011b      	lsls	r3, r3, #4
 800f020:	b2db      	uxtb	r3, r3
 800f022:	697a      	ldr	r2, [r7, #20]
 800f024:	4313      	orrs	r3, r2
 800f026:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f028:	693b      	ldr	r3, [r7, #16]
 800f02a:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800f02e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	021b      	lsls	r3, r3, #8
 800f034:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800f038:	693a      	ldr	r2, [r7, #16]
 800f03a:	4313      	orrs	r3, r2
 800f03c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	697a      	ldr	r2, [r7, #20]
 800f042:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	693a      	ldr	r2, [r7, #16]
 800f048:	621a      	str	r2, [r3, #32]
}
 800f04a:	bf00      	nop
 800f04c:	371c      	adds	r7, #28
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr

0800f056 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f056:	b480      	push	{r7}
 800f058:	b087      	sub	sp, #28
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	60f8      	str	r0, [r7, #12]
 800f05e:	60b9      	str	r1, [r7, #8]
 800f060:	607a      	str	r2, [r7, #4]
 800f062:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	6a1b      	ldr	r3, [r3, #32]
 800f068:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	69db      	ldr	r3, [r3, #28]
 800f074:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	6a1b      	ldr	r3, [r3, #32]
 800f07a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f082:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	021b      	lsls	r3, r3, #8
 800f088:	697a      	ldr	r2, [r7, #20]
 800f08a:	4313      	orrs	r3, r2
 800f08c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f094:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	031b      	lsls	r3, r3, #12
 800f09a:	b29b      	uxth	r3, r3
 800f09c:	697a      	ldr	r2, [r7, #20]
 800f09e:	4313      	orrs	r3, r2
 800f0a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800f0a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	031b      	lsls	r3, r3, #12
 800f0ae:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800f0b2:	693a      	ldr	r2, [r7, #16]
 800f0b4:	4313      	orrs	r3, r2
 800f0b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	697a      	ldr	r2, [r7, #20]
 800f0bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	693a      	ldr	r2, [r7, #16]
 800f0c2:	621a      	str	r2, [r3, #32]
}
 800f0c4:	bf00      	nop
 800f0c6:	371c      	adds	r7, #28
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr

0800f0d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b087      	sub	sp, #28
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	60b9      	str	r1, [r7, #8]
 800f0da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	f003 031f 	and.w	r3, r3, #31
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	fa02 f303 	lsl.w	r3, r2, r3
 800f0e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	6a1a      	ldr	r2, [r3, #32]
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	43db      	mvns	r3, r3
 800f0f2:	401a      	ands	r2, r3
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	6a1a      	ldr	r2, [r3, #32]
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	f003 031f 	and.w	r3, r3, #31
 800f102:	6879      	ldr	r1, [r7, #4]
 800f104:	fa01 f303 	lsl.w	r3, r1, r3
 800f108:	431a      	orrs	r2, r3
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	621a      	str	r2, [r3, #32]
}
 800f10e:	bf00      	nop
 800f110:	371c      	adds	r7, #28
 800f112:	46bd      	mov	sp, r7
 800f114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f118:	4770      	bx	lr
	...

0800f11c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d109      	bne.n	800f140 <HAL_TIMEx_PWMN_Start+0x24>
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f132:	b2db      	uxtb	r3, r3
 800f134:	2b01      	cmp	r3, #1
 800f136:	bf14      	ite	ne
 800f138:	2301      	movne	r3, #1
 800f13a:	2300      	moveq	r3, #0
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	e022      	b.n	800f186 <HAL_TIMEx_PWMN_Start+0x6a>
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	2b04      	cmp	r3, #4
 800f144:	d109      	bne.n	800f15a <HAL_TIMEx_PWMN_Start+0x3e>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f14c:	b2db      	uxtb	r3, r3
 800f14e:	2b01      	cmp	r3, #1
 800f150:	bf14      	ite	ne
 800f152:	2301      	movne	r3, #1
 800f154:	2300      	moveq	r3, #0
 800f156:	b2db      	uxtb	r3, r3
 800f158:	e015      	b.n	800f186 <HAL_TIMEx_PWMN_Start+0x6a>
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	2b08      	cmp	r3, #8
 800f15e:	d109      	bne.n	800f174 <HAL_TIMEx_PWMN_Start+0x58>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800f166:	b2db      	uxtb	r3, r3
 800f168:	2b01      	cmp	r3, #1
 800f16a:	bf14      	ite	ne
 800f16c:	2301      	movne	r3, #1
 800f16e:	2300      	moveq	r3, #0
 800f170:	b2db      	uxtb	r3, r3
 800f172:	e008      	b.n	800f186 <HAL_TIMEx_PWMN_Start+0x6a>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800f17a:	b2db      	uxtb	r3, r3
 800f17c:	2b01      	cmp	r3, #1
 800f17e:	bf14      	ite	ne
 800f180:	2301      	movne	r3, #1
 800f182:	2300      	moveq	r3, #0
 800f184:	b2db      	uxtb	r3, r3
 800f186:	2b00      	cmp	r3, #0
 800f188:	d001      	beq.n	800f18e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800f18a:	2301      	movs	r3, #1
 800f18c:	e07d      	b.n	800f28a <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d104      	bne.n	800f19e <HAL_TIMEx_PWMN_Start+0x82>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2202      	movs	r2, #2
 800f198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f19c:	e013      	b.n	800f1c6 <HAL_TIMEx_PWMN_Start+0xaa>
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	2b04      	cmp	r3, #4
 800f1a2:	d104      	bne.n	800f1ae <HAL_TIMEx_PWMN_Start+0x92>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2202      	movs	r2, #2
 800f1a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f1ac:	e00b      	b.n	800f1c6 <HAL_TIMEx_PWMN_Start+0xaa>
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	2b08      	cmp	r3, #8
 800f1b2:	d104      	bne.n	800f1be <HAL_TIMEx_PWMN_Start+0xa2>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2202      	movs	r2, #2
 800f1b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f1bc:	e003      	b.n	800f1c6 <HAL_TIMEx_PWMN_Start+0xaa>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2202      	movs	r2, #2
 800f1c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	2204      	movs	r2, #4
 800f1cc:	6839      	ldr	r1, [r7, #0]
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f000 fa0e 	bl	800f5f0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f1e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	4a2a      	ldr	r2, [pc, #168]	@ (800f294 <HAL_TIMEx_PWMN_Start+0x178>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d02c      	beq.n	800f248 <HAL_TIMEx_PWMN_Start+0x12c>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f1f6:	d027      	beq.n	800f248 <HAL_TIMEx_PWMN_Start+0x12c>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	4a26      	ldr	r2, [pc, #152]	@ (800f298 <HAL_TIMEx_PWMN_Start+0x17c>)
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d022      	beq.n	800f248 <HAL_TIMEx_PWMN_Start+0x12c>
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	4a25      	ldr	r2, [pc, #148]	@ (800f29c <HAL_TIMEx_PWMN_Start+0x180>)
 800f208:	4293      	cmp	r3, r2
 800f20a:	d01d      	beq.n	800f248 <HAL_TIMEx_PWMN_Start+0x12c>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4a23      	ldr	r2, [pc, #140]	@ (800f2a0 <HAL_TIMEx_PWMN_Start+0x184>)
 800f212:	4293      	cmp	r3, r2
 800f214:	d018      	beq.n	800f248 <HAL_TIMEx_PWMN_Start+0x12c>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	4a22      	ldr	r2, [pc, #136]	@ (800f2a4 <HAL_TIMEx_PWMN_Start+0x188>)
 800f21c:	4293      	cmp	r3, r2
 800f21e:	d013      	beq.n	800f248 <HAL_TIMEx_PWMN_Start+0x12c>
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	4a20      	ldr	r2, [pc, #128]	@ (800f2a8 <HAL_TIMEx_PWMN_Start+0x18c>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d00e      	beq.n	800f248 <HAL_TIMEx_PWMN_Start+0x12c>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	4a1f      	ldr	r2, [pc, #124]	@ (800f2ac <HAL_TIMEx_PWMN_Start+0x190>)
 800f230:	4293      	cmp	r3, r2
 800f232:	d009      	beq.n	800f248 <HAL_TIMEx_PWMN_Start+0x12c>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	4a1d      	ldr	r2, [pc, #116]	@ (800f2b0 <HAL_TIMEx_PWMN_Start+0x194>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d004      	beq.n	800f248 <HAL_TIMEx_PWMN_Start+0x12c>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	4a1c      	ldr	r2, [pc, #112]	@ (800f2b4 <HAL_TIMEx_PWMN_Start+0x198>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d115      	bne.n	800f274 <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	689a      	ldr	r2, [r3, #8]
 800f24e:	4b1a      	ldr	r3, [pc, #104]	@ (800f2b8 <HAL_TIMEx_PWMN_Start+0x19c>)
 800f250:	4013      	ands	r3, r2
 800f252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	2b06      	cmp	r3, #6
 800f258:	d015      	beq.n	800f286 <HAL_TIMEx_PWMN_Start+0x16a>
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f260:	d011      	beq.n	800f286 <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f042 0201 	orr.w	r2, r2, #1
 800f270:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f272:	e008      	b.n	800f286 <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	681a      	ldr	r2, [r3, #0]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f042 0201 	orr.w	r2, r2, #1
 800f282:	601a      	str	r2, [r3, #0]
 800f284:	e000      	b.n	800f288 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f286:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f288:	2300      	movs	r3, #0
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3710      	adds	r7, #16
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}
 800f292:	bf00      	nop
 800f294:	40010000 	.word	0x40010000
 800f298:	40000400 	.word	0x40000400
 800f29c:	40000800 	.word	0x40000800
 800f2a0:	40000c00 	.word	0x40000c00
 800f2a4:	40010400 	.word	0x40010400
 800f2a8:	40001800 	.word	0x40001800
 800f2ac:	40014000 	.word	0x40014000
 800f2b0:	4000e000 	.word	0x4000e000
 800f2b4:	4000e400 	.word	0x4000e400
 800f2b8:	00010007 	.word	0x00010007

0800f2bc <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	6839      	ldr	r1, [r7, #0]
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f000 f98e 	bl	800f5f0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	6a1a      	ldr	r2, [r3, #32]
 800f2da:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f2de:	4013      	ands	r3, r2
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d10f      	bne.n	800f304 <HAL_TIMEx_PWMN_Stop+0x48>
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	6a1a      	ldr	r2, [r3, #32]
 800f2ea:	f240 4344 	movw	r3, #1092	@ 0x444
 800f2ee:	4013      	ands	r3, r2
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d107      	bne.n	800f304 <HAL_TIMEx_PWMN_Stop+0x48>
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f302:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	6a1a      	ldr	r2, [r3, #32]
 800f30a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f30e:	4013      	ands	r3, r2
 800f310:	2b00      	cmp	r3, #0
 800f312:	d10f      	bne.n	800f334 <HAL_TIMEx_PWMN_Stop+0x78>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	6a1a      	ldr	r2, [r3, #32]
 800f31a:	f240 4344 	movw	r3, #1092	@ 0x444
 800f31e:	4013      	ands	r3, r2
 800f320:	2b00      	cmp	r3, #0
 800f322:	d107      	bne.n	800f334 <HAL_TIMEx_PWMN_Stop+0x78>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f022 0201 	bic.w	r2, r2, #1
 800f332:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d104      	bne.n	800f344 <HAL_TIMEx_PWMN_Stop+0x88>
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2201      	movs	r2, #1
 800f33e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f342:	e013      	b.n	800f36c <HAL_TIMEx_PWMN_Stop+0xb0>
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	2b04      	cmp	r3, #4
 800f348:	d104      	bne.n	800f354 <HAL_TIMEx_PWMN_Stop+0x98>
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2201      	movs	r2, #1
 800f34e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f352:	e00b      	b.n	800f36c <HAL_TIMEx_PWMN_Stop+0xb0>
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	2b08      	cmp	r3, #8
 800f358:	d104      	bne.n	800f364 <HAL_TIMEx_PWMN_Stop+0xa8>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2201      	movs	r2, #1
 800f35e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f362:	e003      	b.n	800f36c <HAL_TIMEx_PWMN_Stop+0xb0>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2201      	movs	r2, #1
 800f368:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800f36c:	2300      	movs	r3, #0
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3708      	adds	r7, #8
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
	...

0800f378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f378:	b480      	push	{r7}
 800f37a:	b085      	sub	sp, #20
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d101      	bne.n	800f390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f38c:	2302      	movs	r3, #2
 800f38e:	e077      	b.n	800f480 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2201      	movs	r2, #1
 800f394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2202      	movs	r2, #2
 800f39c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	685b      	ldr	r3, [r3, #4]
 800f3a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	689b      	ldr	r3, [r3, #8]
 800f3ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	4a35      	ldr	r2, [pc, #212]	@ (800f48c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	d004      	beq.n	800f3c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	4a34      	ldr	r2, [pc, #208]	@ (800f490 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f3c0:	4293      	cmp	r3, r2
 800f3c2:	d108      	bne.n	800f3d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f3ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	4313      	orrs	r3, r2
 800f3d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f3dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	4a25      	ldr	r2, [pc, #148]	@ (800f48c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	d02c      	beq.n	800f454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f402:	d027      	beq.n	800f454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	4a22      	ldr	r2, [pc, #136]	@ (800f494 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f40a:	4293      	cmp	r3, r2
 800f40c:	d022      	beq.n	800f454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	4a21      	ldr	r2, [pc, #132]	@ (800f498 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f414:	4293      	cmp	r3, r2
 800f416:	d01d      	beq.n	800f454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4a1f      	ldr	r2, [pc, #124]	@ (800f49c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f41e:	4293      	cmp	r3, r2
 800f420:	d018      	beq.n	800f454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	4a1a      	ldr	r2, [pc, #104]	@ (800f490 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f428:	4293      	cmp	r3, r2
 800f42a:	d013      	beq.n	800f454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	4a1b      	ldr	r2, [pc, #108]	@ (800f4a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f432:	4293      	cmp	r3, r2
 800f434:	d00e      	beq.n	800f454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	4a1a      	ldr	r2, [pc, #104]	@ (800f4a4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f43c:	4293      	cmp	r3, r2
 800f43e:	d009      	beq.n	800f454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	4a18      	ldr	r2, [pc, #96]	@ (800f4a8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f446:	4293      	cmp	r3, r2
 800f448:	d004      	beq.n	800f454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	4a17      	ldr	r2, [pc, #92]	@ (800f4ac <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f450:	4293      	cmp	r3, r2
 800f452:	d10c      	bne.n	800f46e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f45a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	689b      	ldr	r3, [r3, #8]
 800f460:	68ba      	ldr	r2, [r7, #8]
 800f462:	4313      	orrs	r3, r2
 800f464:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	68ba      	ldr	r2, [r7, #8]
 800f46c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2201      	movs	r2, #1
 800f472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2200      	movs	r2, #0
 800f47a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f47e:	2300      	movs	r3, #0
}
 800f480:	4618      	mov	r0, r3
 800f482:	3714      	adds	r7, #20
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr
 800f48c:	40010000 	.word	0x40010000
 800f490:	40010400 	.word	0x40010400
 800f494:	40000400 	.word	0x40000400
 800f498:	40000800 	.word	0x40000800
 800f49c:	40000c00 	.word	0x40000c00
 800f4a0:	40001800 	.word	0x40001800
 800f4a4:	40014000 	.word	0x40014000
 800f4a8:	4000e000 	.word	0x4000e000
 800f4ac:	4000e400 	.word	0x4000e400

0800f4b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b085      	sub	sp, #20
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d101      	bne.n	800f4cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f4c8:	2302      	movs	r3, #2
 800f4ca:	e087      	b.n	800f5dc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	68db      	ldr	r3, [r3, #12]
 800f4de:	4313      	orrs	r3, r2
 800f4e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	689b      	ldr	r3, [r3, #8]
 800f4ec:	4313      	orrs	r3, r2
 800f4ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	4313      	orrs	r3, r2
 800f50a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	691b      	ldr	r3, [r3, #16]
 800f516:	4313      	orrs	r3, r2
 800f518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	695b      	ldr	r3, [r3, #20]
 800f524:	4313      	orrs	r3, r2
 800f526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f532:	4313      	orrs	r3, r2
 800f534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	699b      	ldr	r3, [r3, #24]
 800f540:	041b      	lsls	r3, r3, #16
 800f542:	4313      	orrs	r3, r2
 800f544:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	4a27      	ldr	r2, [pc, #156]	@ (800f5e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d004      	beq.n	800f55a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	4a25      	ldr	r2, [pc, #148]	@ (800f5ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f556:	4293      	cmp	r3, r2
 800f558:	d106      	bne.n	800f568 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	69db      	ldr	r3, [r3, #28]
 800f564:	4313      	orrs	r3, r2
 800f566:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	4a1e      	ldr	r2, [pc, #120]	@ (800f5e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f56e:	4293      	cmp	r3, r2
 800f570:	d004      	beq.n	800f57c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	4a1d      	ldr	r2, [pc, #116]	@ (800f5ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d126      	bne.n	800f5ca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f586:	051b      	lsls	r3, r3, #20
 800f588:	4313      	orrs	r3, r2
 800f58a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	6a1b      	ldr	r3, [r3, #32]
 800f596:	4313      	orrs	r3, r2
 800f598:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	4a0e      	ldr	r2, [pc, #56]	@ (800f5e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d004      	beq.n	800f5bc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	4a0d      	ldr	r2, [pc, #52]	@ (800f5ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d106      	bne.n	800f5ca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5c6:	4313      	orrs	r3, r2
 800f5c8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	68fa      	ldr	r2, [r7, #12]
 800f5d0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f5da:	2300      	movs	r3, #0
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3714      	adds	r7, #20
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr
 800f5e8:	40010000 	.word	0x40010000
 800f5ec:	40010400 	.word	0x40010400

0800f5f0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b087      	sub	sp, #28
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	60f8      	str	r0, [r7, #12]
 800f5f8:	60b9      	str	r1, [r7, #8]
 800f5fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	f003 031f 	and.w	r3, r3, #31
 800f602:	2204      	movs	r2, #4
 800f604:	fa02 f303 	lsl.w	r3, r2, r3
 800f608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	6a1a      	ldr	r2, [r3, #32]
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	43db      	mvns	r3, r3
 800f612:	401a      	ands	r2, r3
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	6a1a      	ldr	r2, [r3, #32]
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	f003 031f 	and.w	r3, r3, #31
 800f622:	6879      	ldr	r1, [r7, #4]
 800f624:	fa01 f303 	lsl.w	r3, r1, r3
 800f628:	431a      	orrs	r2, r3
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	621a      	str	r2, [r3, #32]
}
 800f62e:	bf00      	nop
 800f630:	371c      	adds	r7, #28
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr

0800f63a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f63a:	b580      	push	{r7, lr}
 800f63c:	b082      	sub	sp, #8
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d101      	bne.n	800f64c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f648:	2301      	movs	r3, #1
 800f64a:	e042      	b.n	800f6d2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f652:	2b00      	cmp	r3, #0
 800f654:	d106      	bne.n	800f664 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2200      	movs	r2, #0
 800f65a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f7f4 fa12 	bl	8003a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2224      	movs	r2, #36	@ 0x24
 800f668:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	681a      	ldr	r2, [r3, #0]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	f022 0201 	bic.w	r2, r2, #1
 800f67a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f000 f983 	bl	800f988 <UART_SetConfig>
 800f682:	4603      	mov	r3, r0
 800f684:	2b01      	cmp	r3, #1
 800f686:	d101      	bne.n	800f68c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f688:	2301      	movs	r3, #1
 800f68a:	e022      	b.n	800f6d2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f690:	2b00      	cmp	r3, #0
 800f692:	d002      	beq.n	800f69a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f000 ffe3 	bl	8010660 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	685a      	ldr	r2, [r3, #4]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f6a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	689a      	ldr	r2, [r3, #8]
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f6b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	681a      	ldr	r2, [r3, #0]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	f042 0201 	orr.w	r2, r2, #1
 800f6c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f001 f86a 	bl	80107a4 <UART_CheckIdleState>
 800f6d0:	4603      	mov	r3, r0
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3708      	adds	r7, #8
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}

0800f6da <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f6da:	b580      	push	{r7, lr}
 800f6dc:	b08a      	sub	sp, #40	@ 0x28
 800f6de:	af02      	add	r7, sp, #8
 800f6e0:	60f8      	str	r0, [r7, #12]
 800f6e2:	60b9      	str	r1, [r7, #8]
 800f6e4:	603b      	str	r3, [r7, #0]
 800f6e6:	4613      	mov	r3, r2
 800f6e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f6f0:	2b20      	cmp	r3, #32
 800f6f2:	d17b      	bne.n	800f7ec <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d002      	beq.n	800f700 <HAL_UART_Transmit+0x26>
 800f6fa:	88fb      	ldrh	r3, [r7, #6]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d101      	bne.n	800f704 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f700:	2301      	movs	r3, #1
 800f702:	e074      	b.n	800f7ee <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	2200      	movs	r2, #0
 800f708:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	2221      	movs	r2, #33	@ 0x21
 800f710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f714:	f7f4 fe1c 	bl	8004350 <HAL_GetTick>
 800f718:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	88fa      	ldrh	r2, [r7, #6]
 800f71e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	88fa      	ldrh	r2, [r7, #6]
 800f726:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	689b      	ldr	r3, [r3, #8]
 800f72e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f732:	d108      	bne.n	800f746 <HAL_UART_Transmit+0x6c>
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	691b      	ldr	r3, [r3, #16]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d104      	bne.n	800f746 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f73c:	2300      	movs	r3, #0
 800f73e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	61bb      	str	r3, [r7, #24]
 800f744:	e003      	b.n	800f74e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f74a:	2300      	movs	r3, #0
 800f74c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f74e:	e030      	b.n	800f7b2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	9300      	str	r3, [sp, #0]
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	2200      	movs	r2, #0
 800f758:	2180      	movs	r1, #128	@ 0x80
 800f75a:	68f8      	ldr	r0, [r7, #12]
 800f75c:	f001 f8cc 	bl	80108f8 <UART_WaitOnFlagUntilTimeout>
 800f760:	4603      	mov	r3, r0
 800f762:	2b00      	cmp	r3, #0
 800f764:	d005      	beq.n	800f772 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2220      	movs	r2, #32
 800f76a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f76e:	2303      	movs	r3, #3
 800f770:	e03d      	b.n	800f7ee <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f772:	69fb      	ldr	r3, [r7, #28]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d10b      	bne.n	800f790 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f778:	69bb      	ldr	r3, [r7, #24]
 800f77a:	881b      	ldrh	r3, [r3, #0]
 800f77c:	461a      	mov	r2, r3
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f786:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f788:	69bb      	ldr	r3, [r7, #24]
 800f78a:	3302      	adds	r3, #2
 800f78c:	61bb      	str	r3, [r7, #24]
 800f78e:	e007      	b.n	800f7a0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	781a      	ldrb	r2, [r3, #0]
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	3301      	adds	r3, #1
 800f79e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	3b01      	subs	r3, #1
 800f7aa:	b29a      	uxth	r2, r3
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d1c8      	bne.n	800f750 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	9300      	str	r3, [sp, #0]
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	2140      	movs	r1, #64	@ 0x40
 800f7c8:	68f8      	ldr	r0, [r7, #12]
 800f7ca:	f001 f895 	bl	80108f8 <UART_WaitOnFlagUntilTimeout>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d005      	beq.n	800f7e0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	2220      	movs	r2, #32
 800f7d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f7dc:	2303      	movs	r3, #3
 800f7de:	e006      	b.n	800f7ee <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2220      	movs	r2, #32
 800f7e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	e000      	b.n	800f7ee <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f7ec:	2302      	movs	r3, #2
  }
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3720      	adds	r7, #32
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}

0800f7f6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f7f6:	b580      	push	{r7, lr}
 800f7f8:	b08a      	sub	sp, #40	@ 0x28
 800f7fa:	af02      	add	r7, sp, #8
 800f7fc:	60f8      	str	r0, [r7, #12]
 800f7fe:	60b9      	str	r1, [r7, #8]
 800f800:	603b      	str	r3, [r7, #0]
 800f802:	4613      	mov	r3, r2
 800f804:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f80c:	2b20      	cmp	r3, #32
 800f80e:	f040 80b5 	bne.w	800f97c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d002      	beq.n	800f81e <HAL_UART_Receive+0x28>
 800f818:	88fb      	ldrh	r3, [r7, #6]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d101      	bne.n	800f822 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f81e:	2301      	movs	r3, #1
 800f820:	e0ad      	b.n	800f97e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	2200      	movs	r2, #0
 800f826:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2222      	movs	r2, #34	@ 0x22
 800f82e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	2200      	movs	r2, #0
 800f836:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f838:	f7f4 fd8a 	bl	8004350 <HAL_GetTick>
 800f83c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	88fa      	ldrh	r2, [r7, #6]
 800f842:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	88fa      	ldrh	r2, [r7, #6]
 800f84a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	689b      	ldr	r3, [r3, #8]
 800f852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f856:	d10e      	bne.n	800f876 <HAL_UART_Receive+0x80>
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	691b      	ldr	r3, [r3, #16]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d105      	bne.n	800f86c <HAL_UART_Receive+0x76>
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f866:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f86a:	e02d      	b.n	800f8c8 <HAL_UART_Receive+0xd2>
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	22ff      	movs	r2, #255	@ 0xff
 800f870:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f874:	e028      	b.n	800f8c8 <HAL_UART_Receive+0xd2>
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	689b      	ldr	r3, [r3, #8]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d10d      	bne.n	800f89a <HAL_UART_Receive+0xa4>
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	691b      	ldr	r3, [r3, #16]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d104      	bne.n	800f890 <HAL_UART_Receive+0x9a>
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	22ff      	movs	r2, #255	@ 0xff
 800f88a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f88e:	e01b      	b.n	800f8c8 <HAL_UART_Receive+0xd2>
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	227f      	movs	r2, #127	@ 0x7f
 800f894:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f898:	e016      	b.n	800f8c8 <HAL_UART_Receive+0xd2>
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	689b      	ldr	r3, [r3, #8]
 800f89e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f8a2:	d10d      	bne.n	800f8c0 <HAL_UART_Receive+0xca>
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	691b      	ldr	r3, [r3, #16]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d104      	bne.n	800f8b6 <HAL_UART_Receive+0xc0>
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	227f      	movs	r2, #127	@ 0x7f
 800f8b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f8b4:	e008      	b.n	800f8c8 <HAL_UART_Receive+0xd2>
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	223f      	movs	r2, #63	@ 0x3f
 800f8ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f8be:	e003      	b.n	800f8c8 <HAL_UART_Receive+0xd2>
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f8ce:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	689b      	ldr	r3, [r3, #8]
 800f8d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f8d8:	d108      	bne.n	800f8ec <HAL_UART_Receive+0xf6>
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	691b      	ldr	r3, [r3, #16]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d104      	bne.n	800f8ec <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	61bb      	str	r3, [r7, #24]
 800f8ea:	e003      	b.n	800f8f4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f8f4:	e036      	b.n	800f964 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	9300      	str	r3, [sp, #0]
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	2120      	movs	r1, #32
 800f900:	68f8      	ldr	r0, [r7, #12]
 800f902:	f000 fff9 	bl	80108f8 <UART_WaitOnFlagUntilTimeout>
 800f906:	4603      	mov	r3, r0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d005      	beq.n	800f918 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2220      	movs	r2, #32
 800f910:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800f914:	2303      	movs	r3, #3
 800f916:	e032      	b.n	800f97e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800f918:	69fb      	ldr	r3, [r7, #28]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d10c      	bne.n	800f938 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f924:	b29a      	uxth	r2, r3
 800f926:	8a7b      	ldrh	r3, [r7, #18]
 800f928:	4013      	ands	r3, r2
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	69bb      	ldr	r3, [r7, #24]
 800f92e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f930:	69bb      	ldr	r3, [r7, #24]
 800f932:	3302      	adds	r3, #2
 800f934:	61bb      	str	r3, [r7, #24]
 800f936:	e00c      	b.n	800f952 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f93e:	b2da      	uxtb	r2, r3
 800f940:	8a7b      	ldrh	r3, [r7, #18]
 800f942:	b2db      	uxtb	r3, r3
 800f944:	4013      	ands	r3, r2
 800f946:	b2da      	uxtb	r2, r3
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	3301      	adds	r3, #1
 800f950:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f958:	b29b      	uxth	r3, r3
 800f95a:	3b01      	subs	r3, #1
 800f95c:	b29a      	uxth	r2, r3
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d1c2      	bne.n	800f8f6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2220      	movs	r2, #32
 800f974:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800f978:	2300      	movs	r3, #0
 800f97a:	e000      	b.n	800f97e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800f97c:	2302      	movs	r3, #2
  }
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3720      	adds	r7, #32
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
	...

0800f988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f98c:	b092      	sub	sp, #72	@ 0x48
 800f98e:	af00      	add	r7, sp, #0
 800f990:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f992:	2300      	movs	r3, #0
 800f994:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	689a      	ldr	r2, [r3, #8]
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	691b      	ldr	r3, [r3, #16]
 800f9a0:	431a      	orrs	r2, r3
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	695b      	ldr	r3, [r3, #20]
 800f9a6:	431a      	orrs	r2, r3
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	69db      	ldr	r3, [r3, #28]
 800f9ac:	4313      	orrs	r3, r2
 800f9ae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	681a      	ldr	r2, [r3, #0]
 800f9b6:	4bbe      	ldr	r3, [pc, #760]	@ (800fcb0 <UART_SetConfig+0x328>)
 800f9b8:	4013      	ands	r3, r2
 800f9ba:	697a      	ldr	r2, [r7, #20]
 800f9bc:	6812      	ldr	r2, [r2, #0]
 800f9be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f9c0:	430b      	orrs	r3, r1
 800f9c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	68da      	ldr	r2, [r3, #12]
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	430a      	orrs	r2, r1
 800f9d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	699b      	ldr	r3, [r3, #24]
 800f9de:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	4ab3      	ldr	r2, [pc, #716]	@ (800fcb4 <UART_SetConfig+0x32c>)
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d004      	beq.n	800f9f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	6a1b      	ldr	r3, [r3, #32]
 800f9ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f9f0:	4313      	orrs	r3, r2
 800f9f2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	689a      	ldr	r2, [r3, #8]
 800f9fa:	4baf      	ldr	r3, [pc, #700]	@ (800fcb8 <UART_SetConfig+0x330>)
 800f9fc:	4013      	ands	r3, r2
 800f9fe:	697a      	ldr	r2, [r7, #20]
 800fa00:	6812      	ldr	r2, [r2, #0]
 800fa02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa04:	430b      	orrs	r3, r1
 800fa06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa0e:	f023 010f 	bic.w	r1, r3, #15
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	430a      	orrs	r2, r1
 800fa1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	4aa6      	ldr	r2, [pc, #664]	@ (800fcbc <UART_SetConfig+0x334>)
 800fa24:	4293      	cmp	r3, r2
 800fa26:	d177      	bne.n	800fb18 <UART_SetConfig+0x190>
 800fa28:	4ba5      	ldr	r3, [pc, #660]	@ (800fcc0 <UART_SetConfig+0x338>)
 800fa2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fa30:	2b28      	cmp	r3, #40	@ 0x28
 800fa32:	d86d      	bhi.n	800fb10 <UART_SetConfig+0x188>
 800fa34:	a201      	add	r2, pc, #4	@ (adr r2, 800fa3c <UART_SetConfig+0xb4>)
 800fa36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa3a:	bf00      	nop
 800fa3c:	0800fae1 	.word	0x0800fae1
 800fa40:	0800fb11 	.word	0x0800fb11
 800fa44:	0800fb11 	.word	0x0800fb11
 800fa48:	0800fb11 	.word	0x0800fb11
 800fa4c:	0800fb11 	.word	0x0800fb11
 800fa50:	0800fb11 	.word	0x0800fb11
 800fa54:	0800fb11 	.word	0x0800fb11
 800fa58:	0800fb11 	.word	0x0800fb11
 800fa5c:	0800fae9 	.word	0x0800fae9
 800fa60:	0800fb11 	.word	0x0800fb11
 800fa64:	0800fb11 	.word	0x0800fb11
 800fa68:	0800fb11 	.word	0x0800fb11
 800fa6c:	0800fb11 	.word	0x0800fb11
 800fa70:	0800fb11 	.word	0x0800fb11
 800fa74:	0800fb11 	.word	0x0800fb11
 800fa78:	0800fb11 	.word	0x0800fb11
 800fa7c:	0800faf1 	.word	0x0800faf1
 800fa80:	0800fb11 	.word	0x0800fb11
 800fa84:	0800fb11 	.word	0x0800fb11
 800fa88:	0800fb11 	.word	0x0800fb11
 800fa8c:	0800fb11 	.word	0x0800fb11
 800fa90:	0800fb11 	.word	0x0800fb11
 800fa94:	0800fb11 	.word	0x0800fb11
 800fa98:	0800fb11 	.word	0x0800fb11
 800fa9c:	0800faf9 	.word	0x0800faf9
 800faa0:	0800fb11 	.word	0x0800fb11
 800faa4:	0800fb11 	.word	0x0800fb11
 800faa8:	0800fb11 	.word	0x0800fb11
 800faac:	0800fb11 	.word	0x0800fb11
 800fab0:	0800fb11 	.word	0x0800fb11
 800fab4:	0800fb11 	.word	0x0800fb11
 800fab8:	0800fb11 	.word	0x0800fb11
 800fabc:	0800fb01 	.word	0x0800fb01
 800fac0:	0800fb11 	.word	0x0800fb11
 800fac4:	0800fb11 	.word	0x0800fb11
 800fac8:	0800fb11 	.word	0x0800fb11
 800facc:	0800fb11 	.word	0x0800fb11
 800fad0:	0800fb11 	.word	0x0800fb11
 800fad4:	0800fb11 	.word	0x0800fb11
 800fad8:	0800fb11 	.word	0x0800fb11
 800fadc:	0800fb09 	.word	0x0800fb09
 800fae0:	2301      	movs	r3, #1
 800fae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fae6:	e326      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fae8:	2304      	movs	r3, #4
 800faea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faee:	e322      	b.n	8010136 <UART_SetConfig+0x7ae>
 800faf0:	2308      	movs	r3, #8
 800faf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faf6:	e31e      	b.n	8010136 <UART_SetConfig+0x7ae>
 800faf8:	2310      	movs	r3, #16
 800fafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fafe:	e31a      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fb00:	2320      	movs	r3, #32
 800fb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb06:	e316      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fb08:	2340      	movs	r3, #64	@ 0x40
 800fb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb0e:	e312      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fb10:	2380      	movs	r3, #128	@ 0x80
 800fb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb16:	e30e      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	4a69      	ldr	r2, [pc, #420]	@ (800fcc4 <UART_SetConfig+0x33c>)
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d130      	bne.n	800fb84 <UART_SetConfig+0x1fc>
 800fb22:	4b67      	ldr	r3, [pc, #412]	@ (800fcc0 <UART_SetConfig+0x338>)
 800fb24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb26:	f003 0307 	and.w	r3, r3, #7
 800fb2a:	2b05      	cmp	r3, #5
 800fb2c:	d826      	bhi.n	800fb7c <UART_SetConfig+0x1f4>
 800fb2e:	a201      	add	r2, pc, #4	@ (adr r2, 800fb34 <UART_SetConfig+0x1ac>)
 800fb30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb34:	0800fb4d 	.word	0x0800fb4d
 800fb38:	0800fb55 	.word	0x0800fb55
 800fb3c:	0800fb5d 	.word	0x0800fb5d
 800fb40:	0800fb65 	.word	0x0800fb65
 800fb44:	0800fb6d 	.word	0x0800fb6d
 800fb48:	0800fb75 	.word	0x0800fb75
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb52:	e2f0      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fb54:	2304      	movs	r3, #4
 800fb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb5a:	e2ec      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fb5c:	2308      	movs	r3, #8
 800fb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb62:	e2e8      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fb64:	2310      	movs	r3, #16
 800fb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb6a:	e2e4      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fb6c:	2320      	movs	r3, #32
 800fb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb72:	e2e0      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fb74:	2340      	movs	r3, #64	@ 0x40
 800fb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb7a:	e2dc      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fb7c:	2380      	movs	r3, #128	@ 0x80
 800fb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb82:	e2d8      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4a4f      	ldr	r2, [pc, #316]	@ (800fcc8 <UART_SetConfig+0x340>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d130      	bne.n	800fbf0 <UART_SetConfig+0x268>
 800fb8e:	4b4c      	ldr	r3, [pc, #304]	@ (800fcc0 <UART_SetConfig+0x338>)
 800fb90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb92:	f003 0307 	and.w	r3, r3, #7
 800fb96:	2b05      	cmp	r3, #5
 800fb98:	d826      	bhi.n	800fbe8 <UART_SetConfig+0x260>
 800fb9a:	a201      	add	r2, pc, #4	@ (adr r2, 800fba0 <UART_SetConfig+0x218>)
 800fb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fba0:	0800fbb9 	.word	0x0800fbb9
 800fba4:	0800fbc1 	.word	0x0800fbc1
 800fba8:	0800fbc9 	.word	0x0800fbc9
 800fbac:	0800fbd1 	.word	0x0800fbd1
 800fbb0:	0800fbd9 	.word	0x0800fbd9
 800fbb4:	0800fbe1 	.word	0x0800fbe1
 800fbb8:	2300      	movs	r3, #0
 800fbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbbe:	e2ba      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fbc0:	2304      	movs	r3, #4
 800fbc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbc6:	e2b6      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fbc8:	2308      	movs	r3, #8
 800fbca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbce:	e2b2      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fbd0:	2310      	movs	r3, #16
 800fbd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbd6:	e2ae      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fbd8:	2320      	movs	r3, #32
 800fbda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbde:	e2aa      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fbe0:	2340      	movs	r3, #64	@ 0x40
 800fbe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbe6:	e2a6      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fbe8:	2380      	movs	r3, #128	@ 0x80
 800fbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbee:	e2a2      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	4a35      	ldr	r2, [pc, #212]	@ (800fccc <UART_SetConfig+0x344>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d130      	bne.n	800fc5c <UART_SetConfig+0x2d4>
 800fbfa:	4b31      	ldr	r3, [pc, #196]	@ (800fcc0 <UART_SetConfig+0x338>)
 800fbfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fbfe:	f003 0307 	and.w	r3, r3, #7
 800fc02:	2b05      	cmp	r3, #5
 800fc04:	d826      	bhi.n	800fc54 <UART_SetConfig+0x2cc>
 800fc06:	a201      	add	r2, pc, #4	@ (adr r2, 800fc0c <UART_SetConfig+0x284>)
 800fc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc0c:	0800fc25 	.word	0x0800fc25
 800fc10:	0800fc2d 	.word	0x0800fc2d
 800fc14:	0800fc35 	.word	0x0800fc35
 800fc18:	0800fc3d 	.word	0x0800fc3d
 800fc1c:	0800fc45 	.word	0x0800fc45
 800fc20:	0800fc4d 	.word	0x0800fc4d
 800fc24:	2300      	movs	r3, #0
 800fc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc2a:	e284      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fc2c:	2304      	movs	r3, #4
 800fc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc32:	e280      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fc34:	2308      	movs	r3, #8
 800fc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc3a:	e27c      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fc3c:	2310      	movs	r3, #16
 800fc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc42:	e278      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fc44:	2320      	movs	r3, #32
 800fc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc4a:	e274      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fc4c:	2340      	movs	r3, #64	@ 0x40
 800fc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc52:	e270      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fc54:	2380      	movs	r3, #128	@ 0x80
 800fc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc5a:	e26c      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	4a1b      	ldr	r2, [pc, #108]	@ (800fcd0 <UART_SetConfig+0x348>)
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d142      	bne.n	800fcec <UART_SetConfig+0x364>
 800fc66:	4b16      	ldr	r3, [pc, #88]	@ (800fcc0 <UART_SetConfig+0x338>)
 800fc68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc6a:	f003 0307 	and.w	r3, r3, #7
 800fc6e:	2b05      	cmp	r3, #5
 800fc70:	d838      	bhi.n	800fce4 <UART_SetConfig+0x35c>
 800fc72:	a201      	add	r2, pc, #4	@ (adr r2, 800fc78 <UART_SetConfig+0x2f0>)
 800fc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc78:	0800fc91 	.word	0x0800fc91
 800fc7c:	0800fc99 	.word	0x0800fc99
 800fc80:	0800fca1 	.word	0x0800fca1
 800fc84:	0800fca9 	.word	0x0800fca9
 800fc88:	0800fcd5 	.word	0x0800fcd5
 800fc8c:	0800fcdd 	.word	0x0800fcdd
 800fc90:	2300      	movs	r3, #0
 800fc92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc96:	e24e      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fc98:	2304      	movs	r3, #4
 800fc9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc9e:	e24a      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fca0:	2308      	movs	r3, #8
 800fca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fca6:	e246      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fca8:	2310      	movs	r3, #16
 800fcaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcae:	e242      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fcb0:	cfff69f3 	.word	0xcfff69f3
 800fcb4:	58000c00 	.word	0x58000c00
 800fcb8:	11fff4ff 	.word	0x11fff4ff
 800fcbc:	40011000 	.word	0x40011000
 800fcc0:	58024400 	.word	0x58024400
 800fcc4:	40004400 	.word	0x40004400
 800fcc8:	40004800 	.word	0x40004800
 800fccc:	40004c00 	.word	0x40004c00
 800fcd0:	40005000 	.word	0x40005000
 800fcd4:	2320      	movs	r3, #32
 800fcd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcda:	e22c      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fcdc:	2340      	movs	r3, #64	@ 0x40
 800fcde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fce2:	e228      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fce4:	2380      	movs	r3, #128	@ 0x80
 800fce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcea:	e224      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	4ab1      	ldr	r2, [pc, #708]	@ (800ffb8 <UART_SetConfig+0x630>)
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	d176      	bne.n	800fde4 <UART_SetConfig+0x45c>
 800fcf6:	4bb1      	ldr	r3, [pc, #708]	@ (800ffbc <UART_SetConfig+0x634>)
 800fcf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fcfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fcfe:	2b28      	cmp	r3, #40	@ 0x28
 800fd00:	d86c      	bhi.n	800fddc <UART_SetConfig+0x454>
 800fd02:	a201      	add	r2, pc, #4	@ (adr r2, 800fd08 <UART_SetConfig+0x380>)
 800fd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd08:	0800fdad 	.word	0x0800fdad
 800fd0c:	0800fddd 	.word	0x0800fddd
 800fd10:	0800fddd 	.word	0x0800fddd
 800fd14:	0800fddd 	.word	0x0800fddd
 800fd18:	0800fddd 	.word	0x0800fddd
 800fd1c:	0800fddd 	.word	0x0800fddd
 800fd20:	0800fddd 	.word	0x0800fddd
 800fd24:	0800fddd 	.word	0x0800fddd
 800fd28:	0800fdb5 	.word	0x0800fdb5
 800fd2c:	0800fddd 	.word	0x0800fddd
 800fd30:	0800fddd 	.word	0x0800fddd
 800fd34:	0800fddd 	.word	0x0800fddd
 800fd38:	0800fddd 	.word	0x0800fddd
 800fd3c:	0800fddd 	.word	0x0800fddd
 800fd40:	0800fddd 	.word	0x0800fddd
 800fd44:	0800fddd 	.word	0x0800fddd
 800fd48:	0800fdbd 	.word	0x0800fdbd
 800fd4c:	0800fddd 	.word	0x0800fddd
 800fd50:	0800fddd 	.word	0x0800fddd
 800fd54:	0800fddd 	.word	0x0800fddd
 800fd58:	0800fddd 	.word	0x0800fddd
 800fd5c:	0800fddd 	.word	0x0800fddd
 800fd60:	0800fddd 	.word	0x0800fddd
 800fd64:	0800fddd 	.word	0x0800fddd
 800fd68:	0800fdc5 	.word	0x0800fdc5
 800fd6c:	0800fddd 	.word	0x0800fddd
 800fd70:	0800fddd 	.word	0x0800fddd
 800fd74:	0800fddd 	.word	0x0800fddd
 800fd78:	0800fddd 	.word	0x0800fddd
 800fd7c:	0800fddd 	.word	0x0800fddd
 800fd80:	0800fddd 	.word	0x0800fddd
 800fd84:	0800fddd 	.word	0x0800fddd
 800fd88:	0800fdcd 	.word	0x0800fdcd
 800fd8c:	0800fddd 	.word	0x0800fddd
 800fd90:	0800fddd 	.word	0x0800fddd
 800fd94:	0800fddd 	.word	0x0800fddd
 800fd98:	0800fddd 	.word	0x0800fddd
 800fd9c:	0800fddd 	.word	0x0800fddd
 800fda0:	0800fddd 	.word	0x0800fddd
 800fda4:	0800fddd 	.word	0x0800fddd
 800fda8:	0800fdd5 	.word	0x0800fdd5
 800fdac:	2301      	movs	r3, #1
 800fdae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdb2:	e1c0      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fdb4:	2304      	movs	r3, #4
 800fdb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdba:	e1bc      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fdbc:	2308      	movs	r3, #8
 800fdbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdc2:	e1b8      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fdc4:	2310      	movs	r3, #16
 800fdc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdca:	e1b4      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fdcc:	2320      	movs	r3, #32
 800fdce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdd2:	e1b0      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fdd4:	2340      	movs	r3, #64	@ 0x40
 800fdd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdda:	e1ac      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fddc:	2380      	movs	r3, #128	@ 0x80
 800fdde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fde2:	e1a8      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	4a75      	ldr	r2, [pc, #468]	@ (800ffc0 <UART_SetConfig+0x638>)
 800fdea:	4293      	cmp	r3, r2
 800fdec:	d130      	bne.n	800fe50 <UART_SetConfig+0x4c8>
 800fdee:	4b73      	ldr	r3, [pc, #460]	@ (800ffbc <UART_SetConfig+0x634>)
 800fdf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fdf2:	f003 0307 	and.w	r3, r3, #7
 800fdf6:	2b05      	cmp	r3, #5
 800fdf8:	d826      	bhi.n	800fe48 <UART_SetConfig+0x4c0>
 800fdfa:	a201      	add	r2, pc, #4	@ (adr r2, 800fe00 <UART_SetConfig+0x478>)
 800fdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe00:	0800fe19 	.word	0x0800fe19
 800fe04:	0800fe21 	.word	0x0800fe21
 800fe08:	0800fe29 	.word	0x0800fe29
 800fe0c:	0800fe31 	.word	0x0800fe31
 800fe10:	0800fe39 	.word	0x0800fe39
 800fe14:	0800fe41 	.word	0x0800fe41
 800fe18:	2300      	movs	r3, #0
 800fe1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe1e:	e18a      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fe20:	2304      	movs	r3, #4
 800fe22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe26:	e186      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fe28:	2308      	movs	r3, #8
 800fe2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe2e:	e182      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fe30:	2310      	movs	r3, #16
 800fe32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe36:	e17e      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fe38:	2320      	movs	r3, #32
 800fe3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe3e:	e17a      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fe40:	2340      	movs	r3, #64	@ 0x40
 800fe42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe46:	e176      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fe48:	2380      	movs	r3, #128	@ 0x80
 800fe4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe4e:	e172      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	4a5b      	ldr	r2, [pc, #364]	@ (800ffc4 <UART_SetConfig+0x63c>)
 800fe56:	4293      	cmp	r3, r2
 800fe58:	d130      	bne.n	800febc <UART_SetConfig+0x534>
 800fe5a:	4b58      	ldr	r3, [pc, #352]	@ (800ffbc <UART_SetConfig+0x634>)
 800fe5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe5e:	f003 0307 	and.w	r3, r3, #7
 800fe62:	2b05      	cmp	r3, #5
 800fe64:	d826      	bhi.n	800feb4 <UART_SetConfig+0x52c>
 800fe66:	a201      	add	r2, pc, #4	@ (adr r2, 800fe6c <UART_SetConfig+0x4e4>)
 800fe68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe6c:	0800fe85 	.word	0x0800fe85
 800fe70:	0800fe8d 	.word	0x0800fe8d
 800fe74:	0800fe95 	.word	0x0800fe95
 800fe78:	0800fe9d 	.word	0x0800fe9d
 800fe7c:	0800fea5 	.word	0x0800fea5
 800fe80:	0800fead 	.word	0x0800fead
 800fe84:	2300      	movs	r3, #0
 800fe86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe8a:	e154      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fe8c:	2304      	movs	r3, #4
 800fe8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe92:	e150      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fe94:	2308      	movs	r3, #8
 800fe96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe9a:	e14c      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fe9c:	2310      	movs	r3, #16
 800fe9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fea2:	e148      	b.n	8010136 <UART_SetConfig+0x7ae>
 800fea4:	2320      	movs	r3, #32
 800fea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800feaa:	e144      	b.n	8010136 <UART_SetConfig+0x7ae>
 800feac:	2340      	movs	r3, #64	@ 0x40
 800feae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800feb2:	e140      	b.n	8010136 <UART_SetConfig+0x7ae>
 800feb4:	2380      	movs	r3, #128	@ 0x80
 800feb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800feba:	e13c      	b.n	8010136 <UART_SetConfig+0x7ae>
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	4a41      	ldr	r2, [pc, #260]	@ (800ffc8 <UART_SetConfig+0x640>)
 800fec2:	4293      	cmp	r3, r2
 800fec4:	f040 8082 	bne.w	800ffcc <UART_SetConfig+0x644>
 800fec8:	4b3c      	ldr	r3, [pc, #240]	@ (800ffbc <UART_SetConfig+0x634>)
 800feca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fecc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fed0:	2b28      	cmp	r3, #40	@ 0x28
 800fed2:	d86d      	bhi.n	800ffb0 <UART_SetConfig+0x628>
 800fed4:	a201      	add	r2, pc, #4	@ (adr r2, 800fedc <UART_SetConfig+0x554>)
 800fed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feda:	bf00      	nop
 800fedc:	0800ff81 	.word	0x0800ff81
 800fee0:	0800ffb1 	.word	0x0800ffb1
 800fee4:	0800ffb1 	.word	0x0800ffb1
 800fee8:	0800ffb1 	.word	0x0800ffb1
 800feec:	0800ffb1 	.word	0x0800ffb1
 800fef0:	0800ffb1 	.word	0x0800ffb1
 800fef4:	0800ffb1 	.word	0x0800ffb1
 800fef8:	0800ffb1 	.word	0x0800ffb1
 800fefc:	0800ff89 	.word	0x0800ff89
 800ff00:	0800ffb1 	.word	0x0800ffb1
 800ff04:	0800ffb1 	.word	0x0800ffb1
 800ff08:	0800ffb1 	.word	0x0800ffb1
 800ff0c:	0800ffb1 	.word	0x0800ffb1
 800ff10:	0800ffb1 	.word	0x0800ffb1
 800ff14:	0800ffb1 	.word	0x0800ffb1
 800ff18:	0800ffb1 	.word	0x0800ffb1
 800ff1c:	0800ff91 	.word	0x0800ff91
 800ff20:	0800ffb1 	.word	0x0800ffb1
 800ff24:	0800ffb1 	.word	0x0800ffb1
 800ff28:	0800ffb1 	.word	0x0800ffb1
 800ff2c:	0800ffb1 	.word	0x0800ffb1
 800ff30:	0800ffb1 	.word	0x0800ffb1
 800ff34:	0800ffb1 	.word	0x0800ffb1
 800ff38:	0800ffb1 	.word	0x0800ffb1
 800ff3c:	0800ff99 	.word	0x0800ff99
 800ff40:	0800ffb1 	.word	0x0800ffb1
 800ff44:	0800ffb1 	.word	0x0800ffb1
 800ff48:	0800ffb1 	.word	0x0800ffb1
 800ff4c:	0800ffb1 	.word	0x0800ffb1
 800ff50:	0800ffb1 	.word	0x0800ffb1
 800ff54:	0800ffb1 	.word	0x0800ffb1
 800ff58:	0800ffb1 	.word	0x0800ffb1
 800ff5c:	0800ffa1 	.word	0x0800ffa1
 800ff60:	0800ffb1 	.word	0x0800ffb1
 800ff64:	0800ffb1 	.word	0x0800ffb1
 800ff68:	0800ffb1 	.word	0x0800ffb1
 800ff6c:	0800ffb1 	.word	0x0800ffb1
 800ff70:	0800ffb1 	.word	0x0800ffb1
 800ff74:	0800ffb1 	.word	0x0800ffb1
 800ff78:	0800ffb1 	.word	0x0800ffb1
 800ff7c:	0800ffa9 	.word	0x0800ffa9
 800ff80:	2301      	movs	r3, #1
 800ff82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff86:	e0d6      	b.n	8010136 <UART_SetConfig+0x7ae>
 800ff88:	2304      	movs	r3, #4
 800ff8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff8e:	e0d2      	b.n	8010136 <UART_SetConfig+0x7ae>
 800ff90:	2308      	movs	r3, #8
 800ff92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff96:	e0ce      	b.n	8010136 <UART_SetConfig+0x7ae>
 800ff98:	2310      	movs	r3, #16
 800ff9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff9e:	e0ca      	b.n	8010136 <UART_SetConfig+0x7ae>
 800ffa0:	2320      	movs	r3, #32
 800ffa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffa6:	e0c6      	b.n	8010136 <UART_SetConfig+0x7ae>
 800ffa8:	2340      	movs	r3, #64	@ 0x40
 800ffaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffae:	e0c2      	b.n	8010136 <UART_SetConfig+0x7ae>
 800ffb0:	2380      	movs	r3, #128	@ 0x80
 800ffb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffb6:	e0be      	b.n	8010136 <UART_SetConfig+0x7ae>
 800ffb8:	40011400 	.word	0x40011400
 800ffbc:	58024400 	.word	0x58024400
 800ffc0:	40007800 	.word	0x40007800
 800ffc4:	40007c00 	.word	0x40007c00
 800ffc8:	40011800 	.word	0x40011800
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4aad      	ldr	r2, [pc, #692]	@ (8010288 <UART_SetConfig+0x900>)
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d176      	bne.n	80100c4 <UART_SetConfig+0x73c>
 800ffd6:	4bad      	ldr	r3, [pc, #692]	@ (801028c <UART_SetConfig+0x904>)
 800ffd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ffda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ffde:	2b28      	cmp	r3, #40	@ 0x28
 800ffe0:	d86c      	bhi.n	80100bc <UART_SetConfig+0x734>
 800ffe2:	a201      	add	r2, pc, #4	@ (adr r2, 800ffe8 <UART_SetConfig+0x660>)
 800ffe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffe8:	0801008d 	.word	0x0801008d
 800ffec:	080100bd 	.word	0x080100bd
 800fff0:	080100bd 	.word	0x080100bd
 800fff4:	080100bd 	.word	0x080100bd
 800fff8:	080100bd 	.word	0x080100bd
 800fffc:	080100bd 	.word	0x080100bd
 8010000:	080100bd 	.word	0x080100bd
 8010004:	080100bd 	.word	0x080100bd
 8010008:	08010095 	.word	0x08010095
 801000c:	080100bd 	.word	0x080100bd
 8010010:	080100bd 	.word	0x080100bd
 8010014:	080100bd 	.word	0x080100bd
 8010018:	080100bd 	.word	0x080100bd
 801001c:	080100bd 	.word	0x080100bd
 8010020:	080100bd 	.word	0x080100bd
 8010024:	080100bd 	.word	0x080100bd
 8010028:	0801009d 	.word	0x0801009d
 801002c:	080100bd 	.word	0x080100bd
 8010030:	080100bd 	.word	0x080100bd
 8010034:	080100bd 	.word	0x080100bd
 8010038:	080100bd 	.word	0x080100bd
 801003c:	080100bd 	.word	0x080100bd
 8010040:	080100bd 	.word	0x080100bd
 8010044:	080100bd 	.word	0x080100bd
 8010048:	080100a5 	.word	0x080100a5
 801004c:	080100bd 	.word	0x080100bd
 8010050:	080100bd 	.word	0x080100bd
 8010054:	080100bd 	.word	0x080100bd
 8010058:	080100bd 	.word	0x080100bd
 801005c:	080100bd 	.word	0x080100bd
 8010060:	080100bd 	.word	0x080100bd
 8010064:	080100bd 	.word	0x080100bd
 8010068:	080100ad 	.word	0x080100ad
 801006c:	080100bd 	.word	0x080100bd
 8010070:	080100bd 	.word	0x080100bd
 8010074:	080100bd 	.word	0x080100bd
 8010078:	080100bd 	.word	0x080100bd
 801007c:	080100bd 	.word	0x080100bd
 8010080:	080100bd 	.word	0x080100bd
 8010084:	080100bd 	.word	0x080100bd
 8010088:	080100b5 	.word	0x080100b5
 801008c:	2301      	movs	r3, #1
 801008e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010092:	e050      	b.n	8010136 <UART_SetConfig+0x7ae>
 8010094:	2304      	movs	r3, #4
 8010096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801009a:	e04c      	b.n	8010136 <UART_SetConfig+0x7ae>
 801009c:	2308      	movs	r3, #8
 801009e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100a2:	e048      	b.n	8010136 <UART_SetConfig+0x7ae>
 80100a4:	2310      	movs	r3, #16
 80100a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100aa:	e044      	b.n	8010136 <UART_SetConfig+0x7ae>
 80100ac:	2320      	movs	r3, #32
 80100ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100b2:	e040      	b.n	8010136 <UART_SetConfig+0x7ae>
 80100b4:	2340      	movs	r3, #64	@ 0x40
 80100b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100ba:	e03c      	b.n	8010136 <UART_SetConfig+0x7ae>
 80100bc:	2380      	movs	r3, #128	@ 0x80
 80100be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100c2:	e038      	b.n	8010136 <UART_SetConfig+0x7ae>
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	4a71      	ldr	r2, [pc, #452]	@ (8010290 <UART_SetConfig+0x908>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d130      	bne.n	8010130 <UART_SetConfig+0x7a8>
 80100ce:	4b6f      	ldr	r3, [pc, #444]	@ (801028c <UART_SetConfig+0x904>)
 80100d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80100d2:	f003 0307 	and.w	r3, r3, #7
 80100d6:	2b05      	cmp	r3, #5
 80100d8:	d826      	bhi.n	8010128 <UART_SetConfig+0x7a0>
 80100da:	a201      	add	r2, pc, #4	@ (adr r2, 80100e0 <UART_SetConfig+0x758>)
 80100dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100e0:	080100f9 	.word	0x080100f9
 80100e4:	08010101 	.word	0x08010101
 80100e8:	08010109 	.word	0x08010109
 80100ec:	08010111 	.word	0x08010111
 80100f0:	08010119 	.word	0x08010119
 80100f4:	08010121 	.word	0x08010121
 80100f8:	2302      	movs	r3, #2
 80100fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100fe:	e01a      	b.n	8010136 <UART_SetConfig+0x7ae>
 8010100:	2304      	movs	r3, #4
 8010102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010106:	e016      	b.n	8010136 <UART_SetConfig+0x7ae>
 8010108:	2308      	movs	r3, #8
 801010a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801010e:	e012      	b.n	8010136 <UART_SetConfig+0x7ae>
 8010110:	2310      	movs	r3, #16
 8010112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010116:	e00e      	b.n	8010136 <UART_SetConfig+0x7ae>
 8010118:	2320      	movs	r3, #32
 801011a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801011e:	e00a      	b.n	8010136 <UART_SetConfig+0x7ae>
 8010120:	2340      	movs	r3, #64	@ 0x40
 8010122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010126:	e006      	b.n	8010136 <UART_SetConfig+0x7ae>
 8010128:	2380      	movs	r3, #128	@ 0x80
 801012a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801012e:	e002      	b.n	8010136 <UART_SetConfig+0x7ae>
 8010130:	2380      	movs	r3, #128	@ 0x80
 8010132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	4a55      	ldr	r2, [pc, #340]	@ (8010290 <UART_SetConfig+0x908>)
 801013c:	4293      	cmp	r3, r2
 801013e:	f040 80f8 	bne.w	8010332 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010142:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010146:	2b20      	cmp	r3, #32
 8010148:	dc46      	bgt.n	80101d8 <UART_SetConfig+0x850>
 801014a:	2b02      	cmp	r3, #2
 801014c:	db75      	blt.n	801023a <UART_SetConfig+0x8b2>
 801014e:	3b02      	subs	r3, #2
 8010150:	2b1e      	cmp	r3, #30
 8010152:	d872      	bhi.n	801023a <UART_SetConfig+0x8b2>
 8010154:	a201      	add	r2, pc, #4	@ (adr r2, 801015c <UART_SetConfig+0x7d4>)
 8010156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801015a:	bf00      	nop
 801015c:	080101df 	.word	0x080101df
 8010160:	0801023b 	.word	0x0801023b
 8010164:	080101e7 	.word	0x080101e7
 8010168:	0801023b 	.word	0x0801023b
 801016c:	0801023b 	.word	0x0801023b
 8010170:	0801023b 	.word	0x0801023b
 8010174:	080101f7 	.word	0x080101f7
 8010178:	0801023b 	.word	0x0801023b
 801017c:	0801023b 	.word	0x0801023b
 8010180:	0801023b 	.word	0x0801023b
 8010184:	0801023b 	.word	0x0801023b
 8010188:	0801023b 	.word	0x0801023b
 801018c:	0801023b 	.word	0x0801023b
 8010190:	0801023b 	.word	0x0801023b
 8010194:	08010207 	.word	0x08010207
 8010198:	0801023b 	.word	0x0801023b
 801019c:	0801023b 	.word	0x0801023b
 80101a0:	0801023b 	.word	0x0801023b
 80101a4:	0801023b 	.word	0x0801023b
 80101a8:	0801023b 	.word	0x0801023b
 80101ac:	0801023b 	.word	0x0801023b
 80101b0:	0801023b 	.word	0x0801023b
 80101b4:	0801023b 	.word	0x0801023b
 80101b8:	0801023b 	.word	0x0801023b
 80101bc:	0801023b 	.word	0x0801023b
 80101c0:	0801023b 	.word	0x0801023b
 80101c4:	0801023b 	.word	0x0801023b
 80101c8:	0801023b 	.word	0x0801023b
 80101cc:	0801023b 	.word	0x0801023b
 80101d0:	0801023b 	.word	0x0801023b
 80101d4:	0801022d 	.word	0x0801022d
 80101d8:	2b40      	cmp	r3, #64	@ 0x40
 80101da:	d02a      	beq.n	8010232 <UART_SetConfig+0x8aa>
 80101dc:	e02d      	b.n	801023a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80101de:	f7fd f93f 	bl	800d460 <HAL_RCCEx_GetD3PCLK1Freq>
 80101e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80101e4:	e02f      	b.n	8010246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80101e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fd f94e 	bl	800d48c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80101f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80101f4:	e027      	b.n	8010246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80101f6:	f107 0318 	add.w	r3, r7, #24
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7fd fa9a 	bl	800d734 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010200:	69fb      	ldr	r3, [r7, #28]
 8010202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010204:	e01f      	b.n	8010246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010206:	4b21      	ldr	r3, [pc, #132]	@ (801028c <UART_SetConfig+0x904>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	f003 0320 	and.w	r3, r3, #32
 801020e:	2b00      	cmp	r3, #0
 8010210:	d009      	beq.n	8010226 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010212:	4b1e      	ldr	r3, [pc, #120]	@ (801028c <UART_SetConfig+0x904>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	08db      	lsrs	r3, r3, #3
 8010218:	f003 0303 	and.w	r3, r3, #3
 801021c:	4a1d      	ldr	r2, [pc, #116]	@ (8010294 <UART_SetConfig+0x90c>)
 801021e:	fa22 f303 	lsr.w	r3, r2, r3
 8010222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010224:	e00f      	b.n	8010246 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010226:	4b1b      	ldr	r3, [pc, #108]	@ (8010294 <UART_SetConfig+0x90c>)
 8010228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801022a:	e00c      	b.n	8010246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801022c:	4b1a      	ldr	r3, [pc, #104]	@ (8010298 <UART_SetConfig+0x910>)
 801022e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010230:	e009      	b.n	8010246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010238:	e005      	b.n	8010246 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801023a:	2300      	movs	r3, #0
 801023c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801023e:	2301      	movs	r3, #1
 8010240:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010244:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010248:	2b00      	cmp	r3, #0
 801024a:	f000 81ee 	beq.w	801062a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010252:	4a12      	ldr	r2, [pc, #72]	@ (801029c <UART_SetConfig+0x914>)
 8010254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010258:	461a      	mov	r2, r3
 801025a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801025c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010260:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	685a      	ldr	r2, [r3, #4]
 8010266:	4613      	mov	r3, r2
 8010268:	005b      	lsls	r3, r3, #1
 801026a:	4413      	add	r3, r2
 801026c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801026e:	429a      	cmp	r2, r3
 8010270:	d305      	bcc.n	801027e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	685b      	ldr	r3, [r3, #4]
 8010276:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801027a:	429a      	cmp	r2, r3
 801027c:	d910      	bls.n	80102a0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801027e:	2301      	movs	r3, #1
 8010280:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010284:	e1d1      	b.n	801062a <UART_SetConfig+0xca2>
 8010286:	bf00      	nop
 8010288:	40011c00 	.word	0x40011c00
 801028c:	58024400 	.word	0x58024400
 8010290:	58000c00 	.word	0x58000c00
 8010294:	03d09000 	.word	0x03d09000
 8010298:	003d0900 	.word	0x003d0900
 801029c:	08014330 	.word	0x08014330
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80102a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102a2:	2200      	movs	r2, #0
 80102a4:	60bb      	str	r3, [r7, #8]
 80102a6:	60fa      	str	r2, [r7, #12]
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102ac:	4ac0      	ldr	r2, [pc, #768]	@ (80105b0 <UART_SetConfig+0xc28>)
 80102ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102b2:	b29b      	uxth	r3, r3
 80102b4:	2200      	movs	r2, #0
 80102b6:	603b      	str	r3, [r7, #0]
 80102b8:	607a      	str	r2, [r7, #4]
 80102ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80102c2:	f7f0 f87d 	bl	80003c0 <__aeabi_uldivmod>
 80102c6:	4602      	mov	r2, r0
 80102c8:	460b      	mov	r3, r1
 80102ca:	4610      	mov	r0, r2
 80102cc:	4619      	mov	r1, r3
 80102ce:	f04f 0200 	mov.w	r2, #0
 80102d2:	f04f 0300 	mov.w	r3, #0
 80102d6:	020b      	lsls	r3, r1, #8
 80102d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80102dc:	0202      	lsls	r2, r0, #8
 80102de:	6979      	ldr	r1, [r7, #20]
 80102e0:	6849      	ldr	r1, [r1, #4]
 80102e2:	0849      	lsrs	r1, r1, #1
 80102e4:	2000      	movs	r0, #0
 80102e6:	460c      	mov	r4, r1
 80102e8:	4605      	mov	r5, r0
 80102ea:	eb12 0804 	adds.w	r8, r2, r4
 80102ee:	eb43 0905 	adc.w	r9, r3, r5
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	685b      	ldr	r3, [r3, #4]
 80102f6:	2200      	movs	r2, #0
 80102f8:	469a      	mov	sl, r3
 80102fa:	4693      	mov	fp, r2
 80102fc:	4652      	mov	r2, sl
 80102fe:	465b      	mov	r3, fp
 8010300:	4640      	mov	r0, r8
 8010302:	4649      	mov	r1, r9
 8010304:	f7f0 f85c 	bl	80003c0 <__aeabi_uldivmod>
 8010308:	4602      	mov	r2, r0
 801030a:	460b      	mov	r3, r1
 801030c:	4613      	mov	r3, r2
 801030e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010312:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010316:	d308      	bcc.n	801032a <UART_SetConfig+0x9a2>
 8010318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801031a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801031e:	d204      	bcs.n	801032a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010326:	60da      	str	r2, [r3, #12]
 8010328:	e17f      	b.n	801062a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801032a:	2301      	movs	r3, #1
 801032c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010330:	e17b      	b.n	801062a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010332:	697b      	ldr	r3, [r7, #20]
 8010334:	69db      	ldr	r3, [r3, #28]
 8010336:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801033a:	f040 80bd 	bne.w	80104b8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801033e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010342:	2b20      	cmp	r3, #32
 8010344:	dc48      	bgt.n	80103d8 <UART_SetConfig+0xa50>
 8010346:	2b00      	cmp	r3, #0
 8010348:	db7b      	blt.n	8010442 <UART_SetConfig+0xaba>
 801034a:	2b20      	cmp	r3, #32
 801034c:	d879      	bhi.n	8010442 <UART_SetConfig+0xaba>
 801034e:	a201      	add	r2, pc, #4	@ (adr r2, 8010354 <UART_SetConfig+0x9cc>)
 8010350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010354:	080103df 	.word	0x080103df
 8010358:	080103e7 	.word	0x080103e7
 801035c:	08010443 	.word	0x08010443
 8010360:	08010443 	.word	0x08010443
 8010364:	080103ef 	.word	0x080103ef
 8010368:	08010443 	.word	0x08010443
 801036c:	08010443 	.word	0x08010443
 8010370:	08010443 	.word	0x08010443
 8010374:	080103ff 	.word	0x080103ff
 8010378:	08010443 	.word	0x08010443
 801037c:	08010443 	.word	0x08010443
 8010380:	08010443 	.word	0x08010443
 8010384:	08010443 	.word	0x08010443
 8010388:	08010443 	.word	0x08010443
 801038c:	08010443 	.word	0x08010443
 8010390:	08010443 	.word	0x08010443
 8010394:	0801040f 	.word	0x0801040f
 8010398:	08010443 	.word	0x08010443
 801039c:	08010443 	.word	0x08010443
 80103a0:	08010443 	.word	0x08010443
 80103a4:	08010443 	.word	0x08010443
 80103a8:	08010443 	.word	0x08010443
 80103ac:	08010443 	.word	0x08010443
 80103b0:	08010443 	.word	0x08010443
 80103b4:	08010443 	.word	0x08010443
 80103b8:	08010443 	.word	0x08010443
 80103bc:	08010443 	.word	0x08010443
 80103c0:	08010443 	.word	0x08010443
 80103c4:	08010443 	.word	0x08010443
 80103c8:	08010443 	.word	0x08010443
 80103cc:	08010443 	.word	0x08010443
 80103d0:	08010443 	.word	0x08010443
 80103d4:	08010435 	.word	0x08010435
 80103d8:	2b40      	cmp	r3, #64	@ 0x40
 80103da:	d02e      	beq.n	801043a <UART_SetConfig+0xab2>
 80103dc:	e031      	b.n	8010442 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80103de:	f7fb f9a1 	bl	800b724 <HAL_RCC_GetPCLK1Freq>
 80103e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80103e4:	e033      	b.n	801044e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80103e6:	f7fb f9b3 	bl	800b750 <HAL_RCC_GetPCLK2Freq>
 80103ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80103ec:	e02f      	b.n	801044e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80103ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80103f2:	4618      	mov	r0, r3
 80103f4:	f7fd f84a 	bl	800d48c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80103f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103fc:	e027      	b.n	801044e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80103fe:	f107 0318 	add.w	r3, r7, #24
 8010402:	4618      	mov	r0, r3
 8010404:	f7fd f996 	bl	800d734 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010408:	69fb      	ldr	r3, [r7, #28]
 801040a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801040c:	e01f      	b.n	801044e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801040e:	4b69      	ldr	r3, [pc, #420]	@ (80105b4 <UART_SetConfig+0xc2c>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f003 0320 	and.w	r3, r3, #32
 8010416:	2b00      	cmp	r3, #0
 8010418:	d009      	beq.n	801042e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801041a:	4b66      	ldr	r3, [pc, #408]	@ (80105b4 <UART_SetConfig+0xc2c>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	08db      	lsrs	r3, r3, #3
 8010420:	f003 0303 	and.w	r3, r3, #3
 8010424:	4a64      	ldr	r2, [pc, #400]	@ (80105b8 <UART_SetConfig+0xc30>)
 8010426:	fa22 f303 	lsr.w	r3, r2, r3
 801042a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801042c:	e00f      	b.n	801044e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801042e:	4b62      	ldr	r3, [pc, #392]	@ (80105b8 <UART_SetConfig+0xc30>)
 8010430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010432:	e00c      	b.n	801044e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010434:	4b61      	ldr	r3, [pc, #388]	@ (80105bc <UART_SetConfig+0xc34>)
 8010436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010438:	e009      	b.n	801044e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801043a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801043e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010440:	e005      	b.n	801044e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8010442:	2300      	movs	r3, #0
 8010444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010446:	2301      	movs	r3, #1
 8010448:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801044c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801044e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010450:	2b00      	cmp	r3, #0
 8010452:	f000 80ea 	beq.w	801062a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801045a:	4a55      	ldr	r2, [pc, #340]	@ (80105b0 <UART_SetConfig+0xc28>)
 801045c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010460:	461a      	mov	r2, r3
 8010462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010464:	fbb3 f3f2 	udiv	r3, r3, r2
 8010468:	005a      	lsls	r2, r3, #1
 801046a:	697b      	ldr	r3, [r7, #20]
 801046c:	685b      	ldr	r3, [r3, #4]
 801046e:	085b      	lsrs	r3, r3, #1
 8010470:	441a      	add	r2, r3
 8010472:	697b      	ldr	r3, [r7, #20]
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	fbb2 f3f3 	udiv	r3, r2, r3
 801047a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801047c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801047e:	2b0f      	cmp	r3, #15
 8010480:	d916      	bls.n	80104b0 <UART_SetConfig+0xb28>
 8010482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010488:	d212      	bcs.n	80104b0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801048a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801048c:	b29b      	uxth	r3, r3
 801048e:	f023 030f 	bic.w	r3, r3, #15
 8010492:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010496:	085b      	lsrs	r3, r3, #1
 8010498:	b29b      	uxth	r3, r3
 801049a:	f003 0307 	and.w	r3, r3, #7
 801049e:	b29a      	uxth	r2, r3
 80104a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80104a2:	4313      	orrs	r3, r2
 80104a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80104ac:	60da      	str	r2, [r3, #12]
 80104ae:	e0bc      	b.n	801062a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80104b0:	2301      	movs	r3, #1
 80104b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80104b6:	e0b8      	b.n	801062a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80104b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80104bc:	2b20      	cmp	r3, #32
 80104be:	dc4b      	bgt.n	8010558 <UART_SetConfig+0xbd0>
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f2c0 8087 	blt.w	80105d4 <UART_SetConfig+0xc4c>
 80104c6:	2b20      	cmp	r3, #32
 80104c8:	f200 8084 	bhi.w	80105d4 <UART_SetConfig+0xc4c>
 80104cc:	a201      	add	r2, pc, #4	@ (adr r2, 80104d4 <UART_SetConfig+0xb4c>)
 80104ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104d2:	bf00      	nop
 80104d4:	0801055f 	.word	0x0801055f
 80104d8:	08010567 	.word	0x08010567
 80104dc:	080105d5 	.word	0x080105d5
 80104e0:	080105d5 	.word	0x080105d5
 80104e4:	0801056f 	.word	0x0801056f
 80104e8:	080105d5 	.word	0x080105d5
 80104ec:	080105d5 	.word	0x080105d5
 80104f0:	080105d5 	.word	0x080105d5
 80104f4:	0801057f 	.word	0x0801057f
 80104f8:	080105d5 	.word	0x080105d5
 80104fc:	080105d5 	.word	0x080105d5
 8010500:	080105d5 	.word	0x080105d5
 8010504:	080105d5 	.word	0x080105d5
 8010508:	080105d5 	.word	0x080105d5
 801050c:	080105d5 	.word	0x080105d5
 8010510:	080105d5 	.word	0x080105d5
 8010514:	0801058f 	.word	0x0801058f
 8010518:	080105d5 	.word	0x080105d5
 801051c:	080105d5 	.word	0x080105d5
 8010520:	080105d5 	.word	0x080105d5
 8010524:	080105d5 	.word	0x080105d5
 8010528:	080105d5 	.word	0x080105d5
 801052c:	080105d5 	.word	0x080105d5
 8010530:	080105d5 	.word	0x080105d5
 8010534:	080105d5 	.word	0x080105d5
 8010538:	080105d5 	.word	0x080105d5
 801053c:	080105d5 	.word	0x080105d5
 8010540:	080105d5 	.word	0x080105d5
 8010544:	080105d5 	.word	0x080105d5
 8010548:	080105d5 	.word	0x080105d5
 801054c:	080105d5 	.word	0x080105d5
 8010550:	080105d5 	.word	0x080105d5
 8010554:	080105c7 	.word	0x080105c7
 8010558:	2b40      	cmp	r3, #64	@ 0x40
 801055a:	d037      	beq.n	80105cc <UART_SetConfig+0xc44>
 801055c:	e03a      	b.n	80105d4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801055e:	f7fb f8e1 	bl	800b724 <HAL_RCC_GetPCLK1Freq>
 8010562:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010564:	e03c      	b.n	80105e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010566:	f7fb f8f3 	bl	800b750 <HAL_RCC_GetPCLK2Freq>
 801056a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801056c:	e038      	b.n	80105e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801056e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010572:	4618      	mov	r0, r3
 8010574:	f7fc ff8a 	bl	800d48c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801057a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801057c:	e030      	b.n	80105e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801057e:	f107 0318 	add.w	r3, r7, #24
 8010582:	4618      	mov	r0, r3
 8010584:	f7fd f8d6 	bl	800d734 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010588:	69fb      	ldr	r3, [r7, #28]
 801058a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801058c:	e028      	b.n	80105e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801058e:	4b09      	ldr	r3, [pc, #36]	@ (80105b4 <UART_SetConfig+0xc2c>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	f003 0320 	and.w	r3, r3, #32
 8010596:	2b00      	cmp	r3, #0
 8010598:	d012      	beq.n	80105c0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801059a:	4b06      	ldr	r3, [pc, #24]	@ (80105b4 <UART_SetConfig+0xc2c>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	08db      	lsrs	r3, r3, #3
 80105a0:	f003 0303 	and.w	r3, r3, #3
 80105a4:	4a04      	ldr	r2, [pc, #16]	@ (80105b8 <UART_SetConfig+0xc30>)
 80105a6:	fa22 f303 	lsr.w	r3, r2, r3
 80105aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80105ac:	e018      	b.n	80105e0 <UART_SetConfig+0xc58>
 80105ae:	bf00      	nop
 80105b0:	08014330 	.word	0x08014330
 80105b4:	58024400 	.word	0x58024400
 80105b8:	03d09000 	.word	0x03d09000
 80105bc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80105c0:	4b24      	ldr	r3, [pc, #144]	@ (8010654 <UART_SetConfig+0xccc>)
 80105c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80105c4:	e00c      	b.n	80105e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80105c6:	4b24      	ldr	r3, [pc, #144]	@ (8010658 <UART_SetConfig+0xcd0>)
 80105c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80105ca:	e009      	b.n	80105e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80105cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80105d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80105d2:	e005      	b.n	80105e0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80105d4:	2300      	movs	r3, #0
 80105d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80105d8:	2301      	movs	r3, #1
 80105da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80105de:	bf00      	nop
    }

    if (pclk != 0U)
 80105e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d021      	beq.n	801062a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105ea:	4a1c      	ldr	r2, [pc, #112]	@ (801065c <UART_SetConfig+0xcd4>)
 80105ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105f0:	461a      	mov	r2, r3
 80105f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	685b      	ldr	r3, [r3, #4]
 80105fc:	085b      	lsrs	r3, r3, #1
 80105fe:	441a      	add	r2, r3
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	fbb2 f3f3 	udiv	r3, r2, r3
 8010608:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801060a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801060c:	2b0f      	cmp	r3, #15
 801060e:	d909      	bls.n	8010624 <UART_SetConfig+0xc9c>
 8010610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010616:	d205      	bcs.n	8010624 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801061a:	b29a      	uxth	r2, r3
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	60da      	str	r2, [r3, #12]
 8010622:	e002      	b.n	801062a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010624:	2301      	movs	r3, #1
 8010626:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	2201      	movs	r2, #1
 801062e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	2201      	movs	r2, #1
 8010636:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	2200      	movs	r2, #0
 801063e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010640:	697b      	ldr	r3, [r7, #20]
 8010642:	2200      	movs	r2, #0
 8010644:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010646:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801064a:	4618      	mov	r0, r3
 801064c:	3748      	adds	r7, #72	@ 0x48
 801064e:	46bd      	mov	sp, r7
 8010650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010654:	03d09000 	.word	0x03d09000
 8010658:	003d0900 	.word	0x003d0900
 801065c:	08014330 	.word	0x08014330

08010660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010660:	b480      	push	{r7}
 8010662:	b083      	sub	sp, #12
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801066c:	f003 0301 	and.w	r3, r3, #1
 8010670:	2b00      	cmp	r3, #0
 8010672:	d00a      	beq.n	801068a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	685b      	ldr	r3, [r3, #4]
 801067a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	430a      	orrs	r2, r1
 8010688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801068e:	f003 0302 	and.w	r3, r3, #2
 8010692:	2b00      	cmp	r3, #0
 8010694:	d00a      	beq.n	80106ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	685b      	ldr	r3, [r3, #4]
 801069c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	430a      	orrs	r2, r1
 80106aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106b0:	f003 0304 	and.w	r3, r3, #4
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d00a      	beq.n	80106ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	430a      	orrs	r2, r1
 80106cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106d2:	f003 0308 	and.w	r3, r3, #8
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d00a      	beq.n	80106f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	685b      	ldr	r3, [r3, #4]
 80106e0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	430a      	orrs	r2, r1
 80106ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106f4:	f003 0310 	and.w	r3, r3, #16
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d00a      	beq.n	8010712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	689b      	ldr	r3, [r3, #8]
 8010702:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	430a      	orrs	r2, r1
 8010710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010716:	f003 0320 	and.w	r3, r3, #32
 801071a:	2b00      	cmp	r3, #0
 801071c:	d00a      	beq.n	8010734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	689b      	ldr	r3, [r3, #8]
 8010724:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	430a      	orrs	r2, r1
 8010732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801073c:	2b00      	cmp	r3, #0
 801073e:	d01a      	beq.n	8010776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	685b      	ldr	r3, [r3, #4]
 8010746:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	430a      	orrs	r2, r1
 8010754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801075a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801075e:	d10a      	bne.n	8010776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	430a      	orrs	r2, r1
 8010774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801077a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801077e:	2b00      	cmp	r3, #0
 8010780:	d00a      	beq.n	8010798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	685b      	ldr	r3, [r3, #4]
 8010788:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	430a      	orrs	r2, r1
 8010796:	605a      	str	r2, [r3, #4]
  }
}
 8010798:	bf00      	nop
 801079a:	370c      	adds	r7, #12
 801079c:	46bd      	mov	sp, r7
 801079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a2:	4770      	bx	lr

080107a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b098      	sub	sp, #96	@ 0x60
 80107a8:	af02      	add	r7, sp, #8
 80107aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2200      	movs	r2, #0
 80107b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80107b4:	f7f3 fdcc 	bl	8004350 <HAL_GetTick>
 80107b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	f003 0308 	and.w	r3, r3, #8
 80107c4:	2b08      	cmp	r3, #8
 80107c6:	d12f      	bne.n	8010828 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80107c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80107cc:	9300      	str	r3, [sp, #0]
 80107ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107d0:	2200      	movs	r2, #0
 80107d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f000 f88e 	bl	80108f8 <UART_WaitOnFlagUntilTimeout>
 80107dc:	4603      	mov	r3, r0
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d022      	beq.n	8010828 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107ea:	e853 3f00 	ldrex	r3, [r3]
 80107ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80107f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80107f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	461a      	mov	r2, r3
 80107fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010800:	647b      	str	r3, [r7, #68]	@ 0x44
 8010802:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010804:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010808:	e841 2300 	strex	r3, r2, [r1]
 801080c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801080e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010810:	2b00      	cmp	r3, #0
 8010812:	d1e6      	bne.n	80107e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2220      	movs	r2, #32
 8010818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2200      	movs	r2, #0
 8010820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010824:	2303      	movs	r3, #3
 8010826:	e063      	b.n	80108f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	f003 0304 	and.w	r3, r3, #4
 8010832:	2b04      	cmp	r3, #4
 8010834:	d149      	bne.n	80108ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010836:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801083a:	9300      	str	r3, [sp, #0]
 801083c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801083e:	2200      	movs	r2, #0
 8010840:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010844:	6878      	ldr	r0, [r7, #4]
 8010846:	f000 f857 	bl	80108f8 <UART_WaitOnFlagUntilTimeout>
 801084a:	4603      	mov	r3, r0
 801084c:	2b00      	cmp	r3, #0
 801084e:	d03c      	beq.n	80108ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010858:	e853 3f00 	ldrex	r3, [r3]
 801085c:	623b      	str	r3, [r7, #32]
   return(result);
 801085e:	6a3b      	ldr	r3, [r7, #32]
 8010860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	461a      	mov	r2, r3
 801086c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801086e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010870:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010872:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010876:	e841 2300 	strex	r3, r2, [r1]
 801087a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801087c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801087e:	2b00      	cmp	r3, #0
 8010880:	d1e6      	bne.n	8010850 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	3308      	adds	r3, #8
 8010888:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	e853 3f00 	ldrex	r3, [r3]
 8010890:	60fb      	str	r3, [r7, #12]
   return(result);
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	f023 0301 	bic.w	r3, r3, #1
 8010898:	64bb      	str	r3, [r7, #72]	@ 0x48
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	3308      	adds	r3, #8
 80108a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80108a2:	61fa      	str	r2, [r7, #28]
 80108a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108a6:	69b9      	ldr	r1, [r7, #24]
 80108a8:	69fa      	ldr	r2, [r7, #28]
 80108aa:	e841 2300 	strex	r3, r2, [r1]
 80108ae:	617b      	str	r3, [r7, #20]
   return(result);
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d1e5      	bne.n	8010882 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2220      	movs	r2, #32
 80108ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2200      	movs	r2, #0
 80108c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80108c6:	2303      	movs	r3, #3
 80108c8:	e012      	b.n	80108f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2220      	movs	r2, #32
 80108ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2220      	movs	r2, #32
 80108d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2200      	movs	r2, #0
 80108de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2200      	movs	r2, #0
 80108e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2200      	movs	r2, #0
 80108ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80108ee:	2300      	movs	r3, #0
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3758      	adds	r7, #88	@ 0x58
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	60f8      	str	r0, [r7, #12]
 8010900:	60b9      	str	r1, [r7, #8]
 8010902:	603b      	str	r3, [r7, #0]
 8010904:	4613      	mov	r3, r2
 8010906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010908:	e049      	b.n	801099e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801090a:	69bb      	ldr	r3, [r7, #24]
 801090c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010910:	d045      	beq.n	801099e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010912:	f7f3 fd1d 	bl	8004350 <HAL_GetTick>
 8010916:	4602      	mov	r2, r0
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	1ad3      	subs	r3, r2, r3
 801091c:	69ba      	ldr	r2, [r7, #24]
 801091e:	429a      	cmp	r2, r3
 8010920:	d302      	bcc.n	8010928 <UART_WaitOnFlagUntilTimeout+0x30>
 8010922:	69bb      	ldr	r3, [r7, #24]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d101      	bne.n	801092c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010928:	2303      	movs	r3, #3
 801092a:	e048      	b.n	80109be <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	f003 0304 	and.w	r3, r3, #4
 8010936:	2b00      	cmp	r3, #0
 8010938:	d031      	beq.n	801099e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	69db      	ldr	r3, [r3, #28]
 8010940:	f003 0308 	and.w	r3, r3, #8
 8010944:	2b08      	cmp	r3, #8
 8010946:	d110      	bne.n	801096a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	2208      	movs	r2, #8
 801094e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8010950:	68f8      	ldr	r0, [r7, #12]
 8010952:	f000 f839 	bl	80109c8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	2208      	movs	r2, #8
 801095a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2200      	movs	r2, #0
 8010962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 8010966:	2301      	movs	r3, #1
 8010968:	e029      	b.n	80109be <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	69db      	ldr	r3, [r3, #28]
 8010970:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010974:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010978:	d111      	bne.n	801099e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010982:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010984:	68f8      	ldr	r0, [r7, #12]
 8010986:	f000 f81f 	bl	80109c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	2220      	movs	r2, #32
 801098e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	2200      	movs	r2, #0
 8010996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801099a:	2303      	movs	r3, #3
 801099c:	e00f      	b.n	80109be <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	69da      	ldr	r2, [r3, #28]
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	4013      	ands	r3, r2
 80109a8:	68ba      	ldr	r2, [r7, #8]
 80109aa:	429a      	cmp	r2, r3
 80109ac:	bf0c      	ite	eq
 80109ae:	2301      	moveq	r3, #1
 80109b0:	2300      	movne	r3, #0
 80109b2:	b2db      	uxtb	r3, r3
 80109b4:	461a      	mov	r2, r3
 80109b6:	79fb      	ldrb	r3, [r7, #7]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d0a6      	beq.n	801090a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80109bc:	2300      	movs	r3, #0
}
 80109be:	4618      	mov	r0, r3
 80109c0:	3710      	adds	r7, #16
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
	...

080109c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80109c8:	b480      	push	{r7}
 80109ca:	b095      	sub	sp, #84	@ 0x54
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109d8:	e853 3f00 	ldrex	r3, [r3]
 80109dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80109de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80109e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	461a      	mov	r2, r3
 80109ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80109f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80109f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80109f6:	e841 2300 	strex	r3, r2, [r1]
 80109fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80109fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d1e6      	bne.n	80109d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	3308      	adds	r3, #8
 8010a08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a0a:	6a3b      	ldr	r3, [r7, #32]
 8010a0c:	e853 3f00 	ldrex	r3, [r3]
 8010a10:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a12:	69fa      	ldr	r2, [r7, #28]
 8010a14:	4b1e      	ldr	r3, [pc, #120]	@ (8010a90 <UART_EndRxTransfer+0xc8>)
 8010a16:	4013      	ands	r3, r2
 8010a18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	3308      	adds	r3, #8
 8010a20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a2a:	e841 2300 	strex	r3, r2, [r1]
 8010a2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d1e5      	bne.n	8010a02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a3a:	2b01      	cmp	r3, #1
 8010a3c:	d118      	bne.n	8010a70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	e853 3f00 	ldrex	r3, [r3]
 8010a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	f023 0310 	bic.w	r3, r3, #16
 8010a52:	647b      	str	r3, [r7, #68]	@ 0x44
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	461a      	mov	r2, r3
 8010a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a5c:	61bb      	str	r3, [r7, #24]
 8010a5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a60:	6979      	ldr	r1, [r7, #20]
 8010a62:	69ba      	ldr	r2, [r7, #24]
 8010a64:	e841 2300 	strex	r3, r2, [r1]
 8010a68:	613b      	str	r3, [r7, #16]
   return(result);
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d1e6      	bne.n	8010a3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2220      	movs	r2, #32
 8010a74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2200      	movs	r2, #0
 8010a82:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010a84:	bf00      	nop
 8010a86:	3754      	adds	r7, #84	@ 0x54
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8e:	4770      	bx	lr
 8010a90:	effffffe 	.word	0xeffffffe

08010a94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010a94:	b480      	push	{r7}
 8010a96:	b085      	sub	sp, #20
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d101      	bne.n	8010aaa <HAL_UARTEx_DisableFifoMode+0x16>
 8010aa6:	2302      	movs	r3, #2
 8010aa8:	e027      	b.n	8010afa <HAL_UARTEx_DisableFifoMode+0x66>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2201      	movs	r2, #1
 8010aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2224      	movs	r2, #36	@ 0x24
 8010ab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	681a      	ldr	r2, [r3, #0]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f022 0201 	bic.w	r2, r2, #1
 8010ad0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010ad8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2200      	movs	r2, #0
 8010ade:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	68fa      	ldr	r2, [r7, #12]
 8010ae6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2220      	movs	r2, #32
 8010aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2200      	movs	r2, #0
 8010af4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010af8:	2300      	movs	r3, #0
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3714      	adds	r7, #20
 8010afe:	46bd      	mov	sp, r7
 8010b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b04:	4770      	bx	lr

08010b06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b06:	b580      	push	{r7, lr}
 8010b08:	b084      	sub	sp, #16
 8010b0a:	af00      	add	r7, sp, #0
 8010b0c:	6078      	str	r0, [r7, #4]
 8010b0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010b16:	2b01      	cmp	r3, #1
 8010b18:	d101      	bne.n	8010b1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010b1a:	2302      	movs	r3, #2
 8010b1c:	e02d      	b.n	8010b7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2201      	movs	r2, #1
 8010b22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2224      	movs	r2, #36	@ 0x24
 8010b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	681a      	ldr	r2, [r3, #0]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	f022 0201 	bic.w	r2, r2, #1
 8010b44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	689b      	ldr	r3, [r3, #8]
 8010b4c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	683a      	ldr	r2, [r7, #0]
 8010b56:	430a      	orrs	r2, r1
 8010b58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f000 f850 	bl	8010c00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2220      	movs	r2, #32
 8010b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2200      	movs	r2, #0
 8010b74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b78:	2300      	movs	r3, #0
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3710      	adds	r7, #16
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}

08010b82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b82:	b580      	push	{r7, lr}
 8010b84:	b084      	sub	sp, #16
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	6078      	str	r0, [r7, #4]
 8010b8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010b92:	2b01      	cmp	r3, #1
 8010b94:	d101      	bne.n	8010b9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010b96:	2302      	movs	r3, #2
 8010b98:	e02d      	b.n	8010bf6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2201      	movs	r2, #1
 8010b9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2224      	movs	r2, #36	@ 0x24
 8010ba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	681a      	ldr	r2, [r3, #0]
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f022 0201 	bic.w	r2, r2, #1
 8010bc0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	689b      	ldr	r3, [r3, #8]
 8010bc8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	683a      	ldr	r2, [r7, #0]
 8010bd2:	430a      	orrs	r2, r1
 8010bd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f000 f812 	bl	8010c00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	68fa      	ldr	r2, [r7, #12]
 8010be2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2220      	movs	r2, #32
 8010be8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2200      	movs	r2, #0
 8010bf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010bf4:	2300      	movs	r3, #0
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3710      	adds	r7, #16
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}
	...

08010c00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b085      	sub	sp, #20
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d108      	bne.n	8010c22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2201      	movs	r2, #1
 8010c14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010c20:	e031      	b.n	8010c86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010c22:	2310      	movs	r3, #16
 8010c24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010c26:	2310      	movs	r3, #16
 8010c28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	689b      	ldr	r3, [r3, #8]
 8010c30:	0e5b      	lsrs	r3, r3, #25
 8010c32:	b2db      	uxtb	r3, r3
 8010c34:	f003 0307 	and.w	r3, r3, #7
 8010c38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	689b      	ldr	r3, [r3, #8]
 8010c40:	0f5b      	lsrs	r3, r3, #29
 8010c42:	b2db      	uxtb	r3, r3
 8010c44:	f003 0307 	and.w	r3, r3, #7
 8010c48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010c4a:	7bbb      	ldrb	r3, [r7, #14]
 8010c4c:	7b3a      	ldrb	r2, [r7, #12]
 8010c4e:	4911      	ldr	r1, [pc, #68]	@ (8010c94 <UARTEx_SetNbDataToProcess+0x94>)
 8010c50:	5c8a      	ldrb	r2, [r1, r2]
 8010c52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010c56:	7b3a      	ldrb	r2, [r7, #12]
 8010c58:	490f      	ldr	r1, [pc, #60]	@ (8010c98 <UARTEx_SetNbDataToProcess+0x98>)
 8010c5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010c5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c60:	b29a      	uxth	r2, r3
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010c68:	7bfb      	ldrb	r3, [r7, #15]
 8010c6a:	7b7a      	ldrb	r2, [r7, #13]
 8010c6c:	4909      	ldr	r1, [pc, #36]	@ (8010c94 <UARTEx_SetNbDataToProcess+0x94>)
 8010c6e:	5c8a      	ldrb	r2, [r1, r2]
 8010c70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010c74:	7b7a      	ldrb	r2, [r7, #13]
 8010c76:	4908      	ldr	r1, [pc, #32]	@ (8010c98 <UARTEx_SetNbDataToProcess+0x98>)
 8010c78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010c7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c7e:	b29a      	uxth	r2, r3
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010c86:	bf00      	nop
 8010c88:	3714      	adds	r7, #20
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c90:	4770      	bx	lr
 8010c92:	bf00      	nop
 8010c94:	08014348 	.word	0x08014348
 8010c98:	08014350 	.word	0x08014350

08010c9c <atoi>:
 8010c9c:	220a      	movs	r2, #10
 8010c9e:	2100      	movs	r1, #0
 8010ca0:	f000 b894 	b.w	8010dcc <strtol>

08010ca4 <__itoa>:
 8010ca4:	1e93      	subs	r3, r2, #2
 8010ca6:	2b22      	cmp	r3, #34	@ 0x22
 8010ca8:	b510      	push	{r4, lr}
 8010caa:	460c      	mov	r4, r1
 8010cac:	d904      	bls.n	8010cb8 <__itoa+0x14>
 8010cae:	2300      	movs	r3, #0
 8010cb0:	700b      	strb	r3, [r1, #0]
 8010cb2:	461c      	mov	r4, r3
 8010cb4:	4620      	mov	r0, r4
 8010cb6:	bd10      	pop	{r4, pc}
 8010cb8:	2a0a      	cmp	r2, #10
 8010cba:	d109      	bne.n	8010cd0 <__itoa+0x2c>
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	da07      	bge.n	8010cd0 <__itoa+0x2c>
 8010cc0:	232d      	movs	r3, #45	@ 0x2d
 8010cc2:	700b      	strb	r3, [r1, #0]
 8010cc4:	4240      	negs	r0, r0
 8010cc6:	2101      	movs	r1, #1
 8010cc8:	4421      	add	r1, r4
 8010cca:	f000 f889 	bl	8010de0 <__utoa>
 8010cce:	e7f1      	b.n	8010cb4 <__itoa+0x10>
 8010cd0:	2100      	movs	r1, #0
 8010cd2:	e7f9      	b.n	8010cc8 <__itoa+0x24>

08010cd4 <itoa>:
 8010cd4:	f7ff bfe6 	b.w	8010ca4 <__itoa>

08010cd8 <_strtol_l.constprop.0>:
 8010cd8:	2b24      	cmp	r3, #36	@ 0x24
 8010cda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cde:	4686      	mov	lr, r0
 8010ce0:	4690      	mov	r8, r2
 8010ce2:	d801      	bhi.n	8010ce8 <_strtol_l.constprop.0+0x10>
 8010ce4:	2b01      	cmp	r3, #1
 8010ce6:	d106      	bne.n	8010cf6 <_strtol_l.constprop.0+0x1e>
 8010ce8:	f000 fe78 	bl	80119dc <__errno>
 8010cec:	2316      	movs	r3, #22
 8010cee:	6003      	str	r3, [r0, #0]
 8010cf0:	2000      	movs	r0, #0
 8010cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cf6:	4834      	ldr	r0, [pc, #208]	@ (8010dc8 <_strtol_l.constprop.0+0xf0>)
 8010cf8:	460d      	mov	r5, r1
 8010cfa:	462a      	mov	r2, r5
 8010cfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d00:	5d06      	ldrb	r6, [r0, r4]
 8010d02:	f016 0608 	ands.w	r6, r6, #8
 8010d06:	d1f8      	bne.n	8010cfa <_strtol_l.constprop.0+0x22>
 8010d08:	2c2d      	cmp	r4, #45	@ 0x2d
 8010d0a:	d12d      	bne.n	8010d68 <_strtol_l.constprop.0+0x90>
 8010d0c:	782c      	ldrb	r4, [r5, #0]
 8010d0e:	2601      	movs	r6, #1
 8010d10:	1c95      	adds	r5, r2, #2
 8010d12:	f033 0210 	bics.w	r2, r3, #16
 8010d16:	d109      	bne.n	8010d2c <_strtol_l.constprop.0+0x54>
 8010d18:	2c30      	cmp	r4, #48	@ 0x30
 8010d1a:	d12a      	bne.n	8010d72 <_strtol_l.constprop.0+0x9a>
 8010d1c:	782a      	ldrb	r2, [r5, #0]
 8010d1e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010d22:	2a58      	cmp	r2, #88	@ 0x58
 8010d24:	d125      	bne.n	8010d72 <_strtol_l.constprop.0+0x9a>
 8010d26:	786c      	ldrb	r4, [r5, #1]
 8010d28:	2310      	movs	r3, #16
 8010d2a:	3502      	adds	r5, #2
 8010d2c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010d30:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8010d34:	2200      	movs	r2, #0
 8010d36:	fbbc f9f3 	udiv	r9, ip, r3
 8010d3a:	4610      	mov	r0, r2
 8010d3c:	fb03 ca19 	mls	sl, r3, r9, ip
 8010d40:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010d44:	2f09      	cmp	r7, #9
 8010d46:	d81b      	bhi.n	8010d80 <_strtol_l.constprop.0+0xa8>
 8010d48:	463c      	mov	r4, r7
 8010d4a:	42a3      	cmp	r3, r4
 8010d4c:	dd27      	ble.n	8010d9e <_strtol_l.constprop.0+0xc6>
 8010d4e:	1c57      	adds	r7, r2, #1
 8010d50:	d007      	beq.n	8010d62 <_strtol_l.constprop.0+0x8a>
 8010d52:	4581      	cmp	r9, r0
 8010d54:	d320      	bcc.n	8010d98 <_strtol_l.constprop.0+0xc0>
 8010d56:	d101      	bne.n	8010d5c <_strtol_l.constprop.0+0x84>
 8010d58:	45a2      	cmp	sl, r4
 8010d5a:	db1d      	blt.n	8010d98 <_strtol_l.constprop.0+0xc0>
 8010d5c:	fb00 4003 	mla	r0, r0, r3, r4
 8010d60:	2201      	movs	r2, #1
 8010d62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d66:	e7eb      	b.n	8010d40 <_strtol_l.constprop.0+0x68>
 8010d68:	2c2b      	cmp	r4, #43	@ 0x2b
 8010d6a:	bf04      	itt	eq
 8010d6c:	782c      	ldrbeq	r4, [r5, #0]
 8010d6e:	1c95      	addeq	r5, r2, #2
 8010d70:	e7cf      	b.n	8010d12 <_strtol_l.constprop.0+0x3a>
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d1da      	bne.n	8010d2c <_strtol_l.constprop.0+0x54>
 8010d76:	2c30      	cmp	r4, #48	@ 0x30
 8010d78:	bf0c      	ite	eq
 8010d7a:	2308      	moveq	r3, #8
 8010d7c:	230a      	movne	r3, #10
 8010d7e:	e7d5      	b.n	8010d2c <_strtol_l.constprop.0+0x54>
 8010d80:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010d84:	2f19      	cmp	r7, #25
 8010d86:	d801      	bhi.n	8010d8c <_strtol_l.constprop.0+0xb4>
 8010d88:	3c37      	subs	r4, #55	@ 0x37
 8010d8a:	e7de      	b.n	8010d4a <_strtol_l.constprop.0+0x72>
 8010d8c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010d90:	2f19      	cmp	r7, #25
 8010d92:	d804      	bhi.n	8010d9e <_strtol_l.constprop.0+0xc6>
 8010d94:	3c57      	subs	r4, #87	@ 0x57
 8010d96:	e7d8      	b.n	8010d4a <_strtol_l.constprop.0+0x72>
 8010d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010d9c:	e7e1      	b.n	8010d62 <_strtol_l.constprop.0+0x8a>
 8010d9e:	1c53      	adds	r3, r2, #1
 8010da0:	d108      	bne.n	8010db4 <_strtol_l.constprop.0+0xdc>
 8010da2:	2322      	movs	r3, #34	@ 0x22
 8010da4:	f8ce 3000 	str.w	r3, [lr]
 8010da8:	4660      	mov	r0, ip
 8010daa:	f1b8 0f00 	cmp.w	r8, #0
 8010dae:	d0a0      	beq.n	8010cf2 <_strtol_l.constprop.0+0x1a>
 8010db0:	1e69      	subs	r1, r5, #1
 8010db2:	e006      	b.n	8010dc2 <_strtol_l.constprop.0+0xea>
 8010db4:	b106      	cbz	r6, 8010db8 <_strtol_l.constprop.0+0xe0>
 8010db6:	4240      	negs	r0, r0
 8010db8:	f1b8 0f00 	cmp.w	r8, #0
 8010dbc:	d099      	beq.n	8010cf2 <_strtol_l.constprop.0+0x1a>
 8010dbe:	2a00      	cmp	r2, #0
 8010dc0:	d1f6      	bne.n	8010db0 <_strtol_l.constprop.0+0xd8>
 8010dc2:	f8c8 1000 	str.w	r1, [r8]
 8010dc6:	e794      	b.n	8010cf2 <_strtol_l.constprop.0+0x1a>
 8010dc8:	0801437e 	.word	0x0801437e

08010dcc <strtol>:
 8010dcc:	4613      	mov	r3, r2
 8010dce:	460a      	mov	r2, r1
 8010dd0:	4601      	mov	r1, r0
 8010dd2:	4802      	ldr	r0, [pc, #8]	@ (8010ddc <strtol+0x10>)
 8010dd4:	6800      	ldr	r0, [r0, #0]
 8010dd6:	f7ff bf7f 	b.w	8010cd8 <_strtol_l.constprop.0>
 8010dda:	bf00      	nop
 8010ddc:	24000054 	.word	0x24000054

08010de0 <__utoa>:
 8010de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010de2:	4c1f      	ldr	r4, [pc, #124]	@ (8010e60 <__utoa+0x80>)
 8010de4:	b08b      	sub	sp, #44	@ 0x2c
 8010de6:	4605      	mov	r5, r0
 8010de8:	460b      	mov	r3, r1
 8010dea:	466e      	mov	r6, sp
 8010dec:	f104 0c20 	add.w	ip, r4, #32
 8010df0:	6820      	ldr	r0, [r4, #0]
 8010df2:	6861      	ldr	r1, [r4, #4]
 8010df4:	4637      	mov	r7, r6
 8010df6:	c703      	stmia	r7!, {r0, r1}
 8010df8:	3408      	adds	r4, #8
 8010dfa:	4564      	cmp	r4, ip
 8010dfc:	463e      	mov	r6, r7
 8010dfe:	d1f7      	bne.n	8010df0 <__utoa+0x10>
 8010e00:	7921      	ldrb	r1, [r4, #4]
 8010e02:	7139      	strb	r1, [r7, #4]
 8010e04:	1e91      	subs	r1, r2, #2
 8010e06:	6820      	ldr	r0, [r4, #0]
 8010e08:	6038      	str	r0, [r7, #0]
 8010e0a:	2922      	cmp	r1, #34	@ 0x22
 8010e0c:	f04f 0100 	mov.w	r1, #0
 8010e10:	d904      	bls.n	8010e1c <__utoa+0x3c>
 8010e12:	7019      	strb	r1, [r3, #0]
 8010e14:	460b      	mov	r3, r1
 8010e16:	4618      	mov	r0, r3
 8010e18:	b00b      	add	sp, #44	@ 0x2c
 8010e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e1c:	1e58      	subs	r0, r3, #1
 8010e1e:	4684      	mov	ip, r0
 8010e20:	fbb5 f7f2 	udiv	r7, r5, r2
 8010e24:	fb02 5617 	mls	r6, r2, r7, r5
 8010e28:	3628      	adds	r6, #40	@ 0x28
 8010e2a:	446e      	add	r6, sp
 8010e2c:	460c      	mov	r4, r1
 8010e2e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8010e32:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8010e36:	462e      	mov	r6, r5
 8010e38:	42b2      	cmp	r2, r6
 8010e3a:	f101 0101 	add.w	r1, r1, #1
 8010e3e:	463d      	mov	r5, r7
 8010e40:	d9ee      	bls.n	8010e20 <__utoa+0x40>
 8010e42:	2200      	movs	r2, #0
 8010e44:	545a      	strb	r2, [r3, r1]
 8010e46:	1919      	adds	r1, r3, r4
 8010e48:	1aa5      	subs	r5, r4, r2
 8010e4a:	42aa      	cmp	r2, r5
 8010e4c:	dae3      	bge.n	8010e16 <__utoa+0x36>
 8010e4e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8010e52:	780e      	ldrb	r6, [r1, #0]
 8010e54:	7006      	strb	r6, [r0, #0]
 8010e56:	3201      	adds	r2, #1
 8010e58:	f801 5901 	strb.w	r5, [r1], #-1
 8010e5c:	e7f4      	b.n	8010e48 <__utoa+0x68>
 8010e5e:	bf00      	nop
 8010e60:	08014358 	.word	0x08014358

08010e64 <__cvt>:
 8010e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e66:	ed2d 8b02 	vpush	{d8}
 8010e6a:	eeb0 8b40 	vmov.f64	d8, d0
 8010e6e:	b085      	sub	sp, #20
 8010e70:	4617      	mov	r7, r2
 8010e72:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8010e74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010e76:	ee18 2a90 	vmov	r2, s17
 8010e7a:	f025 0520 	bic.w	r5, r5, #32
 8010e7e:	2a00      	cmp	r2, #0
 8010e80:	bfb6      	itet	lt
 8010e82:	222d      	movlt	r2, #45	@ 0x2d
 8010e84:	2200      	movge	r2, #0
 8010e86:	eeb1 8b40 	vneglt.f64	d8, d0
 8010e8a:	2d46      	cmp	r5, #70	@ 0x46
 8010e8c:	460c      	mov	r4, r1
 8010e8e:	701a      	strb	r2, [r3, #0]
 8010e90:	d004      	beq.n	8010e9c <__cvt+0x38>
 8010e92:	2d45      	cmp	r5, #69	@ 0x45
 8010e94:	d100      	bne.n	8010e98 <__cvt+0x34>
 8010e96:	3401      	adds	r4, #1
 8010e98:	2102      	movs	r1, #2
 8010e9a:	e000      	b.n	8010e9e <__cvt+0x3a>
 8010e9c:	2103      	movs	r1, #3
 8010e9e:	ab03      	add	r3, sp, #12
 8010ea0:	9301      	str	r3, [sp, #4]
 8010ea2:	ab02      	add	r3, sp, #8
 8010ea4:	9300      	str	r3, [sp, #0]
 8010ea6:	4622      	mov	r2, r4
 8010ea8:	4633      	mov	r3, r6
 8010eaa:	eeb0 0b48 	vmov.f64	d0, d8
 8010eae:	f000 fe53 	bl	8011b58 <_dtoa_r>
 8010eb2:	2d47      	cmp	r5, #71	@ 0x47
 8010eb4:	d114      	bne.n	8010ee0 <__cvt+0x7c>
 8010eb6:	07fb      	lsls	r3, r7, #31
 8010eb8:	d50a      	bpl.n	8010ed0 <__cvt+0x6c>
 8010eba:	1902      	adds	r2, r0, r4
 8010ebc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec4:	bf08      	it	eq
 8010ec6:	9203      	streq	r2, [sp, #12]
 8010ec8:	2130      	movs	r1, #48	@ 0x30
 8010eca:	9b03      	ldr	r3, [sp, #12]
 8010ecc:	4293      	cmp	r3, r2
 8010ece:	d319      	bcc.n	8010f04 <__cvt+0xa0>
 8010ed0:	9b03      	ldr	r3, [sp, #12]
 8010ed2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ed4:	1a1b      	subs	r3, r3, r0
 8010ed6:	6013      	str	r3, [r2, #0]
 8010ed8:	b005      	add	sp, #20
 8010eda:	ecbd 8b02 	vpop	{d8}
 8010ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ee0:	2d46      	cmp	r5, #70	@ 0x46
 8010ee2:	eb00 0204 	add.w	r2, r0, r4
 8010ee6:	d1e9      	bne.n	8010ebc <__cvt+0x58>
 8010ee8:	7803      	ldrb	r3, [r0, #0]
 8010eea:	2b30      	cmp	r3, #48	@ 0x30
 8010eec:	d107      	bne.n	8010efe <__cvt+0x9a>
 8010eee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef6:	bf1c      	itt	ne
 8010ef8:	f1c4 0401 	rsbne	r4, r4, #1
 8010efc:	6034      	strne	r4, [r6, #0]
 8010efe:	6833      	ldr	r3, [r6, #0]
 8010f00:	441a      	add	r2, r3
 8010f02:	e7db      	b.n	8010ebc <__cvt+0x58>
 8010f04:	1c5c      	adds	r4, r3, #1
 8010f06:	9403      	str	r4, [sp, #12]
 8010f08:	7019      	strb	r1, [r3, #0]
 8010f0a:	e7de      	b.n	8010eca <__cvt+0x66>

08010f0c <__exponent>:
 8010f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f0e:	2900      	cmp	r1, #0
 8010f10:	bfba      	itte	lt
 8010f12:	4249      	neglt	r1, r1
 8010f14:	232d      	movlt	r3, #45	@ 0x2d
 8010f16:	232b      	movge	r3, #43	@ 0x2b
 8010f18:	2909      	cmp	r1, #9
 8010f1a:	7002      	strb	r2, [r0, #0]
 8010f1c:	7043      	strb	r3, [r0, #1]
 8010f1e:	dd29      	ble.n	8010f74 <__exponent+0x68>
 8010f20:	f10d 0307 	add.w	r3, sp, #7
 8010f24:	461d      	mov	r5, r3
 8010f26:	270a      	movs	r7, #10
 8010f28:	461a      	mov	r2, r3
 8010f2a:	fbb1 f6f7 	udiv	r6, r1, r7
 8010f2e:	fb07 1416 	mls	r4, r7, r6, r1
 8010f32:	3430      	adds	r4, #48	@ 0x30
 8010f34:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010f38:	460c      	mov	r4, r1
 8010f3a:	2c63      	cmp	r4, #99	@ 0x63
 8010f3c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010f40:	4631      	mov	r1, r6
 8010f42:	dcf1      	bgt.n	8010f28 <__exponent+0x1c>
 8010f44:	3130      	adds	r1, #48	@ 0x30
 8010f46:	1e94      	subs	r4, r2, #2
 8010f48:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010f4c:	1c41      	adds	r1, r0, #1
 8010f4e:	4623      	mov	r3, r4
 8010f50:	42ab      	cmp	r3, r5
 8010f52:	d30a      	bcc.n	8010f6a <__exponent+0x5e>
 8010f54:	f10d 0309 	add.w	r3, sp, #9
 8010f58:	1a9b      	subs	r3, r3, r2
 8010f5a:	42ac      	cmp	r4, r5
 8010f5c:	bf88      	it	hi
 8010f5e:	2300      	movhi	r3, #0
 8010f60:	3302      	adds	r3, #2
 8010f62:	4403      	add	r3, r0
 8010f64:	1a18      	subs	r0, r3, r0
 8010f66:	b003      	add	sp, #12
 8010f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f6a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010f6e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010f72:	e7ed      	b.n	8010f50 <__exponent+0x44>
 8010f74:	2330      	movs	r3, #48	@ 0x30
 8010f76:	3130      	adds	r1, #48	@ 0x30
 8010f78:	7083      	strb	r3, [r0, #2]
 8010f7a:	70c1      	strb	r1, [r0, #3]
 8010f7c:	1d03      	adds	r3, r0, #4
 8010f7e:	e7f1      	b.n	8010f64 <__exponent+0x58>

08010f80 <_printf_float>:
 8010f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f84:	b08d      	sub	sp, #52	@ 0x34
 8010f86:	460c      	mov	r4, r1
 8010f88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010f8c:	4616      	mov	r6, r2
 8010f8e:	461f      	mov	r7, r3
 8010f90:	4605      	mov	r5, r0
 8010f92:	f000 fcd9 	bl	8011948 <_localeconv_r>
 8010f96:	f8d0 b000 	ldr.w	fp, [r0]
 8010f9a:	4658      	mov	r0, fp
 8010f9c:	f7ef fa08 	bl	80003b0 <strlen>
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	930a      	str	r3, [sp, #40]	@ 0x28
 8010fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8010fa8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010fac:	6822      	ldr	r2, [r4, #0]
 8010fae:	9005      	str	r0, [sp, #20]
 8010fb0:	3307      	adds	r3, #7
 8010fb2:	f023 0307 	bic.w	r3, r3, #7
 8010fb6:	f103 0108 	add.w	r1, r3, #8
 8010fba:	f8c8 1000 	str.w	r1, [r8]
 8010fbe:	ed93 0b00 	vldr	d0, [r3]
 8010fc2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8011220 <_printf_float+0x2a0>
 8010fc6:	eeb0 7bc0 	vabs.f64	d7, d0
 8010fca:	eeb4 7b46 	vcmp.f64	d7, d6
 8010fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fd2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8010fd6:	dd24      	ble.n	8011022 <_printf_float+0xa2>
 8010fd8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe0:	d502      	bpl.n	8010fe8 <_printf_float+0x68>
 8010fe2:	232d      	movs	r3, #45	@ 0x2d
 8010fe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010fe8:	498f      	ldr	r1, [pc, #572]	@ (8011228 <_printf_float+0x2a8>)
 8010fea:	4b90      	ldr	r3, [pc, #576]	@ (801122c <_printf_float+0x2ac>)
 8010fec:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8010ff0:	bf94      	ite	ls
 8010ff2:	4688      	movls	r8, r1
 8010ff4:	4698      	movhi	r8, r3
 8010ff6:	f022 0204 	bic.w	r2, r2, #4
 8010ffa:	2303      	movs	r3, #3
 8010ffc:	6123      	str	r3, [r4, #16]
 8010ffe:	6022      	str	r2, [r4, #0]
 8011000:	f04f 0a00 	mov.w	sl, #0
 8011004:	9700      	str	r7, [sp, #0]
 8011006:	4633      	mov	r3, r6
 8011008:	aa0b      	add	r2, sp, #44	@ 0x2c
 801100a:	4621      	mov	r1, r4
 801100c:	4628      	mov	r0, r5
 801100e:	f000 f9d1 	bl	80113b4 <_printf_common>
 8011012:	3001      	adds	r0, #1
 8011014:	f040 8089 	bne.w	801112a <_printf_float+0x1aa>
 8011018:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801101c:	b00d      	add	sp, #52	@ 0x34
 801101e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011022:	eeb4 0b40 	vcmp.f64	d0, d0
 8011026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801102a:	d709      	bvc.n	8011040 <_printf_float+0xc0>
 801102c:	ee10 3a90 	vmov	r3, s1
 8011030:	2b00      	cmp	r3, #0
 8011032:	bfbc      	itt	lt
 8011034:	232d      	movlt	r3, #45	@ 0x2d
 8011036:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801103a:	497d      	ldr	r1, [pc, #500]	@ (8011230 <_printf_float+0x2b0>)
 801103c:	4b7d      	ldr	r3, [pc, #500]	@ (8011234 <_printf_float+0x2b4>)
 801103e:	e7d5      	b.n	8010fec <_printf_float+0x6c>
 8011040:	6863      	ldr	r3, [r4, #4]
 8011042:	1c59      	adds	r1, r3, #1
 8011044:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011048:	d139      	bne.n	80110be <_printf_float+0x13e>
 801104a:	2306      	movs	r3, #6
 801104c:	6063      	str	r3, [r4, #4]
 801104e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011052:	2300      	movs	r3, #0
 8011054:	6022      	str	r2, [r4, #0]
 8011056:	9303      	str	r3, [sp, #12]
 8011058:	ab0a      	add	r3, sp, #40	@ 0x28
 801105a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801105e:	ab09      	add	r3, sp, #36	@ 0x24
 8011060:	9300      	str	r3, [sp, #0]
 8011062:	6861      	ldr	r1, [r4, #4]
 8011064:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011068:	4628      	mov	r0, r5
 801106a:	f7ff fefb 	bl	8010e64 <__cvt>
 801106e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011072:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011074:	4680      	mov	r8, r0
 8011076:	d129      	bne.n	80110cc <_printf_float+0x14c>
 8011078:	1cc8      	adds	r0, r1, #3
 801107a:	db02      	blt.n	8011082 <_printf_float+0x102>
 801107c:	6863      	ldr	r3, [r4, #4]
 801107e:	4299      	cmp	r1, r3
 8011080:	dd41      	ble.n	8011106 <_printf_float+0x186>
 8011082:	f1a9 0902 	sub.w	r9, r9, #2
 8011086:	fa5f f989 	uxtb.w	r9, r9
 801108a:	3901      	subs	r1, #1
 801108c:	464a      	mov	r2, r9
 801108e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011092:	9109      	str	r1, [sp, #36]	@ 0x24
 8011094:	f7ff ff3a 	bl	8010f0c <__exponent>
 8011098:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801109a:	1813      	adds	r3, r2, r0
 801109c:	2a01      	cmp	r2, #1
 801109e:	4682      	mov	sl, r0
 80110a0:	6123      	str	r3, [r4, #16]
 80110a2:	dc02      	bgt.n	80110aa <_printf_float+0x12a>
 80110a4:	6822      	ldr	r2, [r4, #0]
 80110a6:	07d2      	lsls	r2, r2, #31
 80110a8:	d501      	bpl.n	80110ae <_printf_float+0x12e>
 80110aa:	3301      	adds	r3, #1
 80110ac:	6123      	str	r3, [r4, #16]
 80110ae:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d0a6      	beq.n	8011004 <_printf_float+0x84>
 80110b6:	232d      	movs	r3, #45	@ 0x2d
 80110b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110bc:	e7a2      	b.n	8011004 <_printf_float+0x84>
 80110be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80110c2:	d1c4      	bne.n	801104e <_printf_float+0xce>
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d1c2      	bne.n	801104e <_printf_float+0xce>
 80110c8:	2301      	movs	r3, #1
 80110ca:	e7bf      	b.n	801104c <_printf_float+0xcc>
 80110cc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80110d0:	d9db      	bls.n	801108a <_printf_float+0x10a>
 80110d2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80110d6:	d118      	bne.n	801110a <_printf_float+0x18a>
 80110d8:	2900      	cmp	r1, #0
 80110da:	6863      	ldr	r3, [r4, #4]
 80110dc:	dd0b      	ble.n	80110f6 <_printf_float+0x176>
 80110de:	6121      	str	r1, [r4, #16]
 80110e0:	b913      	cbnz	r3, 80110e8 <_printf_float+0x168>
 80110e2:	6822      	ldr	r2, [r4, #0]
 80110e4:	07d0      	lsls	r0, r2, #31
 80110e6:	d502      	bpl.n	80110ee <_printf_float+0x16e>
 80110e8:	3301      	adds	r3, #1
 80110ea:	440b      	add	r3, r1
 80110ec:	6123      	str	r3, [r4, #16]
 80110ee:	65a1      	str	r1, [r4, #88]	@ 0x58
 80110f0:	f04f 0a00 	mov.w	sl, #0
 80110f4:	e7db      	b.n	80110ae <_printf_float+0x12e>
 80110f6:	b913      	cbnz	r3, 80110fe <_printf_float+0x17e>
 80110f8:	6822      	ldr	r2, [r4, #0]
 80110fa:	07d2      	lsls	r2, r2, #31
 80110fc:	d501      	bpl.n	8011102 <_printf_float+0x182>
 80110fe:	3302      	adds	r3, #2
 8011100:	e7f4      	b.n	80110ec <_printf_float+0x16c>
 8011102:	2301      	movs	r3, #1
 8011104:	e7f2      	b.n	80110ec <_printf_float+0x16c>
 8011106:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801110a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801110c:	4299      	cmp	r1, r3
 801110e:	db05      	blt.n	801111c <_printf_float+0x19c>
 8011110:	6823      	ldr	r3, [r4, #0]
 8011112:	6121      	str	r1, [r4, #16]
 8011114:	07d8      	lsls	r0, r3, #31
 8011116:	d5ea      	bpl.n	80110ee <_printf_float+0x16e>
 8011118:	1c4b      	adds	r3, r1, #1
 801111a:	e7e7      	b.n	80110ec <_printf_float+0x16c>
 801111c:	2900      	cmp	r1, #0
 801111e:	bfd4      	ite	le
 8011120:	f1c1 0202 	rsble	r2, r1, #2
 8011124:	2201      	movgt	r2, #1
 8011126:	4413      	add	r3, r2
 8011128:	e7e0      	b.n	80110ec <_printf_float+0x16c>
 801112a:	6823      	ldr	r3, [r4, #0]
 801112c:	055a      	lsls	r2, r3, #21
 801112e:	d407      	bmi.n	8011140 <_printf_float+0x1c0>
 8011130:	6923      	ldr	r3, [r4, #16]
 8011132:	4642      	mov	r2, r8
 8011134:	4631      	mov	r1, r6
 8011136:	4628      	mov	r0, r5
 8011138:	47b8      	blx	r7
 801113a:	3001      	adds	r0, #1
 801113c:	d12a      	bne.n	8011194 <_printf_float+0x214>
 801113e:	e76b      	b.n	8011018 <_printf_float+0x98>
 8011140:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011144:	f240 80e0 	bls.w	8011308 <_printf_float+0x388>
 8011148:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801114c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011154:	d133      	bne.n	80111be <_printf_float+0x23e>
 8011156:	4a38      	ldr	r2, [pc, #224]	@ (8011238 <_printf_float+0x2b8>)
 8011158:	2301      	movs	r3, #1
 801115a:	4631      	mov	r1, r6
 801115c:	4628      	mov	r0, r5
 801115e:	47b8      	blx	r7
 8011160:	3001      	adds	r0, #1
 8011162:	f43f af59 	beq.w	8011018 <_printf_float+0x98>
 8011166:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801116a:	4543      	cmp	r3, r8
 801116c:	db02      	blt.n	8011174 <_printf_float+0x1f4>
 801116e:	6823      	ldr	r3, [r4, #0]
 8011170:	07d8      	lsls	r0, r3, #31
 8011172:	d50f      	bpl.n	8011194 <_printf_float+0x214>
 8011174:	9b05      	ldr	r3, [sp, #20]
 8011176:	465a      	mov	r2, fp
 8011178:	4631      	mov	r1, r6
 801117a:	4628      	mov	r0, r5
 801117c:	47b8      	blx	r7
 801117e:	3001      	adds	r0, #1
 8011180:	f43f af4a 	beq.w	8011018 <_printf_float+0x98>
 8011184:	f04f 0900 	mov.w	r9, #0
 8011188:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801118c:	f104 0a1a 	add.w	sl, r4, #26
 8011190:	45c8      	cmp	r8, r9
 8011192:	dc09      	bgt.n	80111a8 <_printf_float+0x228>
 8011194:	6823      	ldr	r3, [r4, #0]
 8011196:	079b      	lsls	r3, r3, #30
 8011198:	f100 8107 	bmi.w	80113aa <_printf_float+0x42a>
 801119c:	68e0      	ldr	r0, [r4, #12]
 801119e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111a0:	4298      	cmp	r0, r3
 80111a2:	bfb8      	it	lt
 80111a4:	4618      	movlt	r0, r3
 80111a6:	e739      	b.n	801101c <_printf_float+0x9c>
 80111a8:	2301      	movs	r3, #1
 80111aa:	4652      	mov	r2, sl
 80111ac:	4631      	mov	r1, r6
 80111ae:	4628      	mov	r0, r5
 80111b0:	47b8      	blx	r7
 80111b2:	3001      	adds	r0, #1
 80111b4:	f43f af30 	beq.w	8011018 <_printf_float+0x98>
 80111b8:	f109 0901 	add.w	r9, r9, #1
 80111bc:	e7e8      	b.n	8011190 <_printf_float+0x210>
 80111be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	dc3b      	bgt.n	801123c <_printf_float+0x2bc>
 80111c4:	4a1c      	ldr	r2, [pc, #112]	@ (8011238 <_printf_float+0x2b8>)
 80111c6:	2301      	movs	r3, #1
 80111c8:	4631      	mov	r1, r6
 80111ca:	4628      	mov	r0, r5
 80111cc:	47b8      	blx	r7
 80111ce:	3001      	adds	r0, #1
 80111d0:	f43f af22 	beq.w	8011018 <_printf_float+0x98>
 80111d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80111d8:	ea59 0303 	orrs.w	r3, r9, r3
 80111dc:	d102      	bne.n	80111e4 <_printf_float+0x264>
 80111de:	6823      	ldr	r3, [r4, #0]
 80111e0:	07d9      	lsls	r1, r3, #31
 80111e2:	d5d7      	bpl.n	8011194 <_printf_float+0x214>
 80111e4:	9b05      	ldr	r3, [sp, #20]
 80111e6:	465a      	mov	r2, fp
 80111e8:	4631      	mov	r1, r6
 80111ea:	4628      	mov	r0, r5
 80111ec:	47b8      	blx	r7
 80111ee:	3001      	adds	r0, #1
 80111f0:	f43f af12 	beq.w	8011018 <_printf_float+0x98>
 80111f4:	f04f 0a00 	mov.w	sl, #0
 80111f8:	f104 0b1a 	add.w	fp, r4, #26
 80111fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111fe:	425b      	negs	r3, r3
 8011200:	4553      	cmp	r3, sl
 8011202:	dc01      	bgt.n	8011208 <_printf_float+0x288>
 8011204:	464b      	mov	r3, r9
 8011206:	e794      	b.n	8011132 <_printf_float+0x1b2>
 8011208:	2301      	movs	r3, #1
 801120a:	465a      	mov	r2, fp
 801120c:	4631      	mov	r1, r6
 801120e:	4628      	mov	r0, r5
 8011210:	47b8      	blx	r7
 8011212:	3001      	adds	r0, #1
 8011214:	f43f af00 	beq.w	8011018 <_printf_float+0x98>
 8011218:	f10a 0a01 	add.w	sl, sl, #1
 801121c:	e7ee      	b.n	80111fc <_printf_float+0x27c>
 801121e:	bf00      	nop
 8011220:	ffffffff 	.word	0xffffffff
 8011224:	7fefffff 	.word	0x7fefffff
 8011228:	0801447e 	.word	0x0801447e
 801122c:	08014482 	.word	0x08014482
 8011230:	08014486 	.word	0x08014486
 8011234:	0801448a 	.word	0x0801448a
 8011238:	0801448e 	.word	0x0801448e
 801123c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801123e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011242:	4553      	cmp	r3, sl
 8011244:	bfa8      	it	ge
 8011246:	4653      	movge	r3, sl
 8011248:	2b00      	cmp	r3, #0
 801124a:	4699      	mov	r9, r3
 801124c:	dc37      	bgt.n	80112be <_printf_float+0x33e>
 801124e:	2300      	movs	r3, #0
 8011250:	9307      	str	r3, [sp, #28]
 8011252:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011256:	f104 021a 	add.w	r2, r4, #26
 801125a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801125c:	9907      	ldr	r1, [sp, #28]
 801125e:	9306      	str	r3, [sp, #24]
 8011260:	eba3 0309 	sub.w	r3, r3, r9
 8011264:	428b      	cmp	r3, r1
 8011266:	dc31      	bgt.n	80112cc <_printf_float+0x34c>
 8011268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801126a:	459a      	cmp	sl, r3
 801126c:	dc3b      	bgt.n	80112e6 <_printf_float+0x366>
 801126e:	6823      	ldr	r3, [r4, #0]
 8011270:	07da      	lsls	r2, r3, #31
 8011272:	d438      	bmi.n	80112e6 <_printf_float+0x366>
 8011274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011276:	ebaa 0903 	sub.w	r9, sl, r3
 801127a:	9b06      	ldr	r3, [sp, #24]
 801127c:	ebaa 0303 	sub.w	r3, sl, r3
 8011280:	4599      	cmp	r9, r3
 8011282:	bfa8      	it	ge
 8011284:	4699      	movge	r9, r3
 8011286:	f1b9 0f00 	cmp.w	r9, #0
 801128a:	dc34      	bgt.n	80112f6 <_printf_float+0x376>
 801128c:	f04f 0800 	mov.w	r8, #0
 8011290:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011294:	f104 0b1a 	add.w	fp, r4, #26
 8011298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801129a:	ebaa 0303 	sub.w	r3, sl, r3
 801129e:	eba3 0309 	sub.w	r3, r3, r9
 80112a2:	4543      	cmp	r3, r8
 80112a4:	f77f af76 	ble.w	8011194 <_printf_float+0x214>
 80112a8:	2301      	movs	r3, #1
 80112aa:	465a      	mov	r2, fp
 80112ac:	4631      	mov	r1, r6
 80112ae:	4628      	mov	r0, r5
 80112b0:	47b8      	blx	r7
 80112b2:	3001      	adds	r0, #1
 80112b4:	f43f aeb0 	beq.w	8011018 <_printf_float+0x98>
 80112b8:	f108 0801 	add.w	r8, r8, #1
 80112bc:	e7ec      	b.n	8011298 <_printf_float+0x318>
 80112be:	4642      	mov	r2, r8
 80112c0:	4631      	mov	r1, r6
 80112c2:	4628      	mov	r0, r5
 80112c4:	47b8      	blx	r7
 80112c6:	3001      	adds	r0, #1
 80112c8:	d1c1      	bne.n	801124e <_printf_float+0x2ce>
 80112ca:	e6a5      	b.n	8011018 <_printf_float+0x98>
 80112cc:	2301      	movs	r3, #1
 80112ce:	4631      	mov	r1, r6
 80112d0:	4628      	mov	r0, r5
 80112d2:	9206      	str	r2, [sp, #24]
 80112d4:	47b8      	blx	r7
 80112d6:	3001      	adds	r0, #1
 80112d8:	f43f ae9e 	beq.w	8011018 <_printf_float+0x98>
 80112dc:	9b07      	ldr	r3, [sp, #28]
 80112de:	9a06      	ldr	r2, [sp, #24]
 80112e0:	3301      	adds	r3, #1
 80112e2:	9307      	str	r3, [sp, #28]
 80112e4:	e7b9      	b.n	801125a <_printf_float+0x2da>
 80112e6:	9b05      	ldr	r3, [sp, #20]
 80112e8:	465a      	mov	r2, fp
 80112ea:	4631      	mov	r1, r6
 80112ec:	4628      	mov	r0, r5
 80112ee:	47b8      	blx	r7
 80112f0:	3001      	adds	r0, #1
 80112f2:	d1bf      	bne.n	8011274 <_printf_float+0x2f4>
 80112f4:	e690      	b.n	8011018 <_printf_float+0x98>
 80112f6:	9a06      	ldr	r2, [sp, #24]
 80112f8:	464b      	mov	r3, r9
 80112fa:	4442      	add	r2, r8
 80112fc:	4631      	mov	r1, r6
 80112fe:	4628      	mov	r0, r5
 8011300:	47b8      	blx	r7
 8011302:	3001      	adds	r0, #1
 8011304:	d1c2      	bne.n	801128c <_printf_float+0x30c>
 8011306:	e687      	b.n	8011018 <_printf_float+0x98>
 8011308:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801130c:	f1b9 0f01 	cmp.w	r9, #1
 8011310:	dc01      	bgt.n	8011316 <_printf_float+0x396>
 8011312:	07db      	lsls	r3, r3, #31
 8011314:	d536      	bpl.n	8011384 <_printf_float+0x404>
 8011316:	2301      	movs	r3, #1
 8011318:	4642      	mov	r2, r8
 801131a:	4631      	mov	r1, r6
 801131c:	4628      	mov	r0, r5
 801131e:	47b8      	blx	r7
 8011320:	3001      	adds	r0, #1
 8011322:	f43f ae79 	beq.w	8011018 <_printf_float+0x98>
 8011326:	9b05      	ldr	r3, [sp, #20]
 8011328:	465a      	mov	r2, fp
 801132a:	4631      	mov	r1, r6
 801132c:	4628      	mov	r0, r5
 801132e:	47b8      	blx	r7
 8011330:	3001      	adds	r0, #1
 8011332:	f43f ae71 	beq.w	8011018 <_printf_float+0x98>
 8011336:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801133a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011342:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8011346:	d018      	beq.n	801137a <_printf_float+0x3fa>
 8011348:	464b      	mov	r3, r9
 801134a:	f108 0201 	add.w	r2, r8, #1
 801134e:	4631      	mov	r1, r6
 8011350:	4628      	mov	r0, r5
 8011352:	47b8      	blx	r7
 8011354:	3001      	adds	r0, #1
 8011356:	d10c      	bne.n	8011372 <_printf_float+0x3f2>
 8011358:	e65e      	b.n	8011018 <_printf_float+0x98>
 801135a:	2301      	movs	r3, #1
 801135c:	465a      	mov	r2, fp
 801135e:	4631      	mov	r1, r6
 8011360:	4628      	mov	r0, r5
 8011362:	47b8      	blx	r7
 8011364:	3001      	adds	r0, #1
 8011366:	f43f ae57 	beq.w	8011018 <_printf_float+0x98>
 801136a:	f108 0801 	add.w	r8, r8, #1
 801136e:	45c8      	cmp	r8, r9
 8011370:	dbf3      	blt.n	801135a <_printf_float+0x3da>
 8011372:	4653      	mov	r3, sl
 8011374:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011378:	e6dc      	b.n	8011134 <_printf_float+0x1b4>
 801137a:	f04f 0800 	mov.w	r8, #0
 801137e:	f104 0b1a 	add.w	fp, r4, #26
 8011382:	e7f4      	b.n	801136e <_printf_float+0x3ee>
 8011384:	2301      	movs	r3, #1
 8011386:	4642      	mov	r2, r8
 8011388:	e7e1      	b.n	801134e <_printf_float+0x3ce>
 801138a:	2301      	movs	r3, #1
 801138c:	464a      	mov	r2, r9
 801138e:	4631      	mov	r1, r6
 8011390:	4628      	mov	r0, r5
 8011392:	47b8      	blx	r7
 8011394:	3001      	adds	r0, #1
 8011396:	f43f ae3f 	beq.w	8011018 <_printf_float+0x98>
 801139a:	f108 0801 	add.w	r8, r8, #1
 801139e:	68e3      	ldr	r3, [r4, #12]
 80113a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80113a2:	1a5b      	subs	r3, r3, r1
 80113a4:	4543      	cmp	r3, r8
 80113a6:	dcf0      	bgt.n	801138a <_printf_float+0x40a>
 80113a8:	e6f8      	b.n	801119c <_printf_float+0x21c>
 80113aa:	f04f 0800 	mov.w	r8, #0
 80113ae:	f104 0919 	add.w	r9, r4, #25
 80113b2:	e7f4      	b.n	801139e <_printf_float+0x41e>

080113b4 <_printf_common>:
 80113b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113b8:	4616      	mov	r6, r2
 80113ba:	4698      	mov	r8, r3
 80113bc:	688a      	ldr	r2, [r1, #8]
 80113be:	690b      	ldr	r3, [r1, #16]
 80113c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80113c4:	4293      	cmp	r3, r2
 80113c6:	bfb8      	it	lt
 80113c8:	4613      	movlt	r3, r2
 80113ca:	6033      	str	r3, [r6, #0]
 80113cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80113d0:	4607      	mov	r7, r0
 80113d2:	460c      	mov	r4, r1
 80113d4:	b10a      	cbz	r2, 80113da <_printf_common+0x26>
 80113d6:	3301      	adds	r3, #1
 80113d8:	6033      	str	r3, [r6, #0]
 80113da:	6823      	ldr	r3, [r4, #0]
 80113dc:	0699      	lsls	r1, r3, #26
 80113de:	bf42      	ittt	mi
 80113e0:	6833      	ldrmi	r3, [r6, #0]
 80113e2:	3302      	addmi	r3, #2
 80113e4:	6033      	strmi	r3, [r6, #0]
 80113e6:	6825      	ldr	r5, [r4, #0]
 80113e8:	f015 0506 	ands.w	r5, r5, #6
 80113ec:	d106      	bne.n	80113fc <_printf_common+0x48>
 80113ee:	f104 0a19 	add.w	sl, r4, #25
 80113f2:	68e3      	ldr	r3, [r4, #12]
 80113f4:	6832      	ldr	r2, [r6, #0]
 80113f6:	1a9b      	subs	r3, r3, r2
 80113f8:	42ab      	cmp	r3, r5
 80113fa:	dc26      	bgt.n	801144a <_printf_common+0x96>
 80113fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011400:	6822      	ldr	r2, [r4, #0]
 8011402:	3b00      	subs	r3, #0
 8011404:	bf18      	it	ne
 8011406:	2301      	movne	r3, #1
 8011408:	0692      	lsls	r2, r2, #26
 801140a:	d42b      	bmi.n	8011464 <_printf_common+0xb0>
 801140c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011410:	4641      	mov	r1, r8
 8011412:	4638      	mov	r0, r7
 8011414:	47c8      	blx	r9
 8011416:	3001      	adds	r0, #1
 8011418:	d01e      	beq.n	8011458 <_printf_common+0xa4>
 801141a:	6823      	ldr	r3, [r4, #0]
 801141c:	6922      	ldr	r2, [r4, #16]
 801141e:	f003 0306 	and.w	r3, r3, #6
 8011422:	2b04      	cmp	r3, #4
 8011424:	bf02      	ittt	eq
 8011426:	68e5      	ldreq	r5, [r4, #12]
 8011428:	6833      	ldreq	r3, [r6, #0]
 801142a:	1aed      	subeq	r5, r5, r3
 801142c:	68a3      	ldr	r3, [r4, #8]
 801142e:	bf0c      	ite	eq
 8011430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011434:	2500      	movne	r5, #0
 8011436:	4293      	cmp	r3, r2
 8011438:	bfc4      	itt	gt
 801143a:	1a9b      	subgt	r3, r3, r2
 801143c:	18ed      	addgt	r5, r5, r3
 801143e:	2600      	movs	r6, #0
 8011440:	341a      	adds	r4, #26
 8011442:	42b5      	cmp	r5, r6
 8011444:	d11a      	bne.n	801147c <_printf_common+0xc8>
 8011446:	2000      	movs	r0, #0
 8011448:	e008      	b.n	801145c <_printf_common+0xa8>
 801144a:	2301      	movs	r3, #1
 801144c:	4652      	mov	r2, sl
 801144e:	4641      	mov	r1, r8
 8011450:	4638      	mov	r0, r7
 8011452:	47c8      	blx	r9
 8011454:	3001      	adds	r0, #1
 8011456:	d103      	bne.n	8011460 <_printf_common+0xac>
 8011458:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801145c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011460:	3501      	adds	r5, #1
 8011462:	e7c6      	b.n	80113f2 <_printf_common+0x3e>
 8011464:	18e1      	adds	r1, r4, r3
 8011466:	1c5a      	adds	r2, r3, #1
 8011468:	2030      	movs	r0, #48	@ 0x30
 801146a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801146e:	4422      	add	r2, r4
 8011470:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011474:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011478:	3302      	adds	r3, #2
 801147a:	e7c7      	b.n	801140c <_printf_common+0x58>
 801147c:	2301      	movs	r3, #1
 801147e:	4622      	mov	r2, r4
 8011480:	4641      	mov	r1, r8
 8011482:	4638      	mov	r0, r7
 8011484:	47c8      	blx	r9
 8011486:	3001      	adds	r0, #1
 8011488:	d0e6      	beq.n	8011458 <_printf_common+0xa4>
 801148a:	3601      	adds	r6, #1
 801148c:	e7d9      	b.n	8011442 <_printf_common+0x8e>
	...

08011490 <_printf_i>:
 8011490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011494:	7e0f      	ldrb	r7, [r1, #24]
 8011496:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011498:	2f78      	cmp	r7, #120	@ 0x78
 801149a:	4691      	mov	r9, r2
 801149c:	4680      	mov	r8, r0
 801149e:	460c      	mov	r4, r1
 80114a0:	469a      	mov	sl, r3
 80114a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80114a6:	d807      	bhi.n	80114b8 <_printf_i+0x28>
 80114a8:	2f62      	cmp	r7, #98	@ 0x62
 80114aa:	d80a      	bhi.n	80114c2 <_printf_i+0x32>
 80114ac:	2f00      	cmp	r7, #0
 80114ae:	f000 80d2 	beq.w	8011656 <_printf_i+0x1c6>
 80114b2:	2f58      	cmp	r7, #88	@ 0x58
 80114b4:	f000 80b9 	beq.w	801162a <_printf_i+0x19a>
 80114b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80114bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80114c0:	e03a      	b.n	8011538 <_printf_i+0xa8>
 80114c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80114c6:	2b15      	cmp	r3, #21
 80114c8:	d8f6      	bhi.n	80114b8 <_printf_i+0x28>
 80114ca:	a101      	add	r1, pc, #4	@ (adr r1, 80114d0 <_printf_i+0x40>)
 80114cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80114d0:	08011529 	.word	0x08011529
 80114d4:	0801153d 	.word	0x0801153d
 80114d8:	080114b9 	.word	0x080114b9
 80114dc:	080114b9 	.word	0x080114b9
 80114e0:	080114b9 	.word	0x080114b9
 80114e4:	080114b9 	.word	0x080114b9
 80114e8:	0801153d 	.word	0x0801153d
 80114ec:	080114b9 	.word	0x080114b9
 80114f0:	080114b9 	.word	0x080114b9
 80114f4:	080114b9 	.word	0x080114b9
 80114f8:	080114b9 	.word	0x080114b9
 80114fc:	0801163d 	.word	0x0801163d
 8011500:	08011567 	.word	0x08011567
 8011504:	080115f7 	.word	0x080115f7
 8011508:	080114b9 	.word	0x080114b9
 801150c:	080114b9 	.word	0x080114b9
 8011510:	0801165f 	.word	0x0801165f
 8011514:	080114b9 	.word	0x080114b9
 8011518:	08011567 	.word	0x08011567
 801151c:	080114b9 	.word	0x080114b9
 8011520:	080114b9 	.word	0x080114b9
 8011524:	080115ff 	.word	0x080115ff
 8011528:	6833      	ldr	r3, [r6, #0]
 801152a:	1d1a      	adds	r2, r3, #4
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	6032      	str	r2, [r6, #0]
 8011530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011534:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011538:	2301      	movs	r3, #1
 801153a:	e09d      	b.n	8011678 <_printf_i+0x1e8>
 801153c:	6833      	ldr	r3, [r6, #0]
 801153e:	6820      	ldr	r0, [r4, #0]
 8011540:	1d19      	adds	r1, r3, #4
 8011542:	6031      	str	r1, [r6, #0]
 8011544:	0606      	lsls	r6, r0, #24
 8011546:	d501      	bpl.n	801154c <_printf_i+0xbc>
 8011548:	681d      	ldr	r5, [r3, #0]
 801154a:	e003      	b.n	8011554 <_printf_i+0xc4>
 801154c:	0645      	lsls	r5, r0, #25
 801154e:	d5fb      	bpl.n	8011548 <_printf_i+0xb8>
 8011550:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011554:	2d00      	cmp	r5, #0
 8011556:	da03      	bge.n	8011560 <_printf_i+0xd0>
 8011558:	232d      	movs	r3, #45	@ 0x2d
 801155a:	426d      	negs	r5, r5
 801155c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011560:	4859      	ldr	r0, [pc, #356]	@ (80116c8 <_printf_i+0x238>)
 8011562:	230a      	movs	r3, #10
 8011564:	e011      	b.n	801158a <_printf_i+0xfa>
 8011566:	6821      	ldr	r1, [r4, #0]
 8011568:	6833      	ldr	r3, [r6, #0]
 801156a:	0608      	lsls	r0, r1, #24
 801156c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011570:	d402      	bmi.n	8011578 <_printf_i+0xe8>
 8011572:	0649      	lsls	r1, r1, #25
 8011574:	bf48      	it	mi
 8011576:	b2ad      	uxthmi	r5, r5
 8011578:	2f6f      	cmp	r7, #111	@ 0x6f
 801157a:	4853      	ldr	r0, [pc, #332]	@ (80116c8 <_printf_i+0x238>)
 801157c:	6033      	str	r3, [r6, #0]
 801157e:	bf14      	ite	ne
 8011580:	230a      	movne	r3, #10
 8011582:	2308      	moveq	r3, #8
 8011584:	2100      	movs	r1, #0
 8011586:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801158a:	6866      	ldr	r6, [r4, #4]
 801158c:	60a6      	str	r6, [r4, #8]
 801158e:	2e00      	cmp	r6, #0
 8011590:	bfa2      	ittt	ge
 8011592:	6821      	ldrge	r1, [r4, #0]
 8011594:	f021 0104 	bicge.w	r1, r1, #4
 8011598:	6021      	strge	r1, [r4, #0]
 801159a:	b90d      	cbnz	r5, 80115a0 <_printf_i+0x110>
 801159c:	2e00      	cmp	r6, #0
 801159e:	d04b      	beq.n	8011638 <_printf_i+0x1a8>
 80115a0:	4616      	mov	r6, r2
 80115a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80115a6:	fb03 5711 	mls	r7, r3, r1, r5
 80115aa:	5dc7      	ldrb	r7, [r0, r7]
 80115ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80115b0:	462f      	mov	r7, r5
 80115b2:	42bb      	cmp	r3, r7
 80115b4:	460d      	mov	r5, r1
 80115b6:	d9f4      	bls.n	80115a2 <_printf_i+0x112>
 80115b8:	2b08      	cmp	r3, #8
 80115ba:	d10b      	bne.n	80115d4 <_printf_i+0x144>
 80115bc:	6823      	ldr	r3, [r4, #0]
 80115be:	07df      	lsls	r7, r3, #31
 80115c0:	d508      	bpl.n	80115d4 <_printf_i+0x144>
 80115c2:	6923      	ldr	r3, [r4, #16]
 80115c4:	6861      	ldr	r1, [r4, #4]
 80115c6:	4299      	cmp	r1, r3
 80115c8:	bfde      	ittt	le
 80115ca:	2330      	movle	r3, #48	@ 0x30
 80115cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80115d0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80115d4:	1b92      	subs	r2, r2, r6
 80115d6:	6122      	str	r2, [r4, #16]
 80115d8:	f8cd a000 	str.w	sl, [sp]
 80115dc:	464b      	mov	r3, r9
 80115de:	aa03      	add	r2, sp, #12
 80115e0:	4621      	mov	r1, r4
 80115e2:	4640      	mov	r0, r8
 80115e4:	f7ff fee6 	bl	80113b4 <_printf_common>
 80115e8:	3001      	adds	r0, #1
 80115ea:	d14a      	bne.n	8011682 <_printf_i+0x1f2>
 80115ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80115f0:	b004      	add	sp, #16
 80115f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115f6:	6823      	ldr	r3, [r4, #0]
 80115f8:	f043 0320 	orr.w	r3, r3, #32
 80115fc:	6023      	str	r3, [r4, #0]
 80115fe:	4833      	ldr	r0, [pc, #204]	@ (80116cc <_printf_i+0x23c>)
 8011600:	2778      	movs	r7, #120	@ 0x78
 8011602:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011606:	6823      	ldr	r3, [r4, #0]
 8011608:	6831      	ldr	r1, [r6, #0]
 801160a:	061f      	lsls	r7, r3, #24
 801160c:	f851 5b04 	ldr.w	r5, [r1], #4
 8011610:	d402      	bmi.n	8011618 <_printf_i+0x188>
 8011612:	065f      	lsls	r7, r3, #25
 8011614:	bf48      	it	mi
 8011616:	b2ad      	uxthmi	r5, r5
 8011618:	6031      	str	r1, [r6, #0]
 801161a:	07d9      	lsls	r1, r3, #31
 801161c:	bf44      	itt	mi
 801161e:	f043 0320 	orrmi.w	r3, r3, #32
 8011622:	6023      	strmi	r3, [r4, #0]
 8011624:	b11d      	cbz	r5, 801162e <_printf_i+0x19e>
 8011626:	2310      	movs	r3, #16
 8011628:	e7ac      	b.n	8011584 <_printf_i+0xf4>
 801162a:	4827      	ldr	r0, [pc, #156]	@ (80116c8 <_printf_i+0x238>)
 801162c:	e7e9      	b.n	8011602 <_printf_i+0x172>
 801162e:	6823      	ldr	r3, [r4, #0]
 8011630:	f023 0320 	bic.w	r3, r3, #32
 8011634:	6023      	str	r3, [r4, #0]
 8011636:	e7f6      	b.n	8011626 <_printf_i+0x196>
 8011638:	4616      	mov	r6, r2
 801163a:	e7bd      	b.n	80115b8 <_printf_i+0x128>
 801163c:	6833      	ldr	r3, [r6, #0]
 801163e:	6825      	ldr	r5, [r4, #0]
 8011640:	6961      	ldr	r1, [r4, #20]
 8011642:	1d18      	adds	r0, r3, #4
 8011644:	6030      	str	r0, [r6, #0]
 8011646:	062e      	lsls	r6, r5, #24
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	d501      	bpl.n	8011650 <_printf_i+0x1c0>
 801164c:	6019      	str	r1, [r3, #0]
 801164e:	e002      	b.n	8011656 <_printf_i+0x1c6>
 8011650:	0668      	lsls	r0, r5, #25
 8011652:	d5fb      	bpl.n	801164c <_printf_i+0x1bc>
 8011654:	8019      	strh	r1, [r3, #0]
 8011656:	2300      	movs	r3, #0
 8011658:	6123      	str	r3, [r4, #16]
 801165a:	4616      	mov	r6, r2
 801165c:	e7bc      	b.n	80115d8 <_printf_i+0x148>
 801165e:	6833      	ldr	r3, [r6, #0]
 8011660:	1d1a      	adds	r2, r3, #4
 8011662:	6032      	str	r2, [r6, #0]
 8011664:	681e      	ldr	r6, [r3, #0]
 8011666:	6862      	ldr	r2, [r4, #4]
 8011668:	2100      	movs	r1, #0
 801166a:	4630      	mov	r0, r6
 801166c:	f7ee fe50 	bl	8000310 <memchr>
 8011670:	b108      	cbz	r0, 8011676 <_printf_i+0x1e6>
 8011672:	1b80      	subs	r0, r0, r6
 8011674:	6060      	str	r0, [r4, #4]
 8011676:	6863      	ldr	r3, [r4, #4]
 8011678:	6123      	str	r3, [r4, #16]
 801167a:	2300      	movs	r3, #0
 801167c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011680:	e7aa      	b.n	80115d8 <_printf_i+0x148>
 8011682:	6923      	ldr	r3, [r4, #16]
 8011684:	4632      	mov	r2, r6
 8011686:	4649      	mov	r1, r9
 8011688:	4640      	mov	r0, r8
 801168a:	47d0      	blx	sl
 801168c:	3001      	adds	r0, #1
 801168e:	d0ad      	beq.n	80115ec <_printf_i+0x15c>
 8011690:	6823      	ldr	r3, [r4, #0]
 8011692:	079b      	lsls	r3, r3, #30
 8011694:	d413      	bmi.n	80116be <_printf_i+0x22e>
 8011696:	68e0      	ldr	r0, [r4, #12]
 8011698:	9b03      	ldr	r3, [sp, #12]
 801169a:	4298      	cmp	r0, r3
 801169c:	bfb8      	it	lt
 801169e:	4618      	movlt	r0, r3
 80116a0:	e7a6      	b.n	80115f0 <_printf_i+0x160>
 80116a2:	2301      	movs	r3, #1
 80116a4:	4632      	mov	r2, r6
 80116a6:	4649      	mov	r1, r9
 80116a8:	4640      	mov	r0, r8
 80116aa:	47d0      	blx	sl
 80116ac:	3001      	adds	r0, #1
 80116ae:	d09d      	beq.n	80115ec <_printf_i+0x15c>
 80116b0:	3501      	adds	r5, #1
 80116b2:	68e3      	ldr	r3, [r4, #12]
 80116b4:	9903      	ldr	r1, [sp, #12]
 80116b6:	1a5b      	subs	r3, r3, r1
 80116b8:	42ab      	cmp	r3, r5
 80116ba:	dcf2      	bgt.n	80116a2 <_printf_i+0x212>
 80116bc:	e7eb      	b.n	8011696 <_printf_i+0x206>
 80116be:	2500      	movs	r5, #0
 80116c0:	f104 0619 	add.w	r6, r4, #25
 80116c4:	e7f5      	b.n	80116b2 <_printf_i+0x222>
 80116c6:	bf00      	nop
 80116c8:	08014490 	.word	0x08014490
 80116cc:	080144a1 	.word	0x080144a1

080116d0 <std>:
 80116d0:	2300      	movs	r3, #0
 80116d2:	b510      	push	{r4, lr}
 80116d4:	4604      	mov	r4, r0
 80116d6:	e9c0 3300 	strd	r3, r3, [r0]
 80116da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80116de:	6083      	str	r3, [r0, #8]
 80116e0:	8181      	strh	r1, [r0, #12]
 80116e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80116e4:	81c2      	strh	r2, [r0, #14]
 80116e6:	6183      	str	r3, [r0, #24]
 80116e8:	4619      	mov	r1, r3
 80116ea:	2208      	movs	r2, #8
 80116ec:	305c      	adds	r0, #92	@ 0x5c
 80116ee:	f000 f914 	bl	801191a <memset>
 80116f2:	4b0d      	ldr	r3, [pc, #52]	@ (8011728 <std+0x58>)
 80116f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80116f6:	4b0d      	ldr	r3, [pc, #52]	@ (801172c <std+0x5c>)
 80116f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80116fa:	4b0d      	ldr	r3, [pc, #52]	@ (8011730 <std+0x60>)
 80116fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80116fe:	4b0d      	ldr	r3, [pc, #52]	@ (8011734 <std+0x64>)
 8011700:	6323      	str	r3, [r4, #48]	@ 0x30
 8011702:	4b0d      	ldr	r3, [pc, #52]	@ (8011738 <std+0x68>)
 8011704:	6224      	str	r4, [r4, #32]
 8011706:	429c      	cmp	r4, r3
 8011708:	d006      	beq.n	8011718 <std+0x48>
 801170a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801170e:	4294      	cmp	r4, r2
 8011710:	d002      	beq.n	8011718 <std+0x48>
 8011712:	33d0      	adds	r3, #208	@ 0xd0
 8011714:	429c      	cmp	r4, r3
 8011716:	d105      	bne.n	8011724 <std+0x54>
 8011718:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801171c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011720:	f000 b986 	b.w	8011a30 <__retarget_lock_init_recursive>
 8011724:	bd10      	pop	{r4, pc}
 8011726:	bf00      	nop
 8011728:	08011895 	.word	0x08011895
 801172c:	080118b7 	.word	0x080118b7
 8011730:	080118ef 	.word	0x080118ef
 8011734:	08011913 	.word	0x08011913
 8011738:	24001070 	.word	0x24001070

0801173c <stdio_exit_handler>:
 801173c:	4a02      	ldr	r2, [pc, #8]	@ (8011748 <stdio_exit_handler+0xc>)
 801173e:	4903      	ldr	r1, [pc, #12]	@ (801174c <stdio_exit_handler+0x10>)
 8011740:	4803      	ldr	r0, [pc, #12]	@ (8011750 <stdio_exit_handler+0x14>)
 8011742:	f000 b869 	b.w	8011818 <_fwalk_sglue>
 8011746:	bf00      	nop
 8011748:	24000048 	.word	0x24000048
 801174c:	080132c1 	.word	0x080132c1
 8011750:	24000058 	.word	0x24000058

08011754 <cleanup_stdio>:
 8011754:	6841      	ldr	r1, [r0, #4]
 8011756:	4b0c      	ldr	r3, [pc, #48]	@ (8011788 <cleanup_stdio+0x34>)
 8011758:	4299      	cmp	r1, r3
 801175a:	b510      	push	{r4, lr}
 801175c:	4604      	mov	r4, r0
 801175e:	d001      	beq.n	8011764 <cleanup_stdio+0x10>
 8011760:	f001 fdae 	bl	80132c0 <_fflush_r>
 8011764:	68a1      	ldr	r1, [r4, #8]
 8011766:	4b09      	ldr	r3, [pc, #36]	@ (801178c <cleanup_stdio+0x38>)
 8011768:	4299      	cmp	r1, r3
 801176a:	d002      	beq.n	8011772 <cleanup_stdio+0x1e>
 801176c:	4620      	mov	r0, r4
 801176e:	f001 fda7 	bl	80132c0 <_fflush_r>
 8011772:	68e1      	ldr	r1, [r4, #12]
 8011774:	4b06      	ldr	r3, [pc, #24]	@ (8011790 <cleanup_stdio+0x3c>)
 8011776:	4299      	cmp	r1, r3
 8011778:	d004      	beq.n	8011784 <cleanup_stdio+0x30>
 801177a:	4620      	mov	r0, r4
 801177c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011780:	f001 bd9e 	b.w	80132c0 <_fflush_r>
 8011784:	bd10      	pop	{r4, pc}
 8011786:	bf00      	nop
 8011788:	24001070 	.word	0x24001070
 801178c:	240010d8 	.word	0x240010d8
 8011790:	24001140 	.word	0x24001140

08011794 <global_stdio_init.part.0>:
 8011794:	b510      	push	{r4, lr}
 8011796:	4b0b      	ldr	r3, [pc, #44]	@ (80117c4 <global_stdio_init.part.0+0x30>)
 8011798:	4c0b      	ldr	r4, [pc, #44]	@ (80117c8 <global_stdio_init.part.0+0x34>)
 801179a:	4a0c      	ldr	r2, [pc, #48]	@ (80117cc <global_stdio_init.part.0+0x38>)
 801179c:	601a      	str	r2, [r3, #0]
 801179e:	4620      	mov	r0, r4
 80117a0:	2200      	movs	r2, #0
 80117a2:	2104      	movs	r1, #4
 80117a4:	f7ff ff94 	bl	80116d0 <std>
 80117a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80117ac:	2201      	movs	r2, #1
 80117ae:	2109      	movs	r1, #9
 80117b0:	f7ff ff8e 	bl	80116d0 <std>
 80117b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80117b8:	2202      	movs	r2, #2
 80117ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117be:	2112      	movs	r1, #18
 80117c0:	f7ff bf86 	b.w	80116d0 <std>
 80117c4:	240011a8 	.word	0x240011a8
 80117c8:	24001070 	.word	0x24001070
 80117cc:	0801173d 	.word	0x0801173d

080117d0 <__sfp_lock_acquire>:
 80117d0:	4801      	ldr	r0, [pc, #4]	@ (80117d8 <__sfp_lock_acquire+0x8>)
 80117d2:	f000 b92e 	b.w	8011a32 <__retarget_lock_acquire_recursive>
 80117d6:	bf00      	nop
 80117d8:	240011b1 	.word	0x240011b1

080117dc <__sfp_lock_release>:
 80117dc:	4801      	ldr	r0, [pc, #4]	@ (80117e4 <__sfp_lock_release+0x8>)
 80117de:	f000 b929 	b.w	8011a34 <__retarget_lock_release_recursive>
 80117e2:	bf00      	nop
 80117e4:	240011b1 	.word	0x240011b1

080117e8 <__sinit>:
 80117e8:	b510      	push	{r4, lr}
 80117ea:	4604      	mov	r4, r0
 80117ec:	f7ff fff0 	bl	80117d0 <__sfp_lock_acquire>
 80117f0:	6a23      	ldr	r3, [r4, #32]
 80117f2:	b11b      	cbz	r3, 80117fc <__sinit+0x14>
 80117f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117f8:	f7ff bff0 	b.w	80117dc <__sfp_lock_release>
 80117fc:	4b04      	ldr	r3, [pc, #16]	@ (8011810 <__sinit+0x28>)
 80117fe:	6223      	str	r3, [r4, #32]
 8011800:	4b04      	ldr	r3, [pc, #16]	@ (8011814 <__sinit+0x2c>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d1f5      	bne.n	80117f4 <__sinit+0xc>
 8011808:	f7ff ffc4 	bl	8011794 <global_stdio_init.part.0>
 801180c:	e7f2      	b.n	80117f4 <__sinit+0xc>
 801180e:	bf00      	nop
 8011810:	08011755 	.word	0x08011755
 8011814:	240011a8 	.word	0x240011a8

08011818 <_fwalk_sglue>:
 8011818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801181c:	4607      	mov	r7, r0
 801181e:	4688      	mov	r8, r1
 8011820:	4614      	mov	r4, r2
 8011822:	2600      	movs	r6, #0
 8011824:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011828:	f1b9 0901 	subs.w	r9, r9, #1
 801182c:	d505      	bpl.n	801183a <_fwalk_sglue+0x22>
 801182e:	6824      	ldr	r4, [r4, #0]
 8011830:	2c00      	cmp	r4, #0
 8011832:	d1f7      	bne.n	8011824 <_fwalk_sglue+0xc>
 8011834:	4630      	mov	r0, r6
 8011836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801183a:	89ab      	ldrh	r3, [r5, #12]
 801183c:	2b01      	cmp	r3, #1
 801183e:	d907      	bls.n	8011850 <_fwalk_sglue+0x38>
 8011840:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011844:	3301      	adds	r3, #1
 8011846:	d003      	beq.n	8011850 <_fwalk_sglue+0x38>
 8011848:	4629      	mov	r1, r5
 801184a:	4638      	mov	r0, r7
 801184c:	47c0      	blx	r8
 801184e:	4306      	orrs	r6, r0
 8011850:	3568      	adds	r5, #104	@ 0x68
 8011852:	e7e9      	b.n	8011828 <_fwalk_sglue+0x10>

08011854 <siprintf>:
 8011854:	b40e      	push	{r1, r2, r3}
 8011856:	b500      	push	{lr}
 8011858:	b09c      	sub	sp, #112	@ 0x70
 801185a:	ab1d      	add	r3, sp, #116	@ 0x74
 801185c:	9002      	str	r0, [sp, #8]
 801185e:	9006      	str	r0, [sp, #24]
 8011860:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011864:	4809      	ldr	r0, [pc, #36]	@ (801188c <siprintf+0x38>)
 8011866:	9107      	str	r1, [sp, #28]
 8011868:	9104      	str	r1, [sp, #16]
 801186a:	4909      	ldr	r1, [pc, #36]	@ (8011890 <siprintf+0x3c>)
 801186c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011870:	9105      	str	r1, [sp, #20]
 8011872:	6800      	ldr	r0, [r0, #0]
 8011874:	9301      	str	r3, [sp, #4]
 8011876:	a902      	add	r1, sp, #8
 8011878:	f001 fba2 	bl	8012fc0 <_svfiprintf_r>
 801187c:	9b02      	ldr	r3, [sp, #8]
 801187e:	2200      	movs	r2, #0
 8011880:	701a      	strb	r2, [r3, #0]
 8011882:	b01c      	add	sp, #112	@ 0x70
 8011884:	f85d eb04 	ldr.w	lr, [sp], #4
 8011888:	b003      	add	sp, #12
 801188a:	4770      	bx	lr
 801188c:	24000054 	.word	0x24000054
 8011890:	ffff0208 	.word	0xffff0208

08011894 <__sread>:
 8011894:	b510      	push	{r4, lr}
 8011896:	460c      	mov	r4, r1
 8011898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801189c:	f000 f87a 	bl	8011994 <_read_r>
 80118a0:	2800      	cmp	r0, #0
 80118a2:	bfab      	itete	ge
 80118a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80118a6:	89a3      	ldrhlt	r3, [r4, #12]
 80118a8:	181b      	addge	r3, r3, r0
 80118aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80118ae:	bfac      	ite	ge
 80118b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80118b2:	81a3      	strhlt	r3, [r4, #12]
 80118b4:	bd10      	pop	{r4, pc}

080118b6 <__swrite>:
 80118b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118ba:	461f      	mov	r7, r3
 80118bc:	898b      	ldrh	r3, [r1, #12]
 80118be:	05db      	lsls	r3, r3, #23
 80118c0:	4605      	mov	r5, r0
 80118c2:	460c      	mov	r4, r1
 80118c4:	4616      	mov	r6, r2
 80118c6:	d505      	bpl.n	80118d4 <__swrite+0x1e>
 80118c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118cc:	2302      	movs	r3, #2
 80118ce:	2200      	movs	r2, #0
 80118d0:	f000 f84e 	bl	8011970 <_lseek_r>
 80118d4:	89a3      	ldrh	r3, [r4, #12]
 80118d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80118de:	81a3      	strh	r3, [r4, #12]
 80118e0:	4632      	mov	r2, r6
 80118e2:	463b      	mov	r3, r7
 80118e4:	4628      	mov	r0, r5
 80118e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118ea:	f000 b865 	b.w	80119b8 <_write_r>

080118ee <__sseek>:
 80118ee:	b510      	push	{r4, lr}
 80118f0:	460c      	mov	r4, r1
 80118f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118f6:	f000 f83b 	bl	8011970 <_lseek_r>
 80118fa:	1c43      	adds	r3, r0, #1
 80118fc:	89a3      	ldrh	r3, [r4, #12]
 80118fe:	bf15      	itete	ne
 8011900:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011902:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011906:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801190a:	81a3      	strheq	r3, [r4, #12]
 801190c:	bf18      	it	ne
 801190e:	81a3      	strhne	r3, [r4, #12]
 8011910:	bd10      	pop	{r4, pc}

08011912 <__sclose>:
 8011912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011916:	f000 b81b 	b.w	8011950 <_close_r>

0801191a <memset>:
 801191a:	4402      	add	r2, r0
 801191c:	4603      	mov	r3, r0
 801191e:	4293      	cmp	r3, r2
 8011920:	d100      	bne.n	8011924 <memset+0xa>
 8011922:	4770      	bx	lr
 8011924:	f803 1b01 	strb.w	r1, [r3], #1
 8011928:	e7f9      	b.n	801191e <memset+0x4>

0801192a <strcat>:
 801192a:	b510      	push	{r4, lr}
 801192c:	4602      	mov	r2, r0
 801192e:	7814      	ldrb	r4, [r2, #0]
 8011930:	4613      	mov	r3, r2
 8011932:	3201      	adds	r2, #1
 8011934:	2c00      	cmp	r4, #0
 8011936:	d1fa      	bne.n	801192e <strcat+0x4>
 8011938:	3b01      	subs	r3, #1
 801193a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801193e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011942:	2a00      	cmp	r2, #0
 8011944:	d1f9      	bne.n	801193a <strcat+0x10>
 8011946:	bd10      	pop	{r4, pc}

08011948 <_localeconv_r>:
 8011948:	4800      	ldr	r0, [pc, #0]	@ (801194c <_localeconv_r+0x4>)
 801194a:	4770      	bx	lr
 801194c:	24000194 	.word	0x24000194

08011950 <_close_r>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	4d06      	ldr	r5, [pc, #24]	@ (801196c <_close_r+0x1c>)
 8011954:	2300      	movs	r3, #0
 8011956:	4604      	mov	r4, r0
 8011958:	4608      	mov	r0, r1
 801195a:	602b      	str	r3, [r5, #0]
 801195c:	f7f2 fb66 	bl	800402c <_close>
 8011960:	1c43      	adds	r3, r0, #1
 8011962:	d102      	bne.n	801196a <_close_r+0x1a>
 8011964:	682b      	ldr	r3, [r5, #0]
 8011966:	b103      	cbz	r3, 801196a <_close_r+0x1a>
 8011968:	6023      	str	r3, [r4, #0]
 801196a:	bd38      	pop	{r3, r4, r5, pc}
 801196c:	240011ac 	.word	0x240011ac

08011970 <_lseek_r>:
 8011970:	b538      	push	{r3, r4, r5, lr}
 8011972:	4d07      	ldr	r5, [pc, #28]	@ (8011990 <_lseek_r+0x20>)
 8011974:	4604      	mov	r4, r0
 8011976:	4608      	mov	r0, r1
 8011978:	4611      	mov	r1, r2
 801197a:	2200      	movs	r2, #0
 801197c:	602a      	str	r2, [r5, #0]
 801197e:	461a      	mov	r2, r3
 8011980:	f7f2 fb7b 	bl	800407a <_lseek>
 8011984:	1c43      	adds	r3, r0, #1
 8011986:	d102      	bne.n	801198e <_lseek_r+0x1e>
 8011988:	682b      	ldr	r3, [r5, #0]
 801198a:	b103      	cbz	r3, 801198e <_lseek_r+0x1e>
 801198c:	6023      	str	r3, [r4, #0]
 801198e:	bd38      	pop	{r3, r4, r5, pc}
 8011990:	240011ac 	.word	0x240011ac

08011994 <_read_r>:
 8011994:	b538      	push	{r3, r4, r5, lr}
 8011996:	4d07      	ldr	r5, [pc, #28]	@ (80119b4 <_read_r+0x20>)
 8011998:	4604      	mov	r4, r0
 801199a:	4608      	mov	r0, r1
 801199c:	4611      	mov	r1, r2
 801199e:	2200      	movs	r2, #0
 80119a0:	602a      	str	r2, [r5, #0]
 80119a2:	461a      	mov	r2, r3
 80119a4:	f7f2 fb09 	bl	8003fba <_read>
 80119a8:	1c43      	adds	r3, r0, #1
 80119aa:	d102      	bne.n	80119b2 <_read_r+0x1e>
 80119ac:	682b      	ldr	r3, [r5, #0]
 80119ae:	b103      	cbz	r3, 80119b2 <_read_r+0x1e>
 80119b0:	6023      	str	r3, [r4, #0]
 80119b2:	bd38      	pop	{r3, r4, r5, pc}
 80119b4:	240011ac 	.word	0x240011ac

080119b8 <_write_r>:
 80119b8:	b538      	push	{r3, r4, r5, lr}
 80119ba:	4d07      	ldr	r5, [pc, #28]	@ (80119d8 <_write_r+0x20>)
 80119bc:	4604      	mov	r4, r0
 80119be:	4608      	mov	r0, r1
 80119c0:	4611      	mov	r1, r2
 80119c2:	2200      	movs	r2, #0
 80119c4:	602a      	str	r2, [r5, #0]
 80119c6:	461a      	mov	r2, r3
 80119c8:	f7f2 fb14 	bl	8003ff4 <_write>
 80119cc:	1c43      	adds	r3, r0, #1
 80119ce:	d102      	bne.n	80119d6 <_write_r+0x1e>
 80119d0:	682b      	ldr	r3, [r5, #0]
 80119d2:	b103      	cbz	r3, 80119d6 <_write_r+0x1e>
 80119d4:	6023      	str	r3, [r4, #0]
 80119d6:	bd38      	pop	{r3, r4, r5, pc}
 80119d8:	240011ac 	.word	0x240011ac

080119dc <__errno>:
 80119dc:	4b01      	ldr	r3, [pc, #4]	@ (80119e4 <__errno+0x8>)
 80119de:	6818      	ldr	r0, [r3, #0]
 80119e0:	4770      	bx	lr
 80119e2:	bf00      	nop
 80119e4:	24000054 	.word	0x24000054

080119e8 <__libc_init_array>:
 80119e8:	b570      	push	{r4, r5, r6, lr}
 80119ea:	4d0d      	ldr	r5, [pc, #52]	@ (8011a20 <__libc_init_array+0x38>)
 80119ec:	4c0d      	ldr	r4, [pc, #52]	@ (8011a24 <__libc_init_array+0x3c>)
 80119ee:	1b64      	subs	r4, r4, r5
 80119f0:	10a4      	asrs	r4, r4, #2
 80119f2:	2600      	movs	r6, #0
 80119f4:	42a6      	cmp	r6, r4
 80119f6:	d109      	bne.n	8011a0c <__libc_init_array+0x24>
 80119f8:	4d0b      	ldr	r5, [pc, #44]	@ (8011a28 <__libc_init_array+0x40>)
 80119fa:	4c0c      	ldr	r4, [pc, #48]	@ (8011a2c <__libc_init_array+0x44>)
 80119fc:	f001 fffe 	bl	80139fc <_init>
 8011a00:	1b64      	subs	r4, r4, r5
 8011a02:	10a4      	asrs	r4, r4, #2
 8011a04:	2600      	movs	r6, #0
 8011a06:	42a6      	cmp	r6, r4
 8011a08:	d105      	bne.n	8011a16 <__libc_init_array+0x2e>
 8011a0a:	bd70      	pop	{r4, r5, r6, pc}
 8011a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a10:	4798      	blx	r3
 8011a12:	3601      	adds	r6, #1
 8011a14:	e7ee      	b.n	80119f4 <__libc_init_array+0xc>
 8011a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a1a:	4798      	blx	r3
 8011a1c:	3601      	adds	r6, #1
 8011a1e:	e7f2      	b.n	8011a06 <__libc_init_array+0x1e>
 8011a20:	080146f8 	.word	0x080146f8
 8011a24:	080146f8 	.word	0x080146f8
 8011a28:	080146f8 	.word	0x080146f8
 8011a2c:	080146fc 	.word	0x080146fc

08011a30 <__retarget_lock_init_recursive>:
 8011a30:	4770      	bx	lr

08011a32 <__retarget_lock_acquire_recursive>:
 8011a32:	4770      	bx	lr

08011a34 <__retarget_lock_release_recursive>:
 8011a34:	4770      	bx	lr

08011a36 <strcpy>:
 8011a36:	4603      	mov	r3, r0
 8011a38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a3c:	f803 2b01 	strb.w	r2, [r3], #1
 8011a40:	2a00      	cmp	r2, #0
 8011a42:	d1f9      	bne.n	8011a38 <strcpy+0x2>
 8011a44:	4770      	bx	lr

08011a46 <quorem>:
 8011a46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a4a:	6903      	ldr	r3, [r0, #16]
 8011a4c:	690c      	ldr	r4, [r1, #16]
 8011a4e:	42a3      	cmp	r3, r4
 8011a50:	4607      	mov	r7, r0
 8011a52:	db7e      	blt.n	8011b52 <quorem+0x10c>
 8011a54:	3c01      	subs	r4, #1
 8011a56:	f101 0814 	add.w	r8, r1, #20
 8011a5a:	00a3      	lsls	r3, r4, #2
 8011a5c:	f100 0514 	add.w	r5, r0, #20
 8011a60:	9300      	str	r3, [sp, #0]
 8011a62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a66:	9301      	str	r3, [sp, #4]
 8011a68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011a6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011a70:	3301      	adds	r3, #1
 8011a72:	429a      	cmp	r2, r3
 8011a74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011a78:	fbb2 f6f3 	udiv	r6, r2, r3
 8011a7c:	d32e      	bcc.n	8011adc <quorem+0x96>
 8011a7e:	f04f 0a00 	mov.w	sl, #0
 8011a82:	46c4      	mov	ip, r8
 8011a84:	46ae      	mov	lr, r5
 8011a86:	46d3      	mov	fp, sl
 8011a88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011a8c:	b298      	uxth	r0, r3
 8011a8e:	fb06 a000 	mla	r0, r6, r0, sl
 8011a92:	0c02      	lsrs	r2, r0, #16
 8011a94:	0c1b      	lsrs	r3, r3, #16
 8011a96:	fb06 2303 	mla	r3, r6, r3, r2
 8011a9a:	f8de 2000 	ldr.w	r2, [lr]
 8011a9e:	b280      	uxth	r0, r0
 8011aa0:	b292      	uxth	r2, r2
 8011aa2:	1a12      	subs	r2, r2, r0
 8011aa4:	445a      	add	r2, fp
 8011aa6:	f8de 0000 	ldr.w	r0, [lr]
 8011aaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011aae:	b29b      	uxth	r3, r3
 8011ab0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011ab4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011ab8:	b292      	uxth	r2, r2
 8011aba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011abe:	45e1      	cmp	r9, ip
 8011ac0:	f84e 2b04 	str.w	r2, [lr], #4
 8011ac4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011ac8:	d2de      	bcs.n	8011a88 <quorem+0x42>
 8011aca:	9b00      	ldr	r3, [sp, #0]
 8011acc:	58eb      	ldr	r3, [r5, r3]
 8011ace:	b92b      	cbnz	r3, 8011adc <quorem+0x96>
 8011ad0:	9b01      	ldr	r3, [sp, #4]
 8011ad2:	3b04      	subs	r3, #4
 8011ad4:	429d      	cmp	r5, r3
 8011ad6:	461a      	mov	r2, r3
 8011ad8:	d32f      	bcc.n	8011b3a <quorem+0xf4>
 8011ada:	613c      	str	r4, [r7, #16]
 8011adc:	4638      	mov	r0, r7
 8011ade:	f001 f90b 	bl	8012cf8 <__mcmp>
 8011ae2:	2800      	cmp	r0, #0
 8011ae4:	db25      	blt.n	8011b32 <quorem+0xec>
 8011ae6:	4629      	mov	r1, r5
 8011ae8:	2000      	movs	r0, #0
 8011aea:	f858 2b04 	ldr.w	r2, [r8], #4
 8011aee:	f8d1 c000 	ldr.w	ip, [r1]
 8011af2:	fa1f fe82 	uxth.w	lr, r2
 8011af6:	fa1f f38c 	uxth.w	r3, ip
 8011afa:	eba3 030e 	sub.w	r3, r3, lr
 8011afe:	4403      	add	r3, r0
 8011b00:	0c12      	lsrs	r2, r2, #16
 8011b02:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011b06:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011b10:	45c1      	cmp	r9, r8
 8011b12:	f841 3b04 	str.w	r3, [r1], #4
 8011b16:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011b1a:	d2e6      	bcs.n	8011aea <quorem+0xa4>
 8011b1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011b20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011b24:	b922      	cbnz	r2, 8011b30 <quorem+0xea>
 8011b26:	3b04      	subs	r3, #4
 8011b28:	429d      	cmp	r5, r3
 8011b2a:	461a      	mov	r2, r3
 8011b2c:	d30b      	bcc.n	8011b46 <quorem+0x100>
 8011b2e:	613c      	str	r4, [r7, #16]
 8011b30:	3601      	adds	r6, #1
 8011b32:	4630      	mov	r0, r6
 8011b34:	b003      	add	sp, #12
 8011b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b3a:	6812      	ldr	r2, [r2, #0]
 8011b3c:	3b04      	subs	r3, #4
 8011b3e:	2a00      	cmp	r2, #0
 8011b40:	d1cb      	bne.n	8011ada <quorem+0x94>
 8011b42:	3c01      	subs	r4, #1
 8011b44:	e7c6      	b.n	8011ad4 <quorem+0x8e>
 8011b46:	6812      	ldr	r2, [r2, #0]
 8011b48:	3b04      	subs	r3, #4
 8011b4a:	2a00      	cmp	r2, #0
 8011b4c:	d1ef      	bne.n	8011b2e <quorem+0xe8>
 8011b4e:	3c01      	subs	r4, #1
 8011b50:	e7ea      	b.n	8011b28 <quorem+0xe2>
 8011b52:	2000      	movs	r0, #0
 8011b54:	e7ee      	b.n	8011b34 <quorem+0xee>
	...

08011b58 <_dtoa_r>:
 8011b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b5c:	ed2d 8b02 	vpush	{d8}
 8011b60:	69c7      	ldr	r7, [r0, #28]
 8011b62:	b091      	sub	sp, #68	@ 0x44
 8011b64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011b68:	ec55 4b10 	vmov	r4, r5, d0
 8011b6c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8011b6e:	9107      	str	r1, [sp, #28]
 8011b70:	4681      	mov	r9, r0
 8011b72:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b74:	930d      	str	r3, [sp, #52]	@ 0x34
 8011b76:	b97f      	cbnz	r7, 8011b98 <_dtoa_r+0x40>
 8011b78:	2010      	movs	r0, #16
 8011b7a:	f000 fd8d 	bl	8012698 <malloc>
 8011b7e:	4602      	mov	r2, r0
 8011b80:	f8c9 001c 	str.w	r0, [r9, #28]
 8011b84:	b920      	cbnz	r0, 8011b90 <_dtoa_r+0x38>
 8011b86:	4ba0      	ldr	r3, [pc, #640]	@ (8011e08 <_dtoa_r+0x2b0>)
 8011b88:	21ef      	movs	r1, #239	@ 0xef
 8011b8a:	48a0      	ldr	r0, [pc, #640]	@ (8011e0c <_dtoa_r+0x2b4>)
 8011b8c:	f001 fbf8 	bl	8013380 <__assert_func>
 8011b90:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011b94:	6007      	str	r7, [r0, #0]
 8011b96:	60c7      	str	r7, [r0, #12]
 8011b98:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011b9c:	6819      	ldr	r1, [r3, #0]
 8011b9e:	b159      	cbz	r1, 8011bb8 <_dtoa_r+0x60>
 8011ba0:	685a      	ldr	r2, [r3, #4]
 8011ba2:	604a      	str	r2, [r1, #4]
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	4093      	lsls	r3, r2
 8011ba8:	608b      	str	r3, [r1, #8]
 8011baa:	4648      	mov	r0, r9
 8011bac:	f000 fe6a 	bl	8012884 <_Bfree>
 8011bb0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	601a      	str	r2, [r3, #0]
 8011bb8:	1e2b      	subs	r3, r5, #0
 8011bba:	bfbb      	ittet	lt
 8011bbc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011bc0:	9303      	strlt	r3, [sp, #12]
 8011bc2:	2300      	movge	r3, #0
 8011bc4:	2201      	movlt	r2, #1
 8011bc6:	bfac      	ite	ge
 8011bc8:	6033      	strge	r3, [r6, #0]
 8011bca:	6032      	strlt	r2, [r6, #0]
 8011bcc:	4b90      	ldr	r3, [pc, #576]	@ (8011e10 <_dtoa_r+0x2b8>)
 8011bce:	9e03      	ldr	r6, [sp, #12]
 8011bd0:	43b3      	bics	r3, r6
 8011bd2:	d110      	bne.n	8011bf6 <_dtoa_r+0x9e>
 8011bd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011bd6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011bda:	6013      	str	r3, [r2, #0]
 8011bdc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8011be0:	4323      	orrs	r3, r4
 8011be2:	f000 84de 	beq.w	80125a2 <_dtoa_r+0xa4a>
 8011be6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011be8:	4f8a      	ldr	r7, [pc, #552]	@ (8011e14 <_dtoa_r+0x2bc>)
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	f000 84e0 	beq.w	80125b0 <_dtoa_r+0xa58>
 8011bf0:	1cfb      	adds	r3, r7, #3
 8011bf2:	f000 bcdb 	b.w	80125ac <_dtoa_r+0xa54>
 8011bf6:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011bfa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c02:	d10a      	bne.n	8011c1a <_dtoa_r+0xc2>
 8011c04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011c06:	2301      	movs	r3, #1
 8011c08:	6013      	str	r3, [r2, #0]
 8011c0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011c0c:	b113      	cbz	r3, 8011c14 <_dtoa_r+0xbc>
 8011c0e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011c10:	4b81      	ldr	r3, [pc, #516]	@ (8011e18 <_dtoa_r+0x2c0>)
 8011c12:	6013      	str	r3, [r2, #0]
 8011c14:	4f81      	ldr	r7, [pc, #516]	@ (8011e1c <_dtoa_r+0x2c4>)
 8011c16:	f000 bccb 	b.w	80125b0 <_dtoa_r+0xa58>
 8011c1a:	aa0e      	add	r2, sp, #56	@ 0x38
 8011c1c:	a90f      	add	r1, sp, #60	@ 0x3c
 8011c1e:	4648      	mov	r0, r9
 8011c20:	eeb0 0b48 	vmov.f64	d0, d8
 8011c24:	f001 f918 	bl	8012e58 <__d2b>
 8011c28:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8011c2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c2e:	9001      	str	r0, [sp, #4]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d045      	beq.n	8011cc0 <_dtoa_r+0x168>
 8011c34:	eeb0 7b48 	vmov.f64	d7, d8
 8011c38:	ee18 1a90 	vmov	r1, s17
 8011c3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011c40:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8011c44:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8011c48:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8011c4c:	2500      	movs	r5, #0
 8011c4e:	ee07 1a90 	vmov	s15, r1
 8011c52:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8011c56:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011df0 <_dtoa_r+0x298>
 8011c5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c5e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8011df8 <_dtoa_r+0x2a0>
 8011c62:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011c66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011e00 <_dtoa_r+0x2a8>
 8011c6a:	ee07 3a90 	vmov	s15, r3
 8011c6e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011c72:	eeb0 7b46 	vmov.f64	d7, d6
 8011c76:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011c7a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011c7e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c86:	ee16 8a90 	vmov	r8, s13
 8011c8a:	d508      	bpl.n	8011c9e <_dtoa_r+0x146>
 8011c8c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011c90:	eeb4 6b47 	vcmp.f64	d6, d7
 8011c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c98:	bf18      	it	ne
 8011c9a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8011c9e:	f1b8 0f16 	cmp.w	r8, #22
 8011ca2:	d82b      	bhi.n	8011cfc <_dtoa_r+0x1a4>
 8011ca4:	495e      	ldr	r1, [pc, #376]	@ (8011e20 <_dtoa_r+0x2c8>)
 8011ca6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8011caa:	ed91 7b00 	vldr	d7, [r1]
 8011cae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cb6:	d501      	bpl.n	8011cbc <_dtoa_r+0x164>
 8011cb8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011cbc:	2100      	movs	r1, #0
 8011cbe:	e01e      	b.n	8011cfe <_dtoa_r+0x1a6>
 8011cc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cc2:	4413      	add	r3, r2
 8011cc4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8011cc8:	2920      	cmp	r1, #32
 8011cca:	bfc1      	itttt	gt
 8011ccc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8011cd0:	408e      	lslgt	r6, r1
 8011cd2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8011cd6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8011cda:	bfd6      	itet	le
 8011cdc:	f1c1 0120 	rsble	r1, r1, #32
 8011ce0:	4331      	orrgt	r1, r6
 8011ce2:	fa04 f101 	lslle.w	r1, r4, r1
 8011ce6:	ee07 1a90 	vmov	s15, r1
 8011cea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011cee:	3b01      	subs	r3, #1
 8011cf0:	ee17 1a90 	vmov	r1, s15
 8011cf4:	2501      	movs	r5, #1
 8011cf6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8011cfa:	e7a8      	b.n	8011c4e <_dtoa_r+0xf6>
 8011cfc:	2101      	movs	r1, #1
 8011cfe:	1ad2      	subs	r2, r2, r3
 8011d00:	1e53      	subs	r3, r2, #1
 8011d02:	9306      	str	r3, [sp, #24]
 8011d04:	bf45      	ittet	mi
 8011d06:	f1c2 0301 	rsbmi	r3, r2, #1
 8011d0a:	9305      	strmi	r3, [sp, #20]
 8011d0c:	2300      	movpl	r3, #0
 8011d0e:	2300      	movmi	r3, #0
 8011d10:	bf4c      	ite	mi
 8011d12:	9306      	strmi	r3, [sp, #24]
 8011d14:	9305      	strpl	r3, [sp, #20]
 8011d16:	f1b8 0f00 	cmp.w	r8, #0
 8011d1a:	910c      	str	r1, [sp, #48]	@ 0x30
 8011d1c:	db18      	blt.n	8011d50 <_dtoa_r+0x1f8>
 8011d1e:	9b06      	ldr	r3, [sp, #24]
 8011d20:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8011d24:	4443      	add	r3, r8
 8011d26:	9306      	str	r3, [sp, #24]
 8011d28:	2300      	movs	r3, #0
 8011d2a:	9a07      	ldr	r2, [sp, #28]
 8011d2c:	2a09      	cmp	r2, #9
 8011d2e:	d849      	bhi.n	8011dc4 <_dtoa_r+0x26c>
 8011d30:	2a05      	cmp	r2, #5
 8011d32:	bfc4      	itt	gt
 8011d34:	3a04      	subgt	r2, #4
 8011d36:	9207      	strgt	r2, [sp, #28]
 8011d38:	9a07      	ldr	r2, [sp, #28]
 8011d3a:	f1a2 0202 	sub.w	r2, r2, #2
 8011d3e:	bfcc      	ite	gt
 8011d40:	2400      	movgt	r4, #0
 8011d42:	2401      	movle	r4, #1
 8011d44:	2a03      	cmp	r2, #3
 8011d46:	d848      	bhi.n	8011dda <_dtoa_r+0x282>
 8011d48:	e8df f002 	tbb	[pc, r2]
 8011d4c:	3a2c2e0b 	.word	0x3a2c2e0b
 8011d50:	9b05      	ldr	r3, [sp, #20]
 8011d52:	2200      	movs	r2, #0
 8011d54:	eba3 0308 	sub.w	r3, r3, r8
 8011d58:	9305      	str	r3, [sp, #20]
 8011d5a:	920a      	str	r2, [sp, #40]	@ 0x28
 8011d5c:	f1c8 0300 	rsb	r3, r8, #0
 8011d60:	e7e3      	b.n	8011d2a <_dtoa_r+0x1d2>
 8011d62:	2200      	movs	r2, #0
 8011d64:	9208      	str	r2, [sp, #32]
 8011d66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d68:	2a00      	cmp	r2, #0
 8011d6a:	dc39      	bgt.n	8011de0 <_dtoa_r+0x288>
 8011d6c:	f04f 0b01 	mov.w	fp, #1
 8011d70:	46da      	mov	sl, fp
 8011d72:	465a      	mov	r2, fp
 8011d74:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8011d78:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8011d7c:	2100      	movs	r1, #0
 8011d7e:	2004      	movs	r0, #4
 8011d80:	f100 0614 	add.w	r6, r0, #20
 8011d84:	4296      	cmp	r6, r2
 8011d86:	d930      	bls.n	8011dea <_dtoa_r+0x292>
 8011d88:	6079      	str	r1, [r7, #4]
 8011d8a:	4648      	mov	r0, r9
 8011d8c:	9304      	str	r3, [sp, #16]
 8011d8e:	f000 fd39 	bl	8012804 <_Balloc>
 8011d92:	9b04      	ldr	r3, [sp, #16]
 8011d94:	4607      	mov	r7, r0
 8011d96:	2800      	cmp	r0, #0
 8011d98:	d146      	bne.n	8011e28 <_dtoa_r+0x2d0>
 8011d9a:	4b22      	ldr	r3, [pc, #136]	@ (8011e24 <_dtoa_r+0x2cc>)
 8011d9c:	4602      	mov	r2, r0
 8011d9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8011da2:	e6f2      	b.n	8011b8a <_dtoa_r+0x32>
 8011da4:	2201      	movs	r2, #1
 8011da6:	e7dd      	b.n	8011d64 <_dtoa_r+0x20c>
 8011da8:	2200      	movs	r2, #0
 8011daa:	9208      	str	r2, [sp, #32]
 8011dac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011dae:	eb08 0b02 	add.w	fp, r8, r2
 8011db2:	f10b 0a01 	add.w	sl, fp, #1
 8011db6:	4652      	mov	r2, sl
 8011db8:	2a01      	cmp	r2, #1
 8011dba:	bfb8      	it	lt
 8011dbc:	2201      	movlt	r2, #1
 8011dbe:	e7db      	b.n	8011d78 <_dtoa_r+0x220>
 8011dc0:	2201      	movs	r2, #1
 8011dc2:	e7f2      	b.n	8011daa <_dtoa_r+0x252>
 8011dc4:	2401      	movs	r4, #1
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8011dcc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011dd0:	2100      	movs	r1, #0
 8011dd2:	46da      	mov	sl, fp
 8011dd4:	2212      	movs	r2, #18
 8011dd6:	9109      	str	r1, [sp, #36]	@ 0x24
 8011dd8:	e7ce      	b.n	8011d78 <_dtoa_r+0x220>
 8011dda:	2201      	movs	r2, #1
 8011ddc:	9208      	str	r2, [sp, #32]
 8011dde:	e7f5      	b.n	8011dcc <_dtoa_r+0x274>
 8011de0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8011de4:	46da      	mov	sl, fp
 8011de6:	465a      	mov	r2, fp
 8011de8:	e7c6      	b.n	8011d78 <_dtoa_r+0x220>
 8011dea:	3101      	adds	r1, #1
 8011dec:	0040      	lsls	r0, r0, #1
 8011dee:	e7c7      	b.n	8011d80 <_dtoa_r+0x228>
 8011df0:	636f4361 	.word	0x636f4361
 8011df4:	3fd287a7 	.word	0x3fd287a7
 8011df8:	8b60c8b3 	.word	0x8b60c8b3
 8011dfc:	3fc68a28 	.word	0x3fc68a28
 8011e00:	509f79fb 	.word	0x509f79fb
 8011e04:	3fd34413 	.word	0x3fd34413
 8011e08:	080144bf 	.word	0x080144bf
 8011e0c:	080144d6 	.word	0x080144d6
 8011e10:	7ff00000 	.word	0x7ff00000
 8011e14:	080144bb 	.word	0x080144bb
 8011e18:	0801448f 	.word	0x0801448f
 8011e1c:	0801448e 	.word	0x0801448e
 8011e20:	080145d0 	.word	0x080145d0
 8011e24:	0801452e 	.word	0x0801452e
 8011e28:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8011e2c:	f1ba 0f0e 	cmp.w	sl, #14
 8011e30:	6010      	str	r0, [r2, #0]
 8011e32:	d86f      	bhi.n	8011f14 <_dtoa_r+0x3bc>
 8011e34:	2c00      	cmp	r4, #0
 8011e36:	d06d      	beq.n	8011f14 <_dtoa_r+0x3bc>
 8011e38:	f1b8 0f00 	cmp.w	r8, #0
 8011e3c:	f340 80c2 	ble.w	8011fc4 <_dtoa_r+0x46c>
 8011e40:	4aca      	ldr	r2, [pc, #808]	@ (801216c <_dtoa_r+0x614>)
 8011e42:	f008 010f 	and.w	r1, r8, #15
 8011e46:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011e4a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8011e4e:	ed92 7b00 	vldr	d7, [r2]
 8011e52:	ea4f 1128 	mov.w	r1, r8, asr #4
 8011e56:	f000 80a9 	beq.w	8011fac <_dtoa_r+0x454>
 8011e5a:	4ac5      	ldr	r2, [pc, #788]	@ (8012170 <_dtoa_r+0x618>)
 8011e5c:	ed92 6b08 	vldr	d6, [r2, #32]
 8011e60:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011e64:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011e68:	f001 010f 	and.w	r1, r1, #15
 8011e6c:	2203      	movs	r2, #3
 8011e6e:	48c0      	ldr	r0, [pc, #768]	@ (8012170 <_dtoa_r+0x618>)
 8011e70:	2900      	cmp	r1, #0
 8011e72:	f040 809d 	bne.w	8011fb0 <_dtoa_r+0x458>
 8011e76:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011e7a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011e7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e82:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011e84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011e88:	2900      	cmp	r1, #0
 8011e8a:	f000 80c1 	beq.w	8012010 <_dtoa_r+0x4b8>
 8011e8e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8011e92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e9a:	f140 80b9 	bpl.w	8012010 <_dtoa_r+0x4b8>
 8011e9e:	f1ba 0f00 	cmp.w	sl, #0
 8011ea2:	f000 80b5 	beq.w	8012010 <_dtoa_r+0x4b8>
 8011ea6:	f1bb 0f00 	cmp.w	fp, #0
 8011eaa:	dd31      	ble.n	8011f10 <_dtoa_r+0x3b8>
 8011eac:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8011eb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011eb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011eb8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8011ebc:	9104      	str	r1, [sp, #16]
 8011ebe:	3201      	adds	r2, #1
 8011ec0:	465c      	mov	r4, fp
 8011ec2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011ec6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8011eca:	ee07 2a90 	vmov	s15, r2
 8011ece:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011ed2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011ed6:	ee15 2a90 	vmov	r2, s11
 8011eda:	ec51 0b15 	vmov	r0, r1, d5
 8011ede:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8011ee2:	2c00      	cmp	r4, #0
 8011ee4:	f040 8098 	bne.w	8012018 <_dtoa_r+0x4c0>
 8011ee8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011eec:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011ef0:	ec41 0b17 	vmov	d7, r0, r1
 8011ef4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011efc:	f300 8261 	bgt.w	80123c2 <_dtoa_r+0x86a>
 8011f00:	eeb1 7b47 	vneg.f64	d7, d7
 8011f04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f0c:	f100 80f5 	bmi.w	80120fa <_dtoa_r+0x5a2>
 8011f10:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011f14:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011f16:	2a00      	cmp	r2, #0
 8011f18:	f2c0 812c 	blt.w	8012174 <_dtoa_r+0x61c>
 8011f1c:	f1b8 0f0e 	cmp.w	r8, #14
 8011f20:	f300 8128 	bgt.w	8012174 <_dtoa_r+0x61c>
 8011f24:	4b91      	ldr	r3, [pc, #580]	@ (801216c <_dtoa_r+0x614>)
 8011f26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011f2a:	ed93 6b00 	vldr	d6, [r3]
 8011f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	da03      	bge.n	8011f3c <_dtoa_r+0x3e4>
 8011f34:	f1ba 0f00 	cmp.w	sl, #0
 8011f38:	f340 80d2 	ble.w	80120e0 <_dtoa_r+0x588>
 8011f3c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8011f40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f44:	463e      	mov	r6, r7
 8011f46:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011f4a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011f4e:	ee15 3a10 	vmov	r3, s10
 8011f52:	3330      	adds	r3, #48	@ 0x30
 8011f54:	f806 3b01 	strb.w	r3, [r6], #1
 8011f58:	1bf3      	subs	r3, r6, r7
 8011f5a:	459a      	cmp	sl, r3
 8011f5c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011f60:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011f64:	f040 80f8 	bne.w	8012158 <_dtoa_r+0x600>
 8011f68:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011f6c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f74:	f300 80dd 	bgt.w	8012132 <_dtoa_r+0x5da>
 8011f78:	eeb4 7b46 	vcmp.f64	d7, d6
 8011f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f80:	d104      	bne.n	8011f8c <_dtoa_r+0x434>
 8011f82:	ee15 3a10 	vmov	r3, s10
 8011f86:	07db      	lsls	r3, r3, #31
 8011f88:	f100 80d3 	bmi.w	8012132 <_dtoa_r+0x5da>
 8011f8c:	9901      	ldr	r1, [sp, #4]
 8011f8e:	4648      	mov	r0, r9
 8011f90:	f000 fc78 	bl	8012884 <_Bfree>
 8011f94:	2300      	movs	r3, #0
 8011f96:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011f98:	7033      	strb	r3, [r6, #0]
 8011f9a:	f108 0301 	add.w	r3, r8, #1
 8011f9e:	6013      	str	r3, [r2, #0]
 8011fa0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	f000 8304 	beq.w	80125b0 <_dtoa_r+0xa58>
 8011fa8:	601e      	str	r6, [r3, #0]
 8011faa:	e301      	b.n	80125b0 <_dtoa_r+0xa58>
 8011fac:	2202      	movs	r2, #2
 8011fae:	e75e      	b.n	8011e6e <_dtoa_r+0x316>
 8011fb0:	07cc      	lsls	r4, r1, #31
 8011fb2:	d504      	bpl.n	8011fbe <_dtoa_r+0x466>
 8011fb4:	ed90 6b00 	vldr	d6, [r0]
 8011fb8:	3201      	adds	r2, #1
 8011fba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011fbe:	1049      	asrs	r1, r1, #1
 8011fc0:	3008      	adds	r0, #8
 8011fc2:	e755      	b.n	8011e70 <_dtoa_r+0x318>
 8011fc4:	d022      	beq.n	801200c <_dtoa_r+0x4b4>
 8011fc6:	f1c8 0100 	rsb	r1, r8, #0
 8011fca:	4a68      	ldr	r2, [pc, #416]	@ (801216c <_dtoa_r+0x614>)
 8011fcc:	f001 000f 	and.w	r0, r1, #15
 8011fd0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011fd4:	ed92 7b00 	vldr	d7, [r2]
 8011fd8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011fdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011fe0:	4863      	ldr	r0, [pc, #396]	@ (8012170 <_dtoa_r+0x618>)
 8011fe2:	1109      	asrs	r1, r1, #4
 8011fe4:	2400      	movs	r4, #0
 8011fe6:	2202      	movs	r2, #2
 8011fe8:	b929      	cbnz	r1, 8011ff6 <_dtoa_r+0x49e>
 8011fea:	2c00      	cmp	r4, #0
 8011fec:	f43f af49 	beq.w	8011e82 <_dtoa_r+0x32a>
 8011ff0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011ff4:	e745      	b.n	8011e82 <_dtoa_r+0x32a>
 8011ff6:	07ce      	lsls	r6, r1, #31
 8011ff8:	d505      	bpl.n	8012006 <_dtoa_r+0x4ae>
 8011ffa:	ed90 6b00 	vldr	d6, [r0]
 8011ffe:	3201      	adds	r2, #1
 8012000:	2401      	movs	r4, #1
 8012002:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012006:	1049      	asrs	r1, r1, #1
 8012008:	3008      	adds	r0, #8
 801200a:	e7ed      	b.n	8011fe8 <_dtoa_r+0x490>
 801200c:	2202      	movs	r2, #2
 801200e:	e738      	b.n	8011e82 <_dtoa_r+0x32a>
 8012010:	f8cd 8010 	str.w	r8, [sp, #16]
 8012014:	4654      	mov	r4, sl
 8012016:	e754      	b.n	8011ec2 <_dtoa_r+0x36a>
 8012018:	4a54      	ldr	r2, [pc, #336]	@ (801216c <_dtoa_r+0x614>)
 801201a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801201e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012022:	9a08      	ldr	r2, [sp, #32]
 8012024:	ec41 0b17 	vmov	d7, r0, r1
 8012028:	443c      	add	r4, r7
 801202a:	b34a      	cbz	r2, 8012080 <_dtoa_r+0x528>
 801202c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8012030:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012034:	463e      	mov	r6, r7
 8012036:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801203a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801203e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012042:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012046:	ee14 2a90 	vmov	r2, s9
 801204a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801204e:	3230      	adds	r2, #48	@ 0x30
 8012050:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012054:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801205c:	f806 2b01 	strb.w	r2, [r6], #1
 8012060:	d438      	bmi.n	80120d4 <_dtoa_r+0x57c>
 8012062:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012066:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801206a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801206e:	d462      	bmi.n	8012136 <_dtoa_r+0x5de>
 8012070:	42a6      	cmp	r6, r4
 8012072:	f43f af4d 	beq.w	8011f10 <_dtoa_r+0x3b8>
 8012076:	ee27 7b03 	vmul.f64	d7, d7, d3
 801207a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801207e:	e7e0      	b.n	8012042 <_dtoa_r+0x4ea>
 8012080:	4621      	mov	r1, r4
 8012082:	463e      	mov	r6, r7
 8012084:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012088:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801208c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012090:	ee14 2a90 	vmov	r2, s9
 8012094:	3230      	adds	r2, #48	@ 0x30
 8012096:	f806 2b01 	strb.w	r2, [r6], #1
 801209a:	42a6      	cmp	r6, r4
 801209c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80120a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80120a4:	d119      	bne.n	80120da <_dtoa_r+0x582>
 80120a6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80120aa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80120ae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80120b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120b6:	dc3e      	bgt.n	8012136 <_dtoa_r+0x5de>
 80120b8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80120bc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80120c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120c4:	f57f af24 	bpl.w	8011f10 <_dtoa_r+0x3b8>
 80120c8:	460e      	mov	r6, r1
 80120ca:	3901      	subs	r1, #1
 80120cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80120d0:	2b30      	cmp	r3, #48	@ 0x30
 80120d2:	d0f9      	beq.n	80120c8 <_dtoa_r+0x570>
 80120d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80120d8:	e758      	b.n	8011f8c <_dtoa_r+0x434>
 80120da:	ee26 6b03 	vmul.f64	d6, d6, d3
 80120de:	e7d5      	b.n	801208c <_dtoa_r+0x534>
 80120e0:	d10b      	bne.n	80120fa <_dtoa_r+0x5a2>
 80120e2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80120e6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80120ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80120ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80120f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120f6:	f2c0 8161 	blt.w	80123bc <_dtoa_r+0x864>
 80120fa:	2400      	movs	r4, #0
 80120fc:	4625      	mov	r5, r4
 80120fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012100:	43db      	mvns	r3, r3
 8012102:	9304      	str	r3, [sp, #16]
 8012104:	463e      	mov	r6, r7
 8012106:	f04f 0800 	mov.w	r8, #0
 801210a:	4621      	mov	r1, r4
 801210c:	4648      	mov	r0, r9
 801210e:	f000 fbb9 	bl	8012884 <_Bfree>
 8012112:	2d00      	cmp	r5, #0
 8012114:	d0de      	beq.n	80120d4 <_dtoa_r+0x57c>
 8012116:	f1b8 0f00 	cmp.w	r8, #0
 801211a:	d005      	beq.n	8012128 <_dtoa_r+0x5d0>
 801211c:	45a8      	cmp	r8, r5
 801211e:	d003      	beq.n	8012128 <_dtoa_r+0x5d0>
 8012120:	4641      	mov	r1, r8
 8012122:	4648      	mov	r0, r9
 8012124:	f000 fbae 	bl	8012884 <_Bfree>
 8012128:	4629      	mov	r1, r5
 801212a:	4648      	mov	r0, r9
 801212c:	f000 fbaa 	bl	8012884 <_Bfree>
 8012130:	e7d0      	b.n	80120d4 <_dtoa_r+0x57c>
 8012132:	f8cd 8010 	str.w	r8, [sp, #16]
 8012136:	4633      	mov	r3, r6
 8012138:	461e      	mov	r6, r3
 801213a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801213e:	2a39      	cmp	r2, #57	@ 0x39
 8012140:	d106      	bne.n	8012150 <_dtoa_r+0x5f8>
 8012142:	429f      	cmp	r7, r3
 8012144:	d1f8      	bne.n	8012138 <_dtoa_r+0x5e0>
 8012146:	9a04      	ldr	r2, [sp, #16]
 8012148:	3201      	adds	r2, #1
 801214a:	9204      	str	r2, [sp, #16]
 801214c:	2230      	movs	r2, #48	@ 0x30
 801214e:	703a      	strb	r2, [r7, #0]
 8012150:	781a      	ldrb	r2, [r3, #0]
 8012152:	3201      	adds	r2, #1
 8012154:	701a      	strb	r2, [r3, #0]
 8012156:	e7bd      	b.n	80120d4 <_dtoa_r+0x57c>
 8012158:	ee27 7b04 	vmul.f64	d7, d7, d4
 801215c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012164:	f47f aeef 	bne.w	8011f46 <_dtoa_r+0x3ee>
 8012168:	e710      	b.n	8011f8c <_dtoa_r+0x434>
 801216a:	bf00      	nop
 801216c:	080145d0 	.word	0x080145d0
 8012170:	080145a8 	.word	0x080145a8
 8012174:	9908      	ldr	r1, [sp, #32]
 8012176:	2900      	cmp	r1, #0
 8012178:	f000 80e3 	beq.w	8012342 <_dtoa_r+0x7ea>
 801217c:	9907      	ldr	r1, [sp, #28]
 801217e:	2901      	cmp	r1, #1
 8012180:	f300 80c8 	bgt.w	8012314 <_dtoa_r+0x7bc>
 8012184:	2d00      	cmp	r5, #0
 8012186:	f000 80c1 	beq.w	801230c <_dtoa_r+0x7b4>
 801218a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801218e:	9e05      	ldr	r6, [sp, #20]
 8012190:	461c      	mov	r4, r3
 8012192:	9304      	str	r3, [sp, #16]
 8012194:	9b05      	ldr	r3, [sp, #20]
 8012196:	4413      	add	r3, r2
 8012198:	9305      	str	r3, [sp, #20]
 801219a:	9b06      	ldr	r3, [sp, #24]
 801219c:	2101      	movs	r1, #1
 801219e:	4413      	add	r3, r2
 80121a0:	4648      	mov	r0, r9
 80121a2:	9306      	str	r3, [sp, #24]
 80121a4:	f000 fc22 	bl	80129ec <__i2b>
 80121a8:	9b04      	ldr	r3, [sp, #16]
 80121aa:	4605      	mov	r5, r0
 80121ac:	b166      	cbz	r6, 80121c8 <_dtoa_r+0x670>
 80121ae:	9a06      	ldr	r2, [sp, #24]
 80121b0:	2a00      	cmp	r2, #0
 80121b2:	dd09      	ble.n	80121c8 <_dtoa_r+0x670>
 80121b4:	42b2      	cmp	r2, r6
 80121b6:	9905      	ldr	r1, [sp, #20]
 80121b8:	bfa8      	it	ge
 80121ba:	4632      	movge	r2, r6
 80121bc:	1a89      	subs	r1, r1, r2
 80121be:	9105      	str	r1, [sp, #20]
 80121c0:	9906      	ldr	r1, [sp, #24]
 80121c2:	1ab6      	subs	r6, r6, r2
 80121c4:	1a8a      	subs	r2, r1, r2
 80121c6:	9206      	str	r2, [sp, #24]
 80121c8:	b1fb      	cbz	r3, 801220a <_dtoa_r+0x6b2>
 80121ca:	9a08      	ldr	r2, [sp, #32]
 80121cc:	2a00      	cmp	r2, #0
 80121ce:	f000 80bc 	beq.w	801234a <_dtoa_r+0x7f2>
 80121d2:	b19c      	cbz	r4, 80121fc <_dtoa_r+0x6a4>
 80121d4:	4629      	mov	r1, r5
 80121d6:	4622      	mov	r2, r4
 80121d8:	4648      	mov	r0, r9
 80121da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80121dc:	f000 fcc6 	bl	8012b6c <__pow5mult>
 80121e0:	9a01      	ldr	r2, [sp, #4]
 80121e2:	4601      	mov	r1, r0
 80121e4:	4605      	mov	r5, r0
 80121e6:	4648      	mov	r0, r9
 80121e8:	f000 fc16 	bl	8012a18 <__multiply>
 80121ec:	9901      	ldr	r1, [sp, #4]
 80121ee:	9004      	str	r0, [sp, #16]
 80121f0:	4648      	mov	r0, r9
 80121f2:	f000 fb47 	bl	8012884 <_Bfree>
 80121f6:	9a04      	ldr	r2, [sp, #16]
 80121f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80121fa:	9201      	str	r2, [sp, #4]
 80121fc:	1b1a      	subs	r2, r3, r4
 80121fe:	d004      	beq.n	801220a <_dtoa_r+0x6b2>
 8012200:	9901      	ldr	r1, [sp, #4]
 8012202:	4648      	mov	r0, r9
 8012204:	f000 fcb2 	bl	8012b6c <__pow5mult>
 8012208:	9001      	str	r0, [sp, #4]
 801220a:	2101      	movs	r1, #1
 801220c:	4648      	mov	r0, r9
 801220e:	f000 fbed 	bl	80129ec <__i2b>
 8012212:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012214:	4604      	mov	r4, r0
 8012216:	2b00      	cmp	r3, #0
 8012218:	f000 81d0 	beq.w	80125bc <_dtoa_r+0xa64>
 801221c:	461a      	mov	r2, r3
 801221e:	4601      	mov	r1, r0
 8012220:	4648      	mov	r0, r9
 8012222:	f000 fca3 	bl	8012b6c <__pow5mult>
 8012226:	9b07      	ldr	r3, [sp, #28]
 8012228:	2b01      	cmp	r3, #1
 801222a:	4604      	mov	r4, r0
 801222c:	f300 8095 	bgt.w	801235a <_dtoa_r+0x802>
 8012230:	9b02      	ldr	r3, [sp, #8]
 8012232:	2b00      	cmp	r3, #0
 8012234:	f040 808b 	bne.w	801234e <_dtoa_r+0x7f6>
 8012238:	9b03      	ldr	r3, [sp, #12]
 801223a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801223e:	2a00      	cmp	r2, #0
 8012240:	f040 8087 	bne.w	8012352 <_dtoa_r+0x7fa>
 8012244:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012248:	0d12      	lsrs	r2, r2, #20
 801224a:	0512      	lsls	r2, r2, #20
 801224c:	2a00      	cmp	r2, #0
 801224e:	f000 8082 	beq.w	8012356 <_dtoa_r+0x7fe>
 8012252:	9b05      	ldr	r3, [sp, #20]
 8012254:	3301      	adds	r3, #1
 8012256:	9305      	str	r3, [sp, #20]
 8012258:	9b06      	ldr	r3, [sp, #24]
 801225a:	3301      	adds	r3, #1
 801225c:	9306      	str	r3, [sp, #24]
 801225e:	2301      	movs	r3, #1
 8012260:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012262:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012264:	2b00      	cmp	r3, #0
 8012266:	f000 81af 	beq.w	80125c8 <_dtoa_r+0xa70>
 801226a:	6922      	ldr	r2, [r4, #16]
 801226c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012270:	6910      	ldr	r0, [r2, #16]
 8012272:	f000 fb6f 	bl	8012954 <__hi0bits>
 8012276:	f1c0 0020 	rsb	r0, r0, #32
 801227a:	9b06      	ldr	r3, [sp, #24]
 801227c:	4418      	add	r0, r3
 801227e:	f010 001f 	ands.w	r0, r0, #31
 8012282:	d076      	beq.n	8012372 <_dtoa_r+0x81a>
 8012284:	f1c0 0220 	rsb	r2, r0, #32
 8012288:	2a04      	cmp	r2, #4
 801228a:	dd69      	ble.n	8012360 <_dtoa_r+0x808>
 801228c:	9b05      	ldr	r3, [sp, #20]
 801228e:	f1c0 001c 	rsb	r0, r0, #28
 8012292:	4403      	add	r3, r0
 8012294:	9305      	str	r3, [sp, #20]
 8012296:	9b06      	ldr	r3, [sp, #24]
 8012298:	4406      	add	r6, r0
 801229a:	4403      	add	r3, r0
 801229c:	9306      	str	r3, [sp, #24]
 801229e:	9b05      	ldr	r3, [sp, #20]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	dd05      	ble.n	80122b0 <_dtoa_r+0x758>
 80122a4:	9901      	ldr	r1, [sp, #4]
 80122a6:	461a      	mov	r2, r3
 80122a8:	4648      	mov	r0, r9
 80122aa:	f000 fcb9 	bl	8012c20 <__lshift>
 80122ae:	9001      	str	r0, [sp, #4]
 80122b0:	9b06      	ldr	r3, [sp, #24]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	dd05      	ble.n	80122c2 <_dtoa_r+0x76a>
 80122b6:	4621      	mov	r1, r4
 80122b8:	461a      	mov	r2, r3
 80122ba:	4648      	mov	r0, r9
 80122bc:	f000 fcb0 	bl	8012c20 <__lshift>
 80122c0:	4604      	mov	r4, r0
 80122c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d056      	beq.n	8012376 <_dtoa_r+0x81e>
 80122c8:	9801      	ldr	r0, [sp, #4]
 80122ca:	4621      	mov	r1, r4
 80122cc:	f000 fd14 	bl	8012cf8 <__mcmp>
 80122d0:	2800      	cmp	r0, #0
 80122d2:	da50      	bge.n	8012376 <_dtoa_r+0x81e>
 80122d4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80122d8:	9304      	str	r3, [sp, #16]
 80122da:	9901      	ldr	r1, [sp, #4]
 80122dc:	2300      	movs	r3, #0
 80122de:	220a      	movs	r2, #10
 80122e0:	4648      	mov	r0, r9
 80122e2:	f000 faf1 	bl	80128c8 <__multadd>
 80122e6:	9b08      	ldr	r3, [sp, #32]
 80122e8:	9001      	str	r0, [sp, #4]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	f000 816e 	beq.w	80125cc <_dtoa_r+0xa74>
 80122f0:	4629      	mov	r1, r5
 80122f2:	2300      	movs	r3, #0
 80122f4:	220a      	movs	r2, #10
 80122f6:	4648      	mov	r0, r9
 80122f8:	f000 fae6 	bl	80128c8 <__multadd>
 80122fc:	f1bb 0f00 	cmp.w	fp, #0
 8012300:	4605      	mov	r5, r0
 8012302:	dc64      	bgt.n	80123ce <_dtoa_r+0x876>
 8012304:	9b07      	ldr	r3, [sp, #28]
 8012306:	2b02      	cmp	r3, #2
 8012308:	dc3e      	bgt.n	8012388 <_dtoa_r+0x830>
 801230a:	e060      	b.n	80123ce <_dtoa_r+0x876>
 801230c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801230e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012312:	e73c      	b.n	801218e <_dtoa_r+0x636>
 8012314:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8012318:	42a3      	cmp	r3, r4
 801231a:	bfbf      	itttt	lt
 801231c:	1ae2      	sublt	r2, r4, r3
 801231e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012320:	189b      	addlt	r3, r3, r2
 8012322:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8012324:	bfae      	itee	ge
 8012326:	1b1c      	subge	r4, r3, r4
 8012328:	4623      	movlt	r3, r4
 801232a:	2400      	movlt	r4, #0
 801232c:	f1ba 0f00 	cmp.w	sl, #0
 8012330:	bfb5      	itete	lt
 8012332:	9a05      	ldrlt	r2, [sp, #20]
 8012334:	9e05      	ldrge	r6, [sp, #20]
 8012336:	eba2 060a 	sublt.w	r6, r2, sl
 801233a:	4652      	movge	r2, sl
 801233c:	bfb8      	it	lt
 801233e:	2200      	movlt	r2, #0
 8012340:	e727      	b.n	8012192 <_dtoa_r+0x63a>
 8012342:	9e05      	ldr	r6, [sp, #20]
 8012344:	9d08      	ldr	r5, [sp, #32]
 8012346:	461c      	mov	r4, r3
 8012348:	e730      	b.n	80121ac <_dtoa_r+0x654>
 801234a:	461a      	mov	r2, r3
 801234c:	e758      	b.n	8012200 <_dtoa_r+0x6a8>
 801234e:	2300      	movs	r3, #0
 8012350:	e786      	b.n	8012260 <_dtoa_r+0x708>
 8012352:	9b02      	ldr	r3, [sp, #8]
 8012354:	e784      	b.n	8012260 <_dtoa_r+0x708>
 8012356:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012358:	e783      	b.n	8012262 <_dtoa_r+0x70a>
 801235a:	2300      	movs	r3, #0
 801235c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801235e:	e784      	b.n	801226a <_dtoa_r+0x712>
 8012360:	d09d      	beq.n	801229e <_dtoa_r+0x746>
 8012362:	9b05      	ldr	r3, [sp, #20]
 8012364:	321c      	adds	r2, #28
 8012366:	4413      	add	r3, r2
 8012368:	9305      	str	r3, [sp, #20]
 801236a:	9b06      	ldr	r3, [sp, #24]
 801236c:	4416      	add	r6, r2
 801236e:	4413      	add	r3, r2
 8012370:	e794      	b.n	801229c <_dtoa_r+0x744>
 8012372:	4602      	mov	r2, r0
 8012374:	e7f5      	b.n	8012362 <_dtoa_r+0x80a>
 8012376:	f1ba 0f00 	cmp.w	sl, #0
 801237a:	f8cd 8010 	str.w	r8, [sp, #16]
 801237e:	46d3      	mov	fp, sl
 8012380:	dc21      	bgt.n	80123c6 <_dtoa_r+0x86e>
 8012382:	9b07      	ldr	r3, [sp, #28]
 8012384:	2b02      	cmp	r3, #2
 8012386:	dd1e      	ble.n	80123c6 <_dtoa_r+0x86e>
 8012388:	f1bb 0f00 	cmp.w	fp, #0
 801238c:	f47f aeb7 	bne.w	80120fe <_dtoa_r+0x5a6>
 8012390:	4621      	mov	r1, r4
 8012392:	465b      	mov	r3, fp
 8012394:	2205      	movs	r2, #5
 8012396:	4648      	mov	r0, r9
 8012398:	f000 fa96 	bl	80128c8 <__multadd>
 801239c:	4601      	mov	r1, r0
 801239e:	4604      	mov	r4, r0
 80123a0:	9801      	ldr	r0, [sp, #4]
 80123a2:	f000 fca9 	bl	8012cf8 <__mcmp>
 80123a6:	2800      	cmp	r0, #0
 80123a8:	f77f aea9 	ble.w	80120fe <_dtoa_r+0x5a6>
 80123ac:	463e      	mov	r6, r7
 80123ae:	2331      	movs	r3, #49	@ 0x31
 80123b0:	f806 3b01 	strb.w	r3, [r6], #1
 80123b4:	9b04      	ldr	r3, [sp, #16]
 80123b6:	3301      	adds	r3, #1
 80123b8:	9304      	str	r3, [sp, #16]
 80123ba:	e6a4      	b.n	8012106 <_dtoa_r+0x5ae>
 80123bc:	f8cd 8010 	str.w	r8, [sp, #16]
 80123c0:	4654      	mov	r4, sl
 80123c2:	4625      	mov	r5, r4
 80123c4:	e7f2      	b.n	80123ac <_dtoa_r+0x854>
 80123c6:	9b08      	ldr	r3, [sp, #32]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	f000 8103 	beq.w	80125d4 <_dtoa_r+0xa7c>
 80123ce:	2e00      	cmp	r6, #0
 80123d0:	dd05      	ble.n	80123de <_dtoa_r+0x886>
 80123d2:	4629      	mov	r1, r5
 80123d4:	4632      	mov	r2, r6
 80123d6:	4648      	mov	r0, r9
 80123d8:	f000 fc22 	bl	8012c20 <__lshift>
 80123dc:	4605      	mov	r5, r0
 80123de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d058      	beq.n	8012496 <_dtoa_r+0x93e>
 80123e4:	6869      	ldr	r1, [r5, #4]
 80123e6:	4648      	mov	r0, r9
 80123e8:	f000 fa0c 	bl	8012804 <_Balloc>
 80123ec:	4606      	mov	r6, r0
 80123ee:	b928      	cbnz	r0, 80123fc <_dtoa_r+0x8a4>
 80123f0:	4b82      	ldr	r3, [pc, #520]	@ (80125fc <_dtoa_r+0xaa4>)
 80123f2:	4602      	mov	r2, r0
 80123f4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80123f8:	f7ff bbc7 	b.w	8011b8a <_dtoa_r+0x32>
 80123fc:	692a      	ldr	r2, [r5, #16]
 80123fe:	3202      	adds	r2, #2
 8012400:	0092      	lsls	r2, r2, #2
 8012402:	f105 010c 	add.w	r1, r5, #12
 8012406:	300c      	adds	r0, #12
 8012408:	f000 ffac 	bl	8013364 <memcpy>
 801240c:	2201      	movs	r2, #1
 801240e:	4631      	mov	r1, r6
 8012410:	4648      	mov	r0, r9
 8012412:	f000 fc05 	bl	8012c20 <__lshift>
 8012416:	1c7b      	adds	r3, r7, #1
 8012418:	9305      	str	r3, [sp, #20]
 801241a:	eb07 030b 	add.w	r3, r7, fp
 801241e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012420:	9b02      	ldr	r3, [sp, #8]
 8012422:	f003 0301 	and.w	r3, r3, #1
 8012426:	46a8      	mov	r8, r5
 8012428:	9308      	str	r3, [sp, #32]
 801242a:	4605      	mov	r5, r0
 801242c:	9b05      	ldr	r3, [sp, #20]
 801242e:	9801      	ldr	r0, [sp, #4]
 8012430:	4621      	mov	r1, r4
 8012432:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8012436:	f7ff fb06 	bl	8011a46 <quorem>
 801243a:	4641      	mov	r1, r8
 801243c:	9002      	str	r0, [sp, #8]
 801243e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012442:	9801      	ldr	r0, [sp, #4]
 8012444:	f000 fc58 	bl	8012cf8 <__mcmp>
 8012448:	462a      	mov	r2, r5
 801244a:	9006      	str	r0, [sp, #24]
 801244c:	4621      	mov	r1, r4
 801244e:	4648      	mov	r0, r9
 8012450:	f000 fc6e 	bl	8012d30 <__mdiff>
 8012454:	68c2      	ldr	r2, [r0, #12]
 8012456:	4606      	mov	r6, r0
 8012458:	b9fa      	cbnz	r2, 801249a <_dtoa_r+0x942>
 801245a:	4601      	mov	r1, r0
 801245c:	9801      	ldr	r0, [sp, #4]
 801245e:	f000 fc4b 	bl	8012cf8 <__mcmp>
 8012462:	4602      	mov	r2, r0
 8012464:	4631      	mov	r1, r6
 8012466:	4648      	mov	r0, r9
 8012468:	920a      	str	r2, [sp, #40]	@ 0x28
 801246a:	f000 fa0b 	bl	8012884 <_Bfree>
 801246e:	9b07      	ldr	r3, [sp, #28]
 8012470:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012472:	9e05      	ldr	r6, [sp, #20]
 8012474:	ea43 0102 	orr.w	r1, r3, r2
 8012478:	9b08      	ldr	r3, [sp, #32]
 801247a:	4319      	orrs	r1, r3
 801247c:	d10f      	bne.n	801249e <_dtoa_r+0x946>
 801247e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012482:	d028      	beq.n	80124d6 <_dtoa_r+0x97e>
 8012484:	9b06      	ldr	r3, [sp, #24]
 8012486:	2b00      	cmp	r3, #0
 8012488:	dd02      	ble.n	8012490 <_dtoa_r+0x938>
 801248a:	9b02      	ldr	r3, [sp, #8]
 801248c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8012490:	f88b a000 	strb.w	sl, [fp]
 8012494:	e639      	b.n	801210a <_dtoa_r+0x5b2>
 8012496:	4628      	mov	r0, r5
 8012498:	e7bd      	b.n	8012416 <_dtoa_r+0x8be>
 801249a:	2201      	movs	r2, #1
 801249c:	e7e2      	b.n	8012464 <_dtoa_r+0x90c>
 801249e:	9b06      	ldr	r3, [sp, #24]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	db04      	blt.n	80124ae <_dtoa_r+0x956>
 80124a4:	9907      	ldr	r1, [sp, #28]
 80124a6:	430b      	orrs	r3, r1
 80124a8:	9908      	ldr	r1, [sp, #32]
 80124aa:	430b      	orrs	r3, r1
 80124ac:	d120      	bne.n	80124f0 <_dtoa_r+0x998>
 80124ae:	2a00      	cmp	r2, #0
 80124b0:	ddee      	ble.n	8012490 <_dtoa_r+0x938>
 80124b2:	9901      	ldr	r1, [sp, #4]
 80124b4:	2201      	movs	r2, #1
 80124b6:	4648      	mov	r0, r9
 80124b8:	f000 fbb2 	bl	8012c20 <__lshift>
 80124bc:	4621      	mov	r1, r4
 80124be:	9001      	str	r0, [sp, #4]
 80124c0:	f000 fc1a 	bl	8012cf8 <__mcmp>
 80124c4:	2800      	cmp	r0, #0
 80124c6:	dc03      	bgt.n	80124d0 <_dtoa_r+0x978>
 80124c8:	d1e2      	bne.n	8012490 <_dtoa_r+0x938>
 80124ca:	f01a 0f01 	tst.w	sl, #1
 80124ce:	d0df      	beq.n	8012490 <_dtoa_r+0x938>
 80124d0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80124d4:	d1d9      	bne.n	801248a <_dtoa_r+0x932>
 80124d6:	2339      	movs	r3, #57	@ 0x39
 80124d8:	f88b 3000 	strb.w	r3, [fp]
 80124dc:	4633      	mov	r3, r6
 80124de:	461e      	mov	r6, r3
 80124e0:	3b01      	subs	r3, #1
 80124e2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80124e6:	2a39      	cmp	r2, #57	@ 0x39
 80124e8:	d053      	beq.n	8012592 <_dtoa_r+0xa3a>
 80124ea:	3201      	adds	r2, #1
 80124ec:	701a      	strb	r2, [r3, #0]
 80124ee:	e60c      	b.n	801210a <_dtoa_r+0x5b2>
 80124f0:	2a00      	cmp	r2, #0
 80124f2:	dd07      	ble.n	8012504 <_dtoa_r+0x9ac>
 80124f4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80124f8:	d0ed      	beq.n	80124d6 <_dtoa_r+0x97e>
 80124fa:	f10a 0301 	add.w	r3, sl, #1
 80124fe:	f88b 3000 	strb.w	r3, [fp]
 8012502:	e602      	b.n	801210a <_dtoa_r+0x5b2>
 8012504:	9b05      	ldr	r3, [sp, #20]
 8012506:	9a05      	ldr	r2, [sp, #20]
 8012508:	f803 ac01 	strb.w	sl, [r3, #-1]
 801250c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801250e:	4293      	cmp	r3, r2
 8012510:	d029      	beq.n	8012566 <_dtoa_r+0xa0e>
 8012512:	9901      	ldr	r1, [sp, #4]
 8012514:	2300      	movs	r3, #0
 8012516:	220a      	movs	r2, #10
 8012518:	4648      	mov	r0, r9
 801251a:	f000 f9d5 	bl	80128c8 <__multadd>
 801251e:	45a8      	cmp	r8, r5
 8012520:	9001      	str	r0, [sp, #4]
 8012522:	f04f 0300 	mov.w	r3, #0
 8012526:	f04f 020a 	mov.w	r2, #10
 801252a:	4641      	mov	r1, r8
 801252c:	4648      	mov	r0, r9
 801252e:	d107      	bne.n	8012540 <_dtoa_r+0x9e8>
 8012530:	f000 f9ca 	bl	80128c8 <__multadd>
 8012534:	4680      	mov	r8, r0
 8012536:	4605      	mov	r5, r0
 8012538:	9b05      	ldr	r3, [sp, #20]
 801253a:	3301      	adds	r3, #1
 801253c:	9305      	str	r3, [sp, #20]
 801253e:	e775      	b.n	801242c <_dtoa_r+0x8d4>
 8012540:	f000 f9c2 	bl	80128c8 <__multadd>
 8012544:	4629      	mov	r1, r5
 8012546:	4680      	mov	r8, r0
 8012548:	2300      	movs	r3, #0
 801254a:	220a      	movs	r2, #10
 801254c:	4648      	mov	r0, r9
 801254e:	f000 f9bb 	bl	80128c8 <__multadd>
 8012552:	4605      	mov	r5, r0
 8012554:	e7f0      	b.n	8012538 <_dtoa_r+0x9e0>
 8012556:	f1bb 0f00 	cmp.w	fp, #0
 801255a:	bfcc      	ite	gt
 801255c:	465e      	movgt	r6, fp
 801255e:	2601      	movle	r6, #1
 8012560:	443e      	add	r6, r7
 8012562:	f04f 0800 	mov.w	r8, #0
 8012566:	9901      	ldr	r1, [sp, #4]
 8012568:	2201      	movs	r2, #1
 801256a:	4648      	mov	r0, r9
 801256c:	f000 fb58 	bl	8012c20 <__lshift>
 8012570:	4621      	mov	r1, r4
 8012572:	9001      	str	r0, [sp, #4]
 8012574:	f000 fbc0 	bl	8012cf8 <__mcmp>
 8012578:	2800      	cmp	r0, #0
 801257a:	dcaf      	bgt.n	80124dc <_dtoa_r+0x984>
 801257c:	d102      	bne.n	8012584 <_dtoa_r+0xa2c>
 801257e:	f01a 0f01 	tst.w	sl, #1
 8012582:	d1ab      	bne.n	80124dc <_dtoa_r+0x984>
 8012584:	4633      	mov	r3, r6
 8012586:	461e      	mov	r6, r3
 8012588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801258c:	2a30      	cmp	r2, #48	@ 0x30
 801258e:	d0fa      	beq.n	8012586 <_dtoa_r+0xa2e>
 8012590:	e5bb      	b.n	801210a <_dtoa_r+0x5b2>
 8012592:	429f      	cmp	r7, r3
 8012594:	d1a3      	bne.n	80124de <_dtoa_r+0x986>
 8012596:	9b04      	ldr	r3, [sp, #16]
 8012598:	3301      	adds	r3, #1
 801259a:	9304      	str	r3, [sp, #16]
 801259c:	2331      	movs	r3, #49	@ 0x31
 801259e:	703b      	strb	r3, [r7, #0]
 80125a0:	e5b3      	b.n	801210a <_dtoa_r+0x5b2>
 80125a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80125a4:	4f16      	ldr	r7, [pc, #88]	@ (8012600 <_dtoa_r+0xaa8>)
 80125a6:	b11b      	cbz	r3, 80125b0 <_dtoa_r+0xa58>
 80125a8:	f107 0308 	add.w	r3, r7, #8
 80125ac:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80125ae:	6013      	str	r3, [r2, #0]
 80125b0:	4638      	mov	r0, r7
 80125b2:	b011      	add	sp, #68	@ 0x44
 80125b4:	ecbd 8b02 	vpop	{d8}
 80125b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125bc:	9b07      	ldr	r3, [sp, #28]
 80125be:	2b01      	cmp	r3, #1
 80125c0:	f77f ae36 	ble.w	8012230 <_dtoa_r+0x6d8>
 80125c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80125c8:	2001      	movs	r0, #1
 80125ca:	e656      	b.n	801227a <_dtoa_r+0x722>
 80125cc:	f1bb 0f00 	cmp.w	fp, #0
 80125d0:	f77f aed7 	ble.w	8012382 <_dtoa_r+0x82a>
 80125d4:	463e      	mov	r6, r7
 80125d6:	9801      	ldr	r0, [sp, #4]
 80125d8:	4621      	mov	r1, r4
 80125da:	f7ff fa34 	bl	8011a46 <quorem>
 80125de:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80125e2:	f806 ab01 	strb.w	sl, [r6], #1
 80125e6:	1bf2      	subs	r2, r6, r7
 80125e8:	4593      	cmp	fp, r2
 80125ea:	ddb4      	ble.n	8012556 <_dtoa_r+0x9fe>
 80125ec:	9901      	ldr	r1, [sp, #4]
 80125ee:	2300      	movs	r3, #0
 80125f0:	220a      	movs	r2, #10
 80125f2:	4648      	mov	r0, r9
 80125f4:	f000 f968 	bl	80128c8 <__multadd>
 80125f8:	9001      	str	r0, [sp, #4]
 80125fa:	e7ec      	b.n	80125d6 <_dtoa_r+0xa7e>
 80125fc:	0801452e 	.word	0x0801452e
 8012600:	080144b2 	.word	0x080144b2

08012604 <_free_r>:
 8012604:	b538      	push	{r3, r4, r5, lr}
 8012606:	4605      	mov	r5, r0
 8012608:	2900      	cmp	r1, #0
 801260a:	d041      	beq.n	8012690 <_free_r+0x8c>
 801260c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012610:	1f0c      	subs	r4, r1, #4
 8012612:	2b00      	cmp	r3, #0
 8012614:	bfb8      	it	lt
 8012616:	18e4      	addlt	r4, r4, r3
 8012618:	f000 f8e8 	bl	80127ec <__malloc_lock>
 801261c:	4a1d      	ldr	r2, [pc, #116]	@ (8012694 <_free_r+0x90>)
 801261e:	6813      	ldr	r3, [r2, #0]
 8012620:	b933      	cbnz	r3, 8012630 <_free_r+0x2c>
 8012622:	6063      	str	r3, [r4, #4]
 8012624:	6014      	str	r4, [r2, #0]
 8012626:	4628      	mov	r0, r5
 8012628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801262c:	f000 b8e4 	b.w	80127f8 <__malloc_unlock>
 8012630:	42a3      	cmp	r3, r4
 8012632:	d908      	bls.n	8012646 <_free_r+0x42>
 8012634:	6820      	ldr	r0, [r4, #0]
 8012636:	1821      	adds	r1, r4, r0
 8012638:	428b      	cmp	r3, r1
 801263a:	bf01      	itttt	eq
 801263c:	6819      	ldreq	r1, [r3, #0]
 801263e:	685b      	ldreq	r3, [r3, #4]
 8012640:	1809      	addeq	r1, r1, r0
 8012642:	6021      	streq	r1, [r4, #0]
 8012644:	e7ed      	b.n	8012622 <_free_r+0x1e>
 8012646:	461a      	mov	r2, r3
 8012648:	685b      	ldr	r3, [r3, #4]
 801264a:	b10b      	cbz	r3, 8012650 <_free_r+0x4c>
 801264c:	42a3      	cmp	r3, r4
 801264e:	d9fa      	bls.n	8012646 <_free_r+0x42>
 8012650:	6811      	ldr	r1, [r2, #0]
 8012652:	1850      	adds	r0, r2, r1
 8012654:	42a0      	cmp	r0, r4
 8012656:	d10b      	bne.n	8012670 <_free_r+0x6c>
 8012658:	6820      	ldr	r0, [r4, #0]
 801265a:	4401      	add	r1, r0
 801265c:	1850      	adds	r0, r2, r1
 801265e:	4283      	cmp	r3, r0
 8012660:	6011      	str	r1, [r2, #0]
 8012662:	d1e0      	bne.n	8012626 <_free_r+0x22>
 8012664:	6818      	ldr	r0, [r3, #0]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	6053      	str	r3, [r2, #4]
 801266a:	4408      	add	r0, r1
 801266c:	6010      	str	r0, [r2, #0]
 801266e:	e7da      	b.n	8012626 <_free_r+0x22>
 8012670:	d902      	bls.n	8012678 <_free_r+0x74>
 8012672:	230c      	movs	r3, #12
 8012674:	602b      	str	r3, [r5, #0]
 8012676:	e7d6      	b.n	8012626 <_free_r+0x22>
 8012678:	6820      	ldr	r0, [r4, #0]
 801267a:	1821      	adds	r1, r4, r0
 801267c:	428b      	cmp	r3, r1
 801267e:	bf04      	itt	eq
 8012680:	6819      	ldreq	r1, [r3, #0]
 8012682:	685b      	ldreq	r3, [r3, #4]
 8012684:	6063      	str	r3, [r4, #4]
 8012686:	bf04      	itt	eq
 8012688:	1809      	addeq	r1, r1, r0
 801268a:	6021      	streq	r1, [r4, #0]
 801268c:	6054      	str	r4, [r2, #4]
 801268e:	e7ca      	b.n	8012626 <_free_r+0x22>
 8012690:	bd38      	pop	{r3, r4, r5, pc}
 8012692:	bf00      	nop
 8012694:	240011b8 	.word	0x240011b8

08012698 <malloc>:
 8012698:	4b02      	ldr	r3, [pc, #8]	@ (80126a4 <malloc+0xc>)
 801269a:	4601      	mov	r1, r0
 801269c:	6818      	ldr	r0, [r3, #0]
 801269e:	f000 b825 	b.w	80126ec <_malloc_r>
 80126a2:	bf00      	nop
 80126a4:	24000054 	.word	0x24000054

080126a8 <sbrk_aligned>:
 80126a8:	b570      	push	{r4, r5, r6, lr}
 80126aa:	4e0f      	ldr	r6, [pc, #60]	@ (80126e8 <sbrk_aligned+0x40>)
 80126ac:	460c      	mov	r4, r1
 80126ae:	6831      	ldr	r1, [r6, #0]
 80126b0:	4605      	mov	r5, r0
 80126b2:	b911      	cbnz	r1, 80126ba <sbrk_aligned+0x12>
 80126b4:	f000 fe46 	bl	8013344 <_sbrk_r>
 80126b8:	6030      	str	r0, [r6, #0]
 80126ba:	4621      	mov	r1, r4
 80126bc:	4628      	mov	r0, r5
 80126be:	f000 fe41 	bl	8013344 <_sbrk_r>
 80126c2:	1c43      	adds	r3, r0, #1
 80126c4:	d103      	bne.n	80126ce <sbrk_aligned+0x26>
 80126c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80126ca:	4620      	mov	r0, r4
 80126cc:	bd70      	pop	{r4, r5, r6, pc}
 80126ce:	1cc4      	adds	r4, r0, #3
 80126d0:	f024 0403 	bic.w	r4, r4, #3
 80126d4:	42a0      	cmp	r0, r4
 80126d6:	d0f8      	beq.n	80126ca <sbrk_aligned+0x22>
 80126d8:	1a21      	subs	r1, r4, r0
 80126da:	4628      	mov	r0, r5
 80126dc:	f000 fe32 	bl	8013344 <_sbrk_r>
 80126e0:	3001      	adds	r0, #1
 80126e2:	d1f2      	bne.n	80126ca <sbrk_aligned+0x22>
 80126e4:	e7ef      	b.n	80126c6 <sbrk_aligned+0x1e>
 80126e6:	bf00      	nop
 80126e8:	240011b4 	.word	0x240011b4

080126ec <_malloc_r>:
 80126ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126f0:	1ccd      	adds	r5, r1, #3
 80126f2:	f025 0503 	bic.w	r5, r5, #3
 80126f6:	3508      	adds	r5, #8
 80126f8:	2d0c      	cmp	r5, #12
 80126fa:	bf38      	it	cc
 80126fc:	250c      	movcc	r5, #12
 80126fe:	2d00      	cmp	r5, #0
 8012700:	4606      	mov	r6, r0
 8012702:	db01      	blt.n	8012708 <_malloc_r+0x1c>
 8012704:	42a9      	cmp	r1, r5
 8012706:	d904      	bls.n	8012712 <_malloc_r+0x26>
 8012708:	230c      	movs	r3, #12
 801270a:	6033      	str	r3, [r6, #0]
 801270c:	2000      	movs	r0, #0
 801270e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012712:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80127e8 <_malloc_r+0xfc>
 8012716:	f000 f869 	bl	80127ec <__malloc_lock>
 801271a:	f8d8 3000 	ldr.w	r3, [r8]
 801271e:	461c      	mov	r4, r3
 8012720:	bb44      	cbnz	r4, 8012774 <_malloc_r+0x88>
 8012722:	4629      	mov	r1, r5
 8012724:	4630      	mov	r0, r6
 8012726:	f7ff ffbf 	bl	80126a8 <sbrk_aligned>
 801272a:	1c43      	adds	r3, r0, #1
 801272c:	4604      	mov	r4, r0
 801272e:	d158      	bne.n	80127e2 <_malloc_r+0xf6>
 8012730:	f8d8 4000 	ldr.w	r4, [r8]
 8012734:	4627      	mov	r7, r4
 8012736:	2f00      	cmp	r7, #0
 8012738:	d143      	bne.n	80127c2 <_malloc_r+0xd6>
 801273a:	2c00      	cmp	r4, #0
 801273c:	d04b      	beq.n	80127d6 <_malloc_r+0xea>
 801273e:	6823      	ldr	r3, [r4, #0]
 8012740:	4639      	mov	r1, r7
 8012742:	4630      	mov	r0, r6
 8012744:	eb04 0903 	add.w	r9, r4, r3
 8012748:	f000 fdfc 	bl	8013344 <_sbrk_r>
 801274c:	4581      	cmp	r9, r0
 801274e:	d142      	bne.n	80127d6 <_malloc_r+0xea>
 8012750:	6821      	ldr	r1, [r4, #0]
 8012752:	1a6d      	subs	r5, r5, r1
 8012754:	4629      	mov	r1, r5
 8012756:	4630      	mov	r0, r6
 8012758:	f7ff ffa6 	bl	80126a8 <sbrk_aligned>
 801275c:	3001      	adds	r0, #1
 801275e:	d03a      	beq.n	80127d6 <_malloc_r+0xea>
 8012760:	6823      	ldr	r3, [r4, #0]
 8012762:	442b      	add	r3, r5
 8012764:	6023      	str	r3, [r4, #0]
 8012766:	f8d8 3000 	ldr.w	r3, [r8]
 801276a:	685a      	ldr	r2, [r3, #4]
 801276c:	bb62      	cbnz	r2, 80127c8 <_malloc_r+0xdc>
 801276e:	f8c8 7000 	str.w	r7, [r8]
 8012772:	e00f      	b.n	8012794 <_malloc_r+0xa8>
 8012774:	6822      	ldr	r2, [r4, #0]
 8012776:	1b52      	subs	r2, r2, r5
 8012778:	d420      	bmi.n	80127bc <_malloc_r+0xd0>
 801277a:	2a0b      	cmp	r2, #11
 801277c:	d917      	bls.n	80127ae <_malloc_r+0xc2>
 801277e:	1961      	adds	r1, r4, r5
 8012780:	42a3      	cmp	r3, r4
 8012782:	6025      	str	r5, [r4, #0]
 8012784:	bf18      	it	ne
 8012786:	6059      	strne	r1, [r3, #4]
 8012788:	6863      	ldr	r3, [r4, #4]
 801278a:	bf08      	it	eq
 801278c:	f8c8 1000 	streq.w	r1, [r8]
 8012790:	5162      	str	r2, [r4, r5]
 8012792:	604b      	str	r3, [r1, #4]
 8012794:	4630      	mov	r0, r6
 8012796:	f000 f82f 	bl	80127f8 <__malloc_unlock>
 801279a:	f104 000b 	add.w	r0, r4, #11
 801279e:	1d23      	adds	r3, r4, #4
 80127a0:	f020 0007 	bic.w	r0, r0, #7
 80127a4:	1ac2      	subs	r2, r0, r3
 80127a6:	bf1c      	itt	ne
 80127a8:	1a1b      	subne	r3, r3, r0
 80127aa:	50a3      	strne	r3, [r4, r2]
 80127ac:	e7af      	b.n	801270e <_malloc_r+0x22>
 80127ae:	6862      	ldr	r2, [r4, #4]
 80127b0:	42a3      	cmp	r3, r4
 80127b2:	bf0c      	ite	eq
 80127b4:	f8c8 2000 	streq.w	r2, [r8]
 80127b8:	605a      	strne	r2, [r3, #4]
 80127ba:	e7eb      	b.n	8012794 <_malloc_r+0xa8>
 80127bc:	4623      	mov	r3, r4
 80127be:	6864      	ldr	r4, [r4, #4]
 80127c0:	e7ae      	b.n	8012720 <_malloc_r+0x34>
 80127c2:	463c      	mov	r4, r7
 80127c4:	687f      	ldr	r7, [r7, #4]
 80127c6:	e7b6      	b.n	8012736 <_malloc_r+0x4a>
 80127c8:	461a      	mov	r2, r3
 80127ca:	685b      	ldr	r3, [r3, #4]
 80127cc:	42a3      	cmp	r3, r4
 80127ce:	d1fb      	bne.n	80127c8 <_malloc_r+0xdc>
 80127d0:	2300      	movs	r3, #0
 80127d2:	6053      	str	r3, [r2, #4]
 80127d4:	e7de      	b.n	8012794 <_malloc_r+0xa8>
 80127d6:	230c      	movs	r3, #12
 80127d8:	6033      	str	r3, [r6, #0]
 80127da:	4630      	mov	r0, r6
 80127dc:	f000 f80c 	bl	80127f8 <__malloc_unlock>
 80127e0:	e794      	b.n	801270c <_malloc_r+0x20>
 80127e2:	6005      	str	r5, [r0, #0]
 80127e4:	e7d6      	b.n	8012794 <_malloc_r+0xa8>
 80127e6:	bf00      	nop
 80127e8:	240011b8 	.word	0x240011b8

080127ec <__malloc_lock>:
 80127ec:	4801      	ldr	r0, [pc, #4]	@ (80127f4 <__malloc_lock+0x8>)
 80127ee:	f7ff b920 	b.w	8011a32 <__retarget_lock_acquire_recursive>
 80127f2:	bf00      	nop
 80127f4:	240011b0 	.word	0x240011b0

080127f8 <__malloc_unlock>:
 80127f8:	4801      	ldr	r0, [pc, #4]	@ (8012800 <__malloc_unlock+0x8>)
 80127fa:	f7ff b91b 	b.w	8011a34 <__retarget_lock_release_recursive>
 80127fe:	bf00      	nop
 8012800:	240011b0 	.word	0x240011b0

08012804 <_Balloc>:
 8012804:	b570      	push	{r4, r5, r6, lr}
 8012806:	69c6      	ldr	r6, [r0, #28]
 8012808:	4604      	mov	r4, r0
 801280a:	460d      	mov	r5, r1
 801280c:	b976      	cbnz	r6, 801282c <_Balloc+0x28>
 801280e:	2010      	movs	r0, #16
 8012810:	f7ff ff42 	bl	8012698 <malloc>
 8012814:	4602      	mov	r2, r0
 8012816:	61e0      	str	r0, [r4, #28]
 8012818:	b920      	cbnz	r0, 8012824 <_Balloc+0x20>
 801281a:	4b18      	ldr	r3, [pc, #96]	@ (801287c <_Balloc+0x78>)
 801281c:	4818      	ldr	r0, [pc, #96]	@ (8012880 <_Balloc+0x7c>)
 801281e:	216b      	movs	r1, #107	@ 0x6b
 8012820:	f000 fdae 	bl	8013380 <__assert_func>
 8012824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012828:	6006      	str	r6, [r0, #0]
 801282a:	60c6      	str	r6, [r0, #12]
 801282c:	69e6      	ldr	r6, [r4, #28]
 801282e:	68f3      	ldr	r3, [r6, #12]
 8012830:	b183      	cbz	r3, 8012854 <_Balloc+0x50>
 8012832:	69e3      	ldr	r3, [r4, #28]
 8012834:	68db      	ldr	r3, [r3, #12]
 8012836:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801283a:	b9b8      	cbnz	r0, 801286c <_Balloc+0x68>
 801283c:	2101      	movs	r1, #1
 801283e:	fa01 f605 	lsl.w	r6, r1, r5
 8012842:	1d72      	adds	r2, r6, #5
 8012844:	0092      	lsls	r2, r2, #2
 8012846:	4620      	mov	r0, r4
 8012848:	f000 fdb8 	bl	80133bc <_calloc_r>
 801284c:	b160      	cbz	r0, 8012868 <_Balloc+0x64>
 801284e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012852:	e00e      	b.n	8012872 <_Balloc+0x6e>
 8012854:	2221      	movs	r2, #33	@ 0x21
 8012856:	2104      	movs	r1, #4
 8012858:	4620      	mov	r0, r4
 801285a:	f000 fdaf 	bl	80133bc <_calloc_r>
 801285e:	69e3      	ldr	r3, [r4, #28]
 8012860:	60f0      	str	r0, [r6, #12]
 8012862:	68db      	ldr	r3, [r3, #12]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d1e4      	bne.n	8012832 <_Balloc+0x2e>
 8012868:	2000      	movs	r0, #0
 801286a:	bd70      	pop	{r4, r5, r6, pc}
 801286c:	6802      	ldr	r2, [r0, #0]
 801286e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012872:	2300      	movs	r3, #0
 8012874:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012878:	e7f7      	b.n	801286a <_Balloc+0x66>
 801287a:	bf00      	nop
 801287c:	080144bf 	.word	0x080144bf
 8012880:	0801453f 	.word	0x0801453f

08012884 <_Bfree>:
 8012884:	b570      	push	{r4, r5, r6, lr}
 8012886:	69c6      	ldr	r6, [r0, #28]
 8012888:	4605      	mov	r5, r0
 801288a:	460c      	mov	r4, r1
 801288c:	b976      	cbnz	r6, 80128ac <_Bfree+0x28>
 801288e:	2010      	movs	r0, #16
 8012890:	f7ff ff02 	bl	8012698 <malloc>
 8012894:	4602      	mov	r2, r0
 8012896:	61e8      	str	r0, [r5, #28]
 8012898:	b920      	cbnz	r0, 80128a4 <_Bfree+0x20>
 801289a:	4b09      	ldr	r3, [pc, #36]	@ (80128c0 <_Bfree+0x3c>)
 801289c:	4809      	ldr	r0, [pc, #36]	@ (80128c4 <_Bfree+0x40>)
 801289e:	218f      	movs	r1, #143	@ 0x8f
 80128a0:	f000 fd6e 	bl	8013380 <__assert_func>
 80128a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80128a8:	6006      	str	r6, [r0, #0]
 80128aa:	60c6      	str	r6, [r0, #12]
 80128ac:	b13c      	cbz	r4, 80128be <_Bfree+0x3a>
 80128ae:	69eb      	ldr	r3, [r5, #28]
 80128b0:	6862      	ldr	r2, [r4, #4]
 80128b2:	68db      	ldr	r3, [r3, #12]
 80128b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80128b8:	6021      	str	r1, [r4, #0]
 80128ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80128be:	bd70      	pop	{r4, r5, r6, pc}
 80128c0:	080144bf 	.word	0x080144bf
 80128c4:	0801453f 	.word	0x0801453f

080128c8 <__multadd>:
 80128c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128cc:	690d      	ldr	r5, [r1, #16]
 80128ce:	4607      	mov	r7, r0
 80128d0:	460c      	mov	r4, r1
 80128d2:	461e      	mov	r6, r3
 80128d4:	f101 0c14 	add.w	ip, r1, #20
 80128d8:	2000      	movs	r0, #0
 80128da:	f8dc 3000 	ldr.w	r3, [ip]
 80128de:	b299      	uxth	r1, r3
 80128e0:	fb02 6101 	mla	r1, r2, r1, r6
 80128e4:	0c1e      	lsrs	r6, r3, #16
 80128e6:	0c0b      	lsrs	r3, r1, #16
 80128e8:	fb02 3306 	mla	r3, r2, r6, r3
 80128ec:	b289      	uxth	r1, r1
 80128ee:	3001      	adds	r0, #1
 80128f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80128f4:	4285      	cmp	r5, r0
 80128f6:	f84c 1b04 	str.w	r1, [ip], #4
 80128fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80128fe:	dcec      	bgt.n	80128da <__multadd+0x12>
 8012900:	b30e      	cbz	r6, 8012946 <__multadd+0x7e>
 8012902:	68a3      	ldr	r3, [r4, #8]
 8012904:	42ab      	cmp	r3, r5
 8012906:	dc19      	bgt.n	801293c <__multadd+0x74>
 8012908:	6861      	ldr	r1, [r4, #4]
 801290a:	4638      	mov	r0, r7
 801290c:	3101      	adds	r1, #1
 801290e:	f7ff ff79 	bl	8012804 <_Balloc>
 8012912:	4680      	mov	r8, r0
 8012914:	b928      	cbnz	r0, 8012922 <__multadd+0x5a>
 8012916:	4602      	mov	r2, r0
 8012918:	4b0c      	ldr	r3, [pc, #48]	@ (801294c <__multadd+0x84>)
 801291a:	480d      	ldr	r0, [pc, #52]	@ (8012950 <__multadd+0x88>)
 801291c:	21ba      	movs	r1, #186	@ 0xba
 801291e:	f000 fd2f 	bl	8013380 <__assert_func>
 8012922:	6922      	ldr	r2, [r4, #16]
 8012924:	3202      	adds	r2, #2
 8012926:	f104 010c 	add.w	r1, r4, #12
 801292a:	0092      	lsls	r2, r2, #2
 801292c:	300c      	adds	r0, #12
 801292e:	f000 fd19 	bl	8013364 <memcpy>
 8012932:	4621      	mov	r1, r4
 8012934:	4638      	mov	r0, r7
 8012936:	f7ff ffa5 	bl	8012884 <_Bfree>
 801293a:	4644      	mov	r4, r8
 801293c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012940:	3501      	adds	r5, #1
 8012942:	615e      	str	r6, [r3, #20]
 8012944:	6125      	str	r5, [r4, #16]
 8012946:	4620      	mov	r0, r4
 8012948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801294c:	0801452e 	.word	0x0801452e
 8012950:	0801453f 	.word	0x0801453f

08012954 <__hi0bits>:
 8012954:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012958:	4603      	mov	r3, r0
 801295a:	bf36      	itet	cc
 801295c:	0403      	lslcc	r3, r0, #16
 801295e:	2000      	movcs	r0, #0
 8012960:	2010      	movcc	r0, #16
 8012962:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012966:	bf3c      	itt	cc
 8012968:	021b      	lslcc	r3, r3, #8
 801296a:	3008      	addcc	r0, #8
 801296c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012970:	bf3c      	itt	cc
 8012972:	011b      	lslcc	r3, r3, #4
 8012974:	3004      	addcc	r0, #4
 8012976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801297a:	bf3c      	itt	cc
 801297c:	009b      	lslcc	r3, r3, #2
 801297e:	3002      	addcc	r0, #2
 8012980:	2b00      	cmp	r3, #0
 8012982:	db05      	blt.n	8012990 <__hi0bits+0x3c>
 8012984:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012988:	f100 0001 	add.w	r0, r0, #1
 801298c:	bf08      	it	eq
 801298e:	2020      	moveq	r0, #32
 8012990:	4770      	bx	lr

08012992 <__lo0bits>:
 8012992:	6803      	ldr	r3, [r0, #0]
 8012994:	4602      	mov	r2, r0
 8012996:	f013 0007 	ands.w	r0, r3, #7
 801299a:	d00b      	beq.n	80129b4 <__lo0bits+0x22>
 801299c:	07d9      	lsls	r1, r3, #31
 801299e:	d421      	bmi.n	80129e4 <__lo0bits+0x52>
 80129a0:	0798      	lsls	r0, r3, #30
 80129a2:	bf49      	itett	mi
 80129a4:	085b      	lsrmi	r3, r3, #1
 80129a6:	089b      	lsrpl	r3, r3, #2
 80129a8:	2001      	movmi	r0, #1
 80129aa:	6013      	strmi	r3, [r2, #0]
 80129ac:	bf5c      	itt	pl
 80129ae:	6013      	strpl	r3, [r2, #0]
 80129b0:	2002      	movpl	r0, #2
 80129b2:	4770      	bx	lr
 80129b4:	b299      	uxth	r1, r3
 80129b6:	b909      	cbnz	r1, 80129bc <__lo0bits+0x2a>
 80129b8:	0c1b      	lsrs	r3, r3, #16
 80129ba:	2010      	movs	r0, #16
 80129bc:	b2d9      	uxtb	r1, r3
 80129be:	b909      	cbnz	r1, 80129c4 <__lo0bits+0x32>
 80129c0:	3008      	adds	r0, #8
 80129c2:	0a1b      	lsrs	r3, r3, #8
 80129c4:	0719      	lsls	r1, r3, #28
 80129c6:	bf04      	itt	eq
 80129c8:	091b      	lsreq	r3, r3, #4
 80129ca:	3004      	addeq	r0, #4
 80129cc:	0799      	lsls	r1, r3, #30
 80129ce:	bf04      	itt	eq
 80129d0:	089b      	lsreq	r3, r3, #2
 80129d2:	3002      	addeq	r0, #2
 80129d4:	07d9      	lsls	r1, r3, #31
 80129d6:	d403      	bmi.n	80129e0 <__lo0bits+0x4e>
 80129d8:	085b      	lsrs	r3, r3, #1
 80129da:	f100 0001 	add.w	r0, r0, #1
 80129de:	d003      	beq.n	80129e8 <__lo0bits+0x56>
 80129e0:	6013      	str	r3, [r2, #0]
 80129e2:	4770      	bx	lr
 80129e4:	2000      	movs	r0, #0
 80129e6:	4770      	bx	lr
 80129e8:	2020      	movs	r0, #32
 80129ea:	4770      	bx	lr

080129ec <__i2b>:
 80129ec:	b510      	push	{r4, lr}
 80129ee:	460c      	mov	r4, r1
 80129f0:	2101      	movs	r1, #1
 80129f2:	f7ff ff07 	bl	8012804 <_Balloc>
 80129f6:	4602      	mov	r2, r0
 80129f8:	b928      	cbnz	r0, 8012a06 <__i2b+0x1a>
 80129fa:	4b05      	ldr	r3, [pc, #20]	@ (8012a10 <__i2b+0x24>)
 80129fc:	4805      	ldr	r0, [pc, #20]	@ (8012a14 <__i2b+0x28>)
 80129fe:	f240 1145 	movw	r1, #325	@ 0x145
 8012a02:	f000 fcbd 	bl	8013380 <__assert_func>
 8012a06:	2301      	movs	r3, #1
 8012a08:	6144      	str	r4, [r0, #20]
 8012a0a:	6103      	str	r3, [r0, #16]
 8012a0c:	bd10      	pop	{r4, pc}
 8012a0e:	bf00      	nop
 8012a10:	0801452e 	.word	0x0801452e
 8012a14:	0801453f 	.word	0x0801453f

08012a18 <__multiply>:
 8012a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a1c:	4614      	mov	r4, r2
 8012a1e:	690a      	ldr	r2, [r1, #16]
 8012a20:	6923      	ldr	r3, [r4, #16]
 8012a22:	429a      	cmp	r2, r3
 8012a24:	bfa8      	it	ge
 8012a26:	4623      	movge	r3, r4
 8012a28:	460f      	mov	r7, r1
 8012a2a:	bfa4      	itt	ge
 8012a2c:	460c      	movge	r4, r1
 8012a2e:	461f      	movge	r7, r3
 8012a30:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012a34:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012a38:	68a3      	ldr	r3, [r4, #8]
 8012a3a:	6861      	ldr	r1, [r4, #4]
 8012a3c:	eb0a 0609 	add.w	r6, sl, r9
 8012a40:	42b3      	cmp	r3, r6
 8012a42:	b085      	sub	sp, #20
 8012a44:	bfb8      	it	lt
 8012a46:	3101      	addlt	r1, #1
 8012a48:	f7ff fedc 	bl	8012804 <_Balloc>
 8012a4c:	b930      	cbnz	r0, 8012a5c <__multiply+0x44>
 8012a4e:	4602      	mov	r2, r0
 8012a50:	4b44      	ldr	r3, [pc, #272]	@ (8012b64 <__multiply+0x14c>)
 8012a52:	4845      	ldr	r0, [pc, #276]	@ (8012b68 <__multiply+0x150>)
 8012a54:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012a58:	f000 fc92 	bl	8013380 <__assert_func>
 8012a5c:	f100 0514 	add.w	r5, r0, #20
 8012a60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012a64:	462b      	mov	r3, r5
 8012a66:	2200      	movs	r2, #0
 8012a68:	4543      	cmp	r3, r8
 8012a6a:	d321      	bcc.n	8012ab0 <__multiply+0x98>
 8012a6c:	f107 0114 	add.w	r1, r7, #20
 8012a70:	f104 0214 	add.w	r2, r4, #20
 8012a74:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012a78:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012a7c:	9302      	str	r3, [sp, #8]
 8012a7e:	1b13      	subs	r3, r2, r4
 8012a80:	3b15      	subs	r3, #21
 8012a82:	f023 0303 	bic.w	r3, r3, #3
 8012a86:	3304      	adds	r3, #4
 8012a88:	f104 0715 	add.w	r7, r4, #21
 8012a8c:	42ba      	cmp	r2, r7
 8012a8e:	bf38      	it	cc
 8012a90:	2304      	movcc	r3, #4
 8012a92:	9301      	str	r3, [sp, #4]
 8012a94:	9b02      	ldr	r3, [sp, #8]
 8012a96:	9103      	str	r1, [sp, #12]
 8012a98:	428b      	cmp	r3, r1
 8012a9a:	d80c      	bhi.n	8012ab6 <__multiply+0x9e>
 8012a9c:	2e00      	cmp	r6, #0
 8012a9e:	dd03      	ble.n	8012aa8 <__multiply+0x90>
 8012aa0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d05b      	beq.n	8012b60 <__multiply+0x148>
 8012aa8:	6106      	str	r6, [r0, #16]
 8012aaa:	b005      	add	sp, #20
 8012aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ab0:	f843 2b04 	str.w	r2, [r3], #4
 8012ab4:	e7d8      	b.n	8012a68 <__multiply+0x50>
 8012ab6:	f8b1 a000 	ldrh.w	sl, [r1]
 8012aba:	f1ba 0f00 	cmp.w	sl, #0
 8012abe:	d024      	beq.n	8012b0a <__multiply+0xf2>
 8012ac0:	f104 0e14 	add.w	lr, r4, #20
 8012ac4:	46a9      	mov	r9, r5
 8012ac6:	f04f 0c00 	mov.w	ip, #0
 8012aca:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012ace:	f8d9 3000 	ldr.w	r3, [r9]
 8012ad2:	fa1f fb87 	uxth.w	fp, r7
 8012ad6:	b29b      	uxth	r3, r3
 8012ad8:	fb0a 330b 	mla	r3, sl, fp, r3
 8012adc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012ae0:	f8d9 7000 	ldr.w	r7, [r9]
 8012ae4:	4463      	add	r3, ip
 8012ae6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012aea:	fb0a c70b 	mla	r7, sl, fp, ip
 8012aee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012af2:	b29b      	uxth	r3, r3
 8012af4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012af8:	4572      	cmp	r2, lr
 8012afa:	f849 3b04 	str.w	r3, [r9], #4
 8012afe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012b02:	d8e2      	bhi.n	8012aca <__multiply+0xb2>
 8012b04:	9b01      	ldr	r3, [sp, #4]
 8012b06:	f845 c003 	str.w	ip, [r5, r3]
 8012b0a:	9b03      	ldr	r3, [sp, #12]
 8012b0c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012b10:	3104      	adds	r1, #4
 8012b12:	f1b9 0f00 	cmp.w	r9, #0
 8012b16:	d021      	beq.n	8012b5c <__multiply+0x144>
 8012b18:	682b      	ldr	r3, [r5, #0]
 8012b1a:	f104 0c14 	add.w	ip, r4, #20
 8012b1e:	46ae      	mov	lr, r5
 8012b20:	f04f 0a00 	mov.w	sl, #0
 8012b24:	f8bc b000 	ldrh.w	fp, [ip]
 8012b28:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012b2c:	fb09 770b 	mla	r7, r9, fp, r7
 8012b30:	4457      	add	r7, sl
 8012b32:	b29b      	uxth	r3, r3
 8012b34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012b38:	f84e 3b04 	str.w	r3, [lr], #4
 8012b3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012b40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012b44:	f8be 3000 	ldrh.w	r3, [lr]
 8012b48:	fb09 330a 	mla	r3, r9, sl, r3
 8012b4c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012b50:	4562      	cmp	r2, ip
 8012b52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012b56:	d8e5      	bhi.n	8012b24 <__multiply+0x10c>
 8012b58:	9f01      	ldr	r7, [sp, #4]
 8012b5a:	51eb      	str	r3, [r5, r7]
 8012b5c:	3504      	adds	r5, #4
 8012b5e:	e799      	b.n	8012a94 <__multiply+0x7c>
 8012b60:	3e01      	subs	r6, #1
 8012b62:	e79b      	b.n	8012a9c <__multiply+0x84>
 8012b64:	0801452e 	.word	0x0801452e
 8012b68:	0801453f 	.word	0x0801453f

08012b6c <__pow5mult>:
 8012b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b70:	4615      	mov	r5, r2
 8012b72:	f012 0203 	ands.w	r2, r2, #3
 8012b76:	4607      	mov	r7, r0
 8012b78:	460e      	mov	r6, r1
 8012b7a:	d007      	beq.n	8012b8c <__pow5mult+0x20>
 8012b7c:	4c25      	ldr	r4, [pc, #148]	@ (8012c14 <__pow5mult+0xa8>)
 8012b7e:	3a01      	subs	r2, #1
 8012b80:	2300      	movs	r3, #0
 8012b82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012b86:	f7ff fe9f 	bl	80128c8 <__multadd>
 8012b8a:	4606      	mov	r6, r0
 8012b8c:	10ad      	asrs	r5, r5, #2
 8012b8e:	d03d      	beq.n	8012c0c <__pow5mult+0xa0>
 8012b90:	69fc      	ldr	r4, [r7, #28]
 8012b92:	b97c      	cbnz	r4, 8012bb4 <__pow5mult+0x48>
 8012b94:	2010      	movs	r0, #16
 8012b96:	f7ff fd7f 	bl	8012698 <malloc>
 8012b9a:	4602      	mov	r2, r0
 8012b9c:	61f8      	str	r0, [r7, #28]
 8012b9e:	b928      	cbnz	r0, 8012bac <__pow5mult+0x40>
 8012ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8012c18 <__pow5mult+0xac>)
 8012ba2:	481e      	ldr	r0, [pc, #120]	@ (8012c1c <__pow5mult+0xb0>)
 8012ba4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012ba8:	f000 fbea 	bl	8013380 <__assert_func>
 8012bac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012bb0:	6004      	str	r4, [r0, #0]
 8012bb2:	60c4      	str	r4, [r0, #12]
 8012bb4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012bb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012bbc:	b94c      	cbnz	r4, 8012bd2 <__pow5mult+0x66>
 8012bbe:	f240 2171 	movw	r1, #625	@ 0x271
 8012bc2:	4638      	mov	r0, r7
 8012bc4:	f7ff ff12 	bl	80129ec <__i2b>
 8012bc8:	2300      	movs	r3, #0
 8012bca:	f8c8 0008 	str.w	r0, [r8, #8]
 8012bce:	4604      	mov	r4, r0
 8012bd0:	6003      	str	r3, [r0, #0]
 8012bd2:	f04f 0900 	mov.w	r9, #0
 8012bd6:	07eb      	lsls	r3, r5, #31
 8012bd8:	d50a      	bpl.n	8012bf0 <__pow5mult+0x84>
 8012bda:	4631      	mov	r1, r6
 8012bdc:	4622      	mov	r2, r4
 8012bde:	4638      	mov	r0, r7
 8012be0:	f7ff ff1a 	bl	8012a18 <__multiply>
 8012be4:	4631      	mov	r1, r6
 8012be6:	4680      	mov	r8, r0
 8012be8:	4638      	mov	r0, r7
 8012bea:	f7ff fe4b 	bl	8012884 <_Bfree>
 8012bee:	4646      	mov	r6, r8
 8012bf0:	106d      	asrs	r5, r5, #1
 8012bf2:	d00b      	beq.n	8012c0c <__pow5mult+0xa0>
 8012bf4:	6820      	ldr	r0, [r4, #0]
 8012bf6:	b938      	cbnz	r0, 8012c08 <__pow5mult+0x9c>
 8012bf8:	4622      	mov	r2, r4
 8012bfa:	4621      	mov	r1, r4
 8012bfc:	4638      	mov	r0, r7
 8012bfe:	f7ff ff0b 	bl	8012a18 <__multiply>
 8012c02:	6020      	str	r0, [r4, #0]
 8012c04:	f8c0 9000 	str.w	r9, [r0]
 8012c08:	4604      	mov	r4, r0
 8012c0a:	e7e4      	b.n	8012bd6 <__pow5mult+0x6a>
 8012c0c:	4630      	mov	r0, r6
 8012c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c12:	bf00      	nop
 8012c14:	08014598 	.word	0x08014598
 8012c18:	080144bf 	.word	0x080144bf
 8012c1c:	0801453f 	.word	0x0801453f

08012c20 <__lshift>:
 8012c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c24:	460c      	mov	r4, r1
 8012c26:	6849      	ldr	r1, [r1, #4]
 8012c28:	6923      	ldr	r3, [r4, #16]
 8012c2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012c2e:	68a3      	ldr	r3, [r4, #8]
 8012c30:	4607      	mov	r7, r0
 8012c32:	4691      	mov	r9, r2
 8012c34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012c38:	f108 0601 	add.w	r6, r8, #1
 8012c3c:	42b3      	cmp	r3, r6
 8012c3e:	db0b      	blt.n	8012c58 <__lshift+0x38>
 8012c40:	4638      	mov	r0, r7
 8012c42:	f7ff fddf 	bl	8012804 <_Balloc>
 8012c46:	4605      	mov	r5, r0
 8012c48:	b948      	cbnz	r0, 8012c5e <__lshift+0x3e>
 8012c4a:	4602      	mov	r2, r0
 8012c4c:	4b28      	ldr	r3, [pc, #160]	@ (8012cf0 <__lshift+0xd0>)
 8012c4e:	4829      	ldr	r0, [pc, #164]	@ (8012cf4 <__lshift+0xd4>)
 8012c50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012c54:	f000 fb94 	bl	8013380 <__assert_func>
 8012c58:	3101      	adds	r1, #1
 8012c5a:	005b      	lsls	r3, r3, #1
 8012c5c:	e7ee      	b.n	8012c3c <__lshift+0x1c>
 8012c5e:	2300      	movs	r3, #0
 8012c60:	f100 0114 	add.w	r1, r0, #20
 8012c64:	f100 0210 	add.w	r2, r0, #16
 8012c68:	4618      	mov	r0, r3
 8012c6a:	4553      	cmp	r3, sl
 8012c6c:	db33      	blt.n	8012cd6 <__lshift+0xb6>
 8012c6e:	6920      	ldr	r0, [r4, #16]
 8012c70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012c74:	f104 0314 	add.w	r3, r4, #20
 8012c78:	f019 091f 	ands.w	r9, r9, #31
 8012c7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012c80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012c84:	d02b      	beq.n	8012cde <__lshift+0xbe>
 8012c86:	f1c9 0e20 	rsb	lr, r9, #32
 8012c8a:	468a      	mov	sl, r1
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	6818      	ldr	r0, [r3, #0]
 8012c90:	fa00 f009 	lsl.w	r0, r0, r9
 8012c94:	4310      	orrs	r0, r2
 8012c96:	f84a 0b04 	str.w	r0, [sl], #4
 8012c9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c9e:	459c      	cmp	ip, r3
 8012ca0:	fa22 f20e 	lsr.w	r2, r2, lr
 8012ca4:	d8f3      	bhi.n	8012c8e <__lshift+0x6e>
 8012ca6:	ebac 0304 	sub.w	r3, ip, r4
 8012caa:	3b15      	subs	r3, #21
 8012cac:	f023 0303 	bic.w	r3, r3, #3
 8012cb0:	3304      	adds	r3, #4
 8012cb2:	f104 0015 	add.w	r0, r4, #21
 8012cb6:	4584      	cmp	ip, r0
 8012cb8:	bf38      	it	cc
 8012cba:	2304      	movcc	r3, #4
 8012cbc:	50ca      	str	r2, [r1, r3]
 8012cbe:	b10a      	cbz	r2, 8012cc4 <__lshift+0xa4>
 8012cc0:	f108 0602 	add.w	r6, r8, #2
 8012cc4:	3e01      	subs	r6, #1
 8012cc6:	4638      	mov	r0, r7
 8012cc8:	612e      	str	r6, [r5, #16]
 8012cca:	4621      	mov	r1, r4
 8012ccc:	f7ff fdda 	bl	8012884 <_Bfree>
 8012cd0:	4628      	mov	r0, r5
 8012cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8012cda:	3301      	adds	r3, #1
 8012cdc:	e7c5      	b.n	8012c6a <__lshift+0x4a>
 8012cde:	3904      	subs	r1, #4
 8012ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ce4:	f841 2f04 	str.w	r2, [r1, #4]!
 8012ce8:	459c      	cmp	ip, r3
 8012cea:	d8f9      	bhi.n	8012ce0 <__lshift+0xc0>
 8012cec:	e7ea      	b.n	8012cc4 <__lshift+0xa4>
 8012cee:	bf00      	nop
 8012cf0:	0801452e 	.word	0x0801452e
 8012cf4:	0801453f 	.word	0x0801453f

08012cf8 <__mcmp>:
 8012cf8:	690a      	ldr	r2, [r1, #16]
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	6900      	ldr	r0, [r0, #16]
 8012cfe:	1a80      	subs	r0, r0, r2
 8012d00:	b530      	push	{r4, r5, lr}
 8012d02:	d10e      	bne.n	8012d22 <__mcmp+0x2a>
 8012d04:	3314      	adds	r3, #20
 8012d06:	3114      	adds	r1, #20
 8012d08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012d0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012d10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012d14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012d18:	4295      	cmp	r5, r2
 8012d1a:	d003      	beq.n	8012d24 <__mcmp+0x2c>
 8012d1c:	d205      	bcs.n	8012d2a <__mcmp+0x32>
 8012d1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d22:	bd30      	pop	{r4, r5, pc}
 8012d24:	42a3      	cmp	r3, r4
 8012d26:	d3f3      	bcc.n	8012d10 <__mcmp+0x18>
 8012d28:	e7fb      	b.n	8012d22 <__mcmp+0x2a>
 8012d2a:	2001      	movs	r0, #1
 8012d2c:	e7f9      	b.n	8012d22 <__mcmp+0x2a>
	...

08012d30 <__mdiff>:
 8012d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d34:	4689      	mov	r9, r1
 8012d36:	4606      	mov	r6, r0
 8012d38:	4611      	mov	r1, r2
 8012d3a:	4648      	mov	r0, r9
 8012d3c:	4614      	mov	r4, r2
 8012d3e:	f7ff ffdb 	bl	8012cf8 <__mcmp>
 8012d42:	1e05      	subs	r5, r0, #0
 8012d44:	d112      	bne.n	8012d6c <__mdiff+0x3c>
 8012d46:	4629      	mov	r1, r5
 8012d48:	4630      	mov	r0, r6
 8012d4a:	f7ff fd5b 	bl	8012804 <_Balloc>
 8012d4e:	4602      	mov	r2, r0
 8012d50:	b928      	cbnz	r0, 8012d5e <__mdiff+0x2e>
 8012d52:	4b3f      	ldr	r3, [pc, #252]	@ (8012e50 <__mdiff+0x120>)
 8012d54:	f240 2137 	movw	r1, #567	@ 0x237
 8012d58:	483e      	ldr	r0, [pc, #248]	@ (8012e54 <__mdiff+0x124>)
 8012d5a:	f000 fb11 	bl	8013380 <__assert_func>
 8012d5e:	2301      	movs	r3, #1
 8012d60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012d64:	4610      	mov	r0, r2
 8012d66:	b003      	add	sp, #12
 8012d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d6c:	bfbc      	itt	lt
 8012d6e:	464b      	movlt	r3, r9
 8012d70:	46a1      	movlt	r9, r4
 8012d72:	4630      	mov	r0, r6
 8012d74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012d78:	bfba      	itte	lt
 8012d7a:	461c      	movlt	r4, r3
 8012d7c:	2501      	movlt	r5, #1
 8012d7e:	2500      	movge	r5, #0
 8012d80:	f7ff fd40 	bl	8012804 <_Balloc>
 8012d84:	4602      	mov	r2, r0
 8012d86:	b918      	cbnz	r0, 8012d90 <__mdiff+0x60>
 8012d88:	4b31      	ldr	r3, [pc, #196]	@ (8012e50 <__mdiff+0x120>)
 8012d8a:	f240 2145 	movw	r1, #581	@ 0x245
 8012d8e:	e7e3      	b.n	8012d58 <__mdiff+0x28>
 8012d90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012d94:	6926      	ldr	r6, [r4, #16]
 8012d96:	60c5      	str	r5, [r0, #12]
 8012d98:	f109 0310 	add.w	r3, r9, #16
 8012d9c:	f109 0514 	add.w	r5, r9, #20
 8012da0:	f104 0e14 	add.w	lr, r4, #20
 8012da4:	f100 0b14 	add.w	fp, r0, #20
 8012da8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012dac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012db0:	9301      	str	r3, [sp, #4]
 8012db2:	46d9      	mov	r9, fp
 8012db4:	f04f 0c00 	mov.w	ip, #0
 8012db8:	9b01      	ldr	r3, [sp, #4]
 8012dba:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012dbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012dc2:	9301      	str	r3, [sp, #4]
 8012dc4:	fa1f f38a 	uxth.w	r3, sl
 8012dc8:	4619      	mov	r1, r3
 8012dca:	b283      	uxth	r3, r0
 8012dcc:	1acb      	subs	r3, r1, r3
 8012dce:	0c00      	lsrs	r0, r0, #16
 8012dd0:	4463      	add	r3, ip
 8012dd2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012dd6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012dda:	b29b      	uxth	r3, r3
 8012ddc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012de0:	4576      	cmp	r6, lr
 8012de2:	f849 3b04 	str.w	r3, [r9], #4
 8012de6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012dea:	d8e5      	bhi.n	8012db8 <__mdiff+0x88>
 8012dec:	1b33      	subs	r3, r6, r4
 8012dee:	3b15      	subs	r3, #21
 8012df0:	f023 0303 	bic.w	r3, r3, #3
 8012df4:	3415      	adds	r4, #21
 8012df6:	3304      	adds	r3, #4
 8012df8:	42a6      	cmp	r6, r4
 8012dfa:	bf38      	it	cc
 8012dfc:	2304      	movcc	r3, #4
 8012dfe:	441d      	add	r5, r3
 8012e00:	445b      	add	r3, fp
 8012e02:	461e      	mov	r6, r3
 8012e04:	462c      	mov	r4, r5
 8012e06:	4544      	cmp	r4, r8
 8012e08:	d30e      	bcc.n	8012e28 <__mdiff+0xf8>
 8012e0a:	f108 0103 	add.w	r1, r8, #3
 8012e0e:	1b49      	subs	r1, r1, r5
 8012e10:	f021 0103 	bic.w	r1, r1, #3
 8012e14:	3d03      	subs	r5, #3
 8012e16:	45a8      	cmp	r8, r5
 8012e18:	bf38      	it	cc
 8012e1a:	2100      	movcc	r1, #0
 8012e1c:	440b      	add	r3, r1
 8012e1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012e22:	b191      	cbz	r1, 8012e4a <__mdiff+0x11a>
 8012e24:	6117      	str	r7, [r2, #16]
 8012e26:	e79d      	b.n	8012d64 <__mdiff+0x34>
 8012e28:	f854 1b04 	ldr.w	r1, [r4], #4
 8012e2c:	46e6      	mov	lr, ip
 8012e2e:	0c08      	lsrs	r0, r1, #16
 8012e30:	fa1c fc81 	uxtah	ip, ip, r1
 8012e34:	4471      	add	r1, lr
 8012e36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012e3a:	b289      	uxth	r1, r1
 8012e3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012e40:	f846 1b04 	str.w	r1, [r6], #4
 8012e44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012e48:	e7dd      	b.n	8012e06 <__mdiff+0xd6>
 8012e4a:	3f01      	subs	r7, #1
 8012e4c:	e7e7      	b.n	8012e1e <__mdiff+0xee>
 8012e4e:	bf00      	nop
 8012e50:	0801452e 	.word	0x0801452e
 8012e54:	0801453f 	.word	0x0801453f

08012e58 <__d2b>:
 8012e58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012e5c:	460f      	mov	r7, r1
 8012e5e:	2101      	movs	r1, #1
 8012e60:	ec59 8b10 	vmov	r8, r9, d0
 8012e64:	4616      	mov	r6, r2
 8012e66:	f7ff fccd 	bl	8012804 <_Balloc>
 8012e6a:	4604      	mov	r4, r0
 8012e6c:	b930      	cbnz	r0, 8012e7c <__d2b+0x24>
 8012e6e:	4602      	mov	r2, r0
 8012e70:	4b23      	ldr	r3, [pc, #140]	@ (8012f00 <__d2b+0xa8>)
 8012e72:	4824      	ldr	r0, [pc, #144]	@ (8012f04 <__d2b+0xac>)
 8012e74:	f240 310f 	movw	r1, #783	@ 0x30f
 8012e78:	f000 fa82 	bl	8013380 <__assert_func>
 8012e7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012e80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012e84:	b10d      	cbz	r5, 8012e8a <__d2b+0x32>
 8012e86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012e8a:	9301      	str	r3, [sp, #4]
 8012e8c:	f1b8 0300 	subs.w	r3, r8, #0
 8012e90:	d023      	beq.n	8012eda <__d2b+0x82>
 8012e92:	4668      	mov	r0, sp
 8012e94:	9300      	str	r3, [sp, #0]
 8012e96:	f7ff fd7c 	bl	8012992 <__lo0bits>
 8012e9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012e9e:	b1d0      	cbz	r0, 8012ed6 <__d2b+0x7e>
 8012ea0:	f1c0 0320 	rsb	r3, r0, #32
 8012ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8012ea8:	430b      	orrs	r3, r1
 8012eaa:	40c2      	lsrs	r2, r0
 8012eac:	6163      	str	r3, [r4, #20]
 8012eae:	9201      	str	r2, [sp, #4]
 8012eb0:	9b01      	ldr	r3, [sp, #4]
 8012eb2:	61a3      	str	r3, [r4, #24]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	bf0c      	ite	eq
 8012eb8:	2201      	moveq	r2, #1
 8012eba:	2202      	movne	r2, #2
 8012ebc:	6122      	str	r2, [r4, #16]
 8012ebe:	b1a5      	cbz	r5, 8012eea <__d2b+0x92>
 8012ec0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012ec4:	4405      	add	r5, r0
 8012ec6:	603d      	str	r5, [r7, #0]
 8012ec8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012ecc:	6030      	str	r0, [r6, #0]
 8012ece:	4620      	mov	r0, r4
 8012ed0:	b003      	add	sp, #12
 8012ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ed6:	6161      	str	r1, [r4, #20]
 8012ed8:	e7ea      	b.n	8012eb0 <__d2b+0x58>
 8012eda:	a801      	add	r0, sp, #4
 8012edc:	f7ff fd59 	bl	8012992 <__lo0bits>
 8012ee0:	9b01      	ldr	r3, [sp, #4]
 8012ee2:	6163      	str	r3, [r4, #20]
 8012ee4:	3020      	adds	r0, #32
 8012ee6:	2201      	movs	r2, #1
 8012ee8:	e7e8      	b.n	8012ebc <__d2b+0x64>
 8012eea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012eee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012ef2:	6038      	str	r0, [r7, #0]
 8012ef4:	6918      	ldr	r0, [r3, #16]
 8012ef6:	f7ff fd2d 	bl	8012954 <__hi0bits>
 8012efa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012efe:	e7e5      	b.n	8012ecc <__d2b+0x74>
 8012f00:	0801452e 	.word	0x0801452e
 8012f04:	0801453f 	.word	0x0801453f

08012f08 <__ssputs_r>:
 8012f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f0c:	688e      	ldr	r6, [r1, #8]
 8012f0e:	461f      	mov	r7, r3
 8012f10:	42be      	cmp	r6, r7
 8012f12:	680b      	ldr	r3, [r1, #0]
 8012f14:	4682      	mov	sl, r0
 8012f16:	460c      	mov	r4, r1
 8012f18:	4690      	mov	r8, r2
 8012f1a:	d82d      	bhi.n	8012f78 <__ssputs_r+0x70>
 8012f1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012f20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012f24:	d026      	beq.n	8012f74 <__ssputs_r+0x6c>
 8012f26:	6965      	ldr	r5, [r4, #20]
 8012f28:	6909      	ldr	r1, [r1, #16]
 8012f2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012f2e:	eba3 0901 	sub.w	r9, r3, r1
 8012f32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012f36:	1c7b      	adds	r3, r7, #1
 8012f38:	444b      	add	r3, r9
 8012f3a:	106d      	asrs	r5, r5, #1
 8012f3c:	429d      	cmp	r5, r3
 8012f3e:	bf38      	it	cc
 8012f40:	461d      	movcc	r5, r3
 8012f42:	0553      	lsls	r3, r2, #21
 8012f44:	d527      	bpl.n	8012f96 <__ssputs_r+0x8e>
 8012f46:	4629      	mov	r1, r5
 8012f48:	f7ff fbd0 	bl	80126ec <_malloc_r>
 8012f4c:	4606      	mov	r6, r0
 8012f4e:	b360      	cbz	r0, 8012faa <__ssputs_r+0xa2>
 8012f50:	6921      	ldr	r1, [r4, #16]
 8012f52:	464a      	mov	r2, r9
 8012f54:	f000 fa06 	bl	8013364 <memcpy>
 8012f58:	89a3      	ldrh	r3, [r4, #12]
 8012f5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012f62:	81a3      	strh	r3, [r4, #12]
 8012f64:	6126      	str	r6, [r4, #16]
 8012f66:	6165      	str	r5, [r4, #20]
 8012f68:	444e      	add	r6, r9
 8012f6a:	eba5 0509 	sub.w	r5, r5, r9
 8012f6e:	6026      	str	r6, [r4, #0]
 8012f70:	60a5      	str	r5, [r4, #8]
 8012f72:	463e      	mov	r6, r7
 8012f74:	42be      	cmp	r6, r7
 8012f76:	d900      	bls.n	8012f7a <__ssputs_r+0x72>
 8012f78:	463e      	mov	r6, r7
 8012f7a:	6820      	ldr	r0, [r4, #0]
 8012f7c:	4632      	mov	r2, r6
 8012f7e:	4641      	mov	r1, r8
 8012f80:	f000 f9c6 	bl	8013310 <memmove>
 8012f84:	68a3      	ldr	r3, [r4, #8]
 8012f86:	1b9b      	subs	r3, r3, r6
 8012f88:	60a3      	str	r3, [r4, #8]
 8012f8a:	6823      	ldr	r3, [r4, #0]
 8012f8c:	4433      	add	r3, r6
 8012f8e:	6023      	str	r3, [r4, #0]
 8012f90:	2000      	movs	r0, #0
 8012f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f96:	462a      	mov	r2, r5
 8012f98:	f000 fa36 	bl	8013408 <_realloc_r>
 8012f9c:	4606      	mov	r6, r0
 8012f9e:	2800      	cmp	r0, #0
 8012fa0:	d1e0      	bne.n	8012f64 <__ssputs_r+0x5c>
 8012fa2:	6921      	ldr	r1, [r4, #16]
 8012fa4:	4650      	mov	r0, sl
 8012fa6:	f7ff fb2d 	bl	8012604 <_free_r>
 8012faa:	230c      	movs	r3, #12
 8012fac:	f8ca 3000 	str.w	r3, [sl]
 8012fb0:	89a3      	ldrh	r3, [r4, #12]
 8012fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012fb6:	81a3      	strh	r3, [r4, #12]
 8012fb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012fbc:	e7e9      	b.n	8012f92 <__ssputs_r+0x8a>
	...

08012fc0 <_svfiprintf_r>:
 8012fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fc4:	4698      	mov	r8, r3
 8012fc6:	898b      	ldrh	r3, [r1, #12]
 8012fc8:	061b      	lsls	r3, r3, #24
 8012fca:	b09d      	sub	sp, #116	@ 0x74
 8012fcc:	4607      	mov	r7, r0
 8012fce:	460d      	mov	r5, r1
 8012fd0:	4614      	mov	r4, r2
 8012fd2:	d510      	bpl.n	8012ff6 <_svfiprintf_r+0x36>
 8012fd4:	690b      	ldr	r3, [r1, #16]
 8012fd6:	b973      	cbnz	r3, 8012ff6 <_svfiprintf_r+0x36>
 8012fd8:	2140      	movs	r1, #64	@ 0x40
 8012fda:	f7ff fb87 	bl	80126ec <_malloc_r>
 8012fde:	6028      	str	r0, [r5, #0]
 8012fe0:	6128      	str	r0, [r5, #16]
 8012fe2:	b930      	cbnz	r0, 8012ff2 <_svfiprintf_r+0x32>
 8012fe4:	230c      	movs	r3, #12
 8012fe6:	603b      	str	r3, [r7, #0]
 8012fe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012fec:	b01d      	add	sp, #116	@ 0x74
 8012fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ff2:	2340      	movs	r3, #64	@ 0x40
 8012ff4:	616b      	str	r3, [r5, #20]
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ffa:	2320      	movs	r3, #32
 8012ffc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013000:	f8cd 800c 	str.w	r8, [sp, #12]
 8013004:	2330      	movs	r3, #48	@ 0x30
 8013006:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80131a4 <_svfiprintf_r+0x1e4>
 801300a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801300e:	f04f 0901 	mov.w	r9, #1
 8013012:	4623      	mov	r3, r4
 8013014:	469a      	mov	sl, r3
 8013016:	f813 2b01 	ldrb.w	r2, [r3], #1
 801301a:	b10a      	cbz	r2, 8013020 <_svfiprintf_r+0x60>
 801301c:	2a25      	cmp	r2, #37	@ 0x25
 801301e:	d1f9      	bne.n	8013014 <_svfiprintf_r+0x54>
 8013020:	ebba 0b04 	subs.w	fp, sl, r4
 8013024:	d00b      	beq.n	801303e <_svfiprintf_r+0x7e>
 8013026:	465b      	mov	r3, fp
 8013028:	4622      	mov	r2, r4
 801302a:	4629      	mov	r1, r5
 801302c:	4638      	mov	r0, r7
 801302e:	f7ff ff6b 	bl	8012f08 <__ssputs_r>
 8013032:	3001      	adds	r0, #1
 8013034:	f000 80a7 	beq.w	8013186 <_svfiprintf_r+0x1c6>
 8013038:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801303a:	445a      	add	r2, fp
 801303c:	9209      	str	r2, [sp, #36]	@ 0x24
 801303e:	f89a 3000 	ldrb.w	r3, [sl]
 8013042:	2b00      	cmp	r3, #0
 8013044:	f000 809f 	beq.w	8013186 <_svfiprintf_r+0x1c6>
 8013048:	2300      	movs	r3, #0
 801304a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801304e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013052:	f10a 0a01 	add.w	sl, sl, #1
 8013056:	9304      	str	r3, [sp, #16]
 8013058:	9307      	str	r3, [sp, #28]
 801305a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801305e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013060:	4654      	mov	r4, sl
 8013062:	2205      	movs	r2, #5
 8013064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013068:	484e      	ldr	r0, [pc, #312]	@ (80131a4 <_svfiprintf_r+0x1e4>)
 801306a:	f7ed f951 	bl	8000310 <memchr>
 801306e:	9a04      	ldr	r2, [sp, #16]
 8013070:	b9d8      	cbnz	r0, 80130aa <_svfiprintf_r+0xea>
 8013072:	06d0      	lsls	r0, r2, #27
 8013074:	bf44      	itt	mi
 8013076:	2320      	movmi	r3, #32
 8013078:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801307c:	0711      	lsls	r1, r2, #28
 801307e:	bf44      	itt	mi
 8013080:	232b      	movmi	r3, #43	@ 0x2b
 8013082:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013086:	f89a 3000 	ldrb.w	r3, [sl]
 801308a:	2b2a      	cmp	r3, #42	@ 0x2a
 801308c:	d015      	beq.n	80130ba <_svfiprintf_r+0xfa>
 801308e:	9a07      	ldr	r2, [sp, #28]
 8013090:	4654      	mov	r4, sl
 8013092:	2000      	movs	r0, #0
 8013094:	f04f 0c0a 	mov.w	ip, #10
 8013098:	4621      	mov	r1, r4
 801309a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801309e:	3b30      	subs	r3, #48	@ 0x30
 80130a0:	2b09      	cmp	r3, #9
 80130a2:	d94b      	bls.n	801313c <_svfiprintf_r+0x17c>
 80130a4:	b1b0      	cbz	r0, 80130d4 <_svfiprintf_r+0x114>
 80130a6:	9207      	str	r2, [sp, #28]
 80130a8:	e014      	b.n	80130d4 <_svfiprintf_r+0x114>
 80130aa:	eba0 0308 	sub.w	r3, r0, r8
 80130ae:	fa09 f303 	lsl.w	r3, r9, r3
 80130b2:	4313      	orrs	r3, r2
 80130b4:	9304      	str	r3, [sp, #16]
 80130b6:	46a2      	mov	sl, r4
 80130b8:	e7d2      	b.n	8013060 <_svfiprintf_r+0xa0>
 80130ba:	9b03      	ldr	r3, [sp, #12]
 80130bc:	1d19      	adds	r1, r3, #4
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	9103      	str	r1, [sp, #12]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	bfbb      	ittet	lt
 80130c6:	425b      	neglt	r3, r3
 80130c8:	f042 0202 	orrlt.w	r2, r2, #2
 80130cc:	9307      	strge	r3, [sp, #28]
 80130ce:	9307      	strlt	r3, [sp, #28]
 80130d0:	bfb8      	it	lt
 80130d2:	9204      	strlt	r2, [sp, #16]
 80130d4:	7823      	ldrb	r3, [r4, #0]
 80130d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80130d8:	d10a      	bne.n	80130f0 <_svfiprintf_r+0x130>
 80130da:	7863      	ldrb	r3, [r4, #1]
 80130dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80130de:	d132      	bne.n	8013146 <_svfiprintf_r+0x186>
 80130e0:	9b03      	ldr	r3, [sp, #12]
 80130e2:	1d1a      	adds	r2, r3, #4
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	9203      	str	r2, [sp, #12]
 80130e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80130ec:	3402      	adds	r4, #2
 80130ee:	9305      	str	r3, [sp, #20]
 80130f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80131b4 <_svfiprintf_r+0x1f4>
 80130f4:	7821      	ldrb	r1, [r4, #0]
 80130f6:	2203      	movs	r2, #3
 80130f8:	4650      	mov	r0, sl
 80130fa:	f7ed f909 	bl	8000310 <memchr>
 80130fe:	b138      	cbz	r0, 8013110 <_svfiprintf_r+0x150>
 8013100:	9b04      	ldr	r3, [sp, #16]
 8013102:	eba0 000a 	sub.w	r0, r0, sl
 8013106:	2240      	movs	r2, #64	@ 0x40
 8013108:	4082      	lsls	r2, r0
 801310a:	4313      	orrs	r3, r2
 801310c:	3401      	adds	r4, #1
 801310e:	9304      	str	r3, [sp, #16]
 8013110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013114:	4824      	ldr	r0, [pc, #144]	@ (80131a8 <_svfiprintf_r+0x1e8>)
 8013116:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801311a:	2206      	movs	r2, #6
 801311c:	f7ed f8f8 	bl	8000310 <memchr>
 8013120:	2800      	cmp	r0, #0
 8013122:	d036      	beq.n	8013192 <_svfiprintf_r+0x1d2>
 8013124:	4b21      	ldr	r3, [pc, #132]	@ (80131ac <_svfiprintf_r+0x1ec>)
 8013126:	bb1b      	cbnz	r3, 8013170 <_svfiprintf_r+0x1b0>
 8013128:	9b03      	ldr	r3, [sp, #12]
 801312a:	3307      	adds	r3, #7
 801312c:	f023 0307 	bic.w	r3, r3, #7
 8013130:	3308      	adds	r3, #8
 8013132:	9303      	str	r3, [sp, #12]
 8013134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013136:	4433      	add	r3, r6
 8013138:	9309      	str	r3, [sp, #36]	@ 0x24
 801313a:	e76a      	b.n	8013012 <_svfiprintf_r+0x52>
 801313c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013140:	460c      	mov	r4, r1
 8013142:	2001      	movs	r0, #1
 8013144:	e7a8      	b.n	8013098 <_svfiprintf_r+0xd8>
 8013146:	2300      	movs	r3, #0
 8013148:	3401      	adds	r4, #1
 801314a:	9305      	str	r3, [sp, #20]
 801314c:	4619      	mov	r1, r3
 801314e:	f04f 0c0a 	mov.w	ip, #10
 8013152:	4620      	mov	r0, r4
 8013154:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013158:	3a30      	subs	r2, #48	@ 0x30
 801315a:	2a09      	cmp	r2, #9
 801315c:	d903      	bls.n	8013166 <_svfiprintf_r+0x1a6>
 801315e:	2b00      	cmp	r3, #0
 8013160:	d0c6      	beq.n	80130f0 <_svfiprintf_r+0x130>
 8013162:	9105      	str	r1, [sp, #20]
 8013164:	e7c4      	b.n	80130f0 <_svfiprintf_r+0x130>
 8013166:	fb0c 2101 	mla	r1, ip, r1, r2
 801316a:	4604      	mov	r4, r0
 801316c:	2301      	movs	r3, #1
 801316e:	e7f0      	b.n	8013152 <_svfiprintf_r+0x192>
 8013170:	ab03      	add	r3, sp, #12
 8013172:	9300      	str	r3, [sp, #0]
 8013174:	462a      	mov	r2, r5
 8013176:	4b0e      	ldr	r3, [pc, #56]	@ (80131b0 <_svfiprintf_r+0x1f0>)
 8013178:	a904      	add	r1, sp, #16
 801317a:	4638      	mov	r0, r7
 801317c:	f7fd ff00 	bl	8010f80 <_printf_float>
 8013180:	1c42      	adds	r2, r0, #1
 8013182:	4606      	mov	r6, r0
 8013184:	d1d6      	bne.n	8013134 <_svfiprintf_r+0x174>
 8013186:	89ab      	ldrh	r3, [r5, #12]
 8013188:	065b      	lsls	r3, r3, #25
 801318a:	f53f af2d 	bmi.w	8012fe8 <_svfiprintf_r+0x28>
 801318e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013190:	e72c      	b.n	8012fec <_svfiprintf_r+0x2c>
 8013192:	ab03      	add	r3, sp, #12
 8013194:	9300      	str	r3, [sp, #0]
 8013196:	462a      	mov	r2, r5
 8013198:	4b05      	ldr	r3, [pc, #20]	@ (80131b0 <_svfiprintf_r+0x1f0>)
 801319a:	a904      	add	r1, sp, #16
 801319c:	4638      	mov	r0, r7
 801319e:	f7fe f977 	bl	8011490 <_printf_i>
 80131a2:	e7ed      	b.n	8013180 <_svfiprintf_r+0x1c0>
 80131a4:	08014698 	.word	0x08014698
 80131a8:	080146a2 	.word	0x080146a2
 80131ac:	08010f81 	.word	0x08010f81
 80131b0:	08012f09 	.word	0x08012f09
 80131b4:	0801469e 	.word	0x0801469e

080131b8 <__sflush_r>:
 80131b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80131bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131c0:	0716      	lsls	r6, r2, #28
 80131c2:	4605      	mov	r5, r0
 80131c4:	460c      	mov	r4, r1
 80131c6:	d454      	bmi.n	8013272 <__sflush_r+0xba>
 80131c8:	684b      	ldr	r3, [r1, #4]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	dc02      	bgt.n	80131d4 <__sflush_r+0x1c>
 80131ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	dd48      	ble.n	8013266 <__sflush_r+0xae>
 80131d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80131d6:	2e00      	cmp	r6, #0
 80131d8:	d045      	beq.n	8013266 <__sflush_r+0xae>
 80131da:	2300      	movs	r3, #0
 80131dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80131e0:	682f      	ldr	r7, [r5, #0]
 80131e2:	6a21      	ldr	r1, [r4, #32]
 80131e4:	602b      	str	r3, [r5, #0]
 80131e6:	d030      	beq.n	801324a <__sflush_r+0x92>
 80131e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80131ea:	89a3      	ldrh	r3, [r4, #12]
 80131ec:	0759      	lsls	r1, r3, #29
 80131ee:	d505      	bpl.n	80131fc <__sflush_r+0x44>
 80131f0:	6863      	ldr	r3, [r4, #4]
 80131f2:	1ad2      	subs	r2, r2, r3
 80131f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80131f6:	b10b      	cbz	r3, 80131fc <__sflush_r+0x44>
 80131f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80131fa:	1ad2      	subs	r2, r2, r3
 80131fc:	2300      	movs	r3, #0
 80131fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013200:	6a21      	ldr	r1, [r4, #32]
 8013202:	4628      	mov	r0, r5
 8013204:	47b0      	blx	r6
 8013206:	1c43      	adds	r3, r0, #1
 8013208:	89a3      	ldrh	r3, [r4, #12]
 801320a:	d106      	bne.n	801321a <__sflush_r+0x62>
 801320c:	6829      	ldr	r1, [r5, #0]
 801320e:	291d      	cmp	r1, #29
 8013210:	d82b      	bhi.n	801326a <__sflush_r+0xb2>
 8013212:	4a2a      	ldr	r2, [pc, #168]	@ (80132bc <__sflush_r+0x104>)
 8013214:	410a      	asrs	r2, r1
 8013216:	07d6      	lsls	r6, r2, #31
 8013218:	d427      	bmi.n	801326a <__sflush_r+0xb2>
 801321a:	2200      	movs	r2, #0
 801321c:	6062      	str	r2, [r4, #4]
 801321e:	04d9      	lsls	r1, r3, #19
 8013220:	6922      	ldr	r2, [r4, #16]
 8013222:	6022      	str	r2, [r4, #0]
 8013224:	d504      	bpl.n	8013230 <__sflush_r+0x78>
 8013226:	1c42      	adds	r2, r0, #1
 8013228:	d101      	bne.n	801322e <__sflush_r+0x76>
 801322a:	682b      	ldr	r3, [r5, #0]
 801322c:	b903      	cbnz	r3, 8013230 <__sflush_r+0x78>
 801322e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013232:	602f      	str	r7, [r5, #0]
 8013234:	b1b9      	cbz	r1, 8013266 <__sflush_r+0xae>
 8013236:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801323a:	4299      	cmp	r1, r3
 801323c:	d002      	beq.n	8013244 <__sflush_r+0x8c>
 801323e:	4628      	mov	r0, r5
 8013240:	f7ff f9e0 	bl	8012604 <_free_r>
 8013244:	2300      	movs	r3, #0
 8013246:	6363      	str	r3, [r4, #52]	@ 0x34
 8013248:	e00d      	b.n	8013266 <__sflush_r+0xae>
 801324a:	2301      	movs	r3, #1
 801324c:	4628      	mov	r0, r5
 801324e:	47b0      	blx	r6
 8013250:	4602      	mov	r2, r0
 8013252:	1c50      	adds	r0, r2, #1
 8013254:	d1c9      	bne.n	80131ea <__sflush_r+0x32>
 8013256:	682b      	ldr	r3, [r5, #0]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d0c6      	beq.n	80131ea <__sflush_r+0x32>
 801325c:	2b1d      	cmp	r3, #29
 801325e:	d001      	beq.n	8013264 <__sflush_r+0xac>
 8013260:	2b16      	cmp	r3, #22
 8013262:	d11e      	bne.n	80132a2 <__sflush_r+0xea>
 8013264:	602f      	str	r7, [r5, #0]
 8013266:	2000      	movs	r0, #0
 8013268:	e022      	b.n	80132b0 <__sflush_r+0xf8>
 801326a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801326e:	b21b      	sxth	r3, r3
 8013270:	e01b      	b.n	80132aa <__sflush_r+0xf2>
 8013272:	690f      	ldr	r7, [r1, #16]
 8013274:	2f00      	cmp	r7, #0
 8013276:	d0f6      	beq.n	8013266 <__sflush_r+0xae>
 8013278:	0793      	lsls	r3, r2, #30
 801327a:	680e      	ldr	r6, [r1, #0]
 801327c:	bf08      	it	eq
 801327e:	694b      	ldreq	r3, [r1, #20]
 8013280:	600f      	str	r7, [r1, #0]
 8013282:	bf18      	it	ne
 8013284:	2300      	movne	r3, #0
 8013286:	eba6 0807 	sub.w	r8, r6, r7
 801328a:	608b      	str	r3, [r1, #8]
 801328c:	f1b8 0f00 	cmp.w	r8, #0
 8013290:	dde9      	ble.n	8013266 <__sflush_r+0xae>
 8013292:	6a21      	ldr	r1, [r4, #32]
 8013294:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013296:	4643      	mov	r3, r8
 8013298:	463a      	mov	r2, r7
 801329a:	4628      	mov	r0, r5
 801329c:	47b0      	blx	r6
 801329e:	2800      	cmp	r0, #0
 80132a0:	dc08      	bgt.n	80132b4 <__sflush_r+0xfc>
 80132a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132aa:	81a3      	strh	r3, [r4, #12]
 80132ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80132b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132b4:	4407      	add	r7, r0
 80132b6:	eba8 0800 	sub.w	r8, r8, r0
 80132ba:	e7e7      	b.n	801328c <__sflush_r+0xd4>
 80132bc:	dfbffffe 	.word	0xdfbffffe

080132c0 <_fflush_r>:
 80132c0:	b538      	push	{r3, r4, r5, lr}
 80132c2:	690b      	ldr	r3, [r1, #16]
 80132c4:	4605      	mov	r5, r0
 80132c6:	460c      	mov	r4, r1
 80132c8:	b913      	cbnz	r3, 80132d0 <_fflush_r+0x10>
 80132ca:	2500      	movs	r5, #0
 80132cc:	4628      	mov	r0, r5
 80132ce:	bd38      	pop	{r3, r4, r5, pc}
 80132d0:	b118      	cbz	r0, 80132da <_fflush_r+0x1a>
 80132d2:	6a03      	ldr	r3, [r0, #32]
 80132d4:	b90b      	cbnz	r3, 80132da <_fflush_r+0x1a>
 80132d6:	f7fe fa87 	bl	80117e8 <__sinit>
 80132da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d0f3      	beq.n	80132ca <_fflush_r+0xa>
 80132e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80132e4:	07d0      	lsls	r0, r2, #31
 80132e6:	d404      	bmi.n	80132f2 <_fflush_r+0x32>
 80132e8:	0599      	lsls	r1, r3, #22
 80132ea:	d402      	bmi.n	80132f2 <_fflush_r+0x32>
 80132ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80132ee:	f7fe fba0 	bl	8011a32 <__retarget_lock_acquire_recursive>
 80132f2:	4628      	mov	r0, r5
 80132f4:	4621      	mov	r1, r4
 80132f6:	f7ff ff5f 	bl	80131b8 <__sflush_r>
 80132fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80132fc:	07da      	lsls	r2, r3, #31
 80132fe:	4605      	mov	r5, r0
 8013300:	d4e4      	bmi.n	80132cc <_fflush_r+0xc>
 8013302:	89a3      	ldrh	r3, [r4, #12]
 8013304:	059b      	lsls	r3, r3, #22
 8013306:	d4e1      	bmi.n	80132cc <_fflush_r+0xc>
 8013308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801330a:	f7fe fb93 	bl	8011a34 <__retarget_lock_release_recursive>
 801330e:	e7dd      	b.n	80132cc <_fflush_r+0xc>

08013310 <memmove>:
 8013310:	4288      	cmp	r0, r1
 8013312:	b510      	push	{r4, lr}
 8013314:	eb01 0402 	add.w	r4, r1, r2
 8013318:	d902      	bls.n	8013320 <memmove+0x10>
 801331a:	4284      	cmp	r4, r0
 801331c:	4623      	mov	r3, r4
 801331e:	d807      	bhi.n	8013330 <memmove+0x20>
 8013320:	1e43      	subs	r3, r0, #1
 8013322:	42a1      	cmp	r1, r4
 8013324:	d008      	beq.n	8013338 <memmove+0x28>
 8013326:	f811 2b01 	ldrb.w	r2, [r1], #1
 801332a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801332e:	e7f8      	b.n	8013322 <memmove+0x12>
 8013330:	4402      	add	r2, r0
 8013332:	4601      	mov	r1, r0
 8013334:	428a      	cmp	r2, r1
 8013336:	d100      	bne.n	801333a <memmove+0x2a>
 8013338:	bd10      	pop	{r4, pc}
 801333a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801333e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013342:	e7f7      	b.n	8013334 <memmove+0x24>

08013344 <_sbrk_r>:
 8013344:	b538      	push	{r3, r4, r5, lr}
 8013346:	4d06      	ldr	r5, [pc, #24]	@ (8013360 <_sbrk_r+0x1c>)
 8013348:	2300      	movs	r3, #0
 801334a:	4604      	mov	r4, r0
 801334c:	4608      	mov	r0, r1
 801334e:	602b      	str	r3, [r5, #0]
 8013350:	f7f0 fea0 	bl	8004094 <_sbrk>
 8013354:	1c43      	adds	r3, r0, #1
 8013356:	d102      	bne.n	801335e <_sbrk_r+0x1a>
 8013358:	682b      	ldr	r3, [r5, #0]
 801335a:	b103      	cbz	r3, 801335e <_sbrk_r+0x1a>
 801335c:	6023      	str	r3, [r4, #0]
 801335e:	bd38      	pop	{r3, r4, r5, pc}
 8013360:	240011ac 	.word	0x240011ac

08013364 <memcpy>:
 8013364:	440a      	add	r2, r1
 8013366:	4291      	cmp	r1, r2
 8013368:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801336c:	d100      	bne.n	8013370 <memcpy+0xc>
 801336e:	4770      	bx	lr
 8013370:	b510      	push	{r4, lr}
 8013372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013376:	f803 4f01 	strb.w	r4, [r3, #1]!
 801337a:	4291      	cmp	r1, r2
 801337c:	d1f9      	bne.n	8013372 <memcpy+0xe>
 801337e:	bd10      	pop	{r4, pc}

08013380 <__assert_func>:
 8013380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013382:	4614      	mov	r4, r2
 8013384:	461a      	mov	r2, r3
 8013386:	4b09      	ldr	r3, [pc, #36]	@ (80133ac <__assert_func+0x2c>)
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	4605      	mov	r5, r0
 801338c:	68d8      	ldr	r0, [r3, #12]
 801338e:	b954      	cbnz	r4, 80133a6 <__assert_func+0x26>
 8013390:	4b07      	ldr	r3, [pc, #28]	@ (80133b0 <__assert_func+0x30>)
 8013392:	461c      	mov	r4, r3
 8013394:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013398:	9100      	str	r1, [sp, #0]
 801339a:	462b      	mov	r3, r5
 801339c:	4905      	ldr	r1, [pc, #20]	@ (80133b4 <__assert_func+0x34>)
 801339e:	f000 f86f 	bl	8013480 <fiprintf>
 80133a2:	f000 f87f 	bl	80134a4 <abort>
 80133a6:	4b04      	ldr	r3, [pc, #16]	@ (80133b8 <__assert_func+0x38>)
 80133a8:	e7f4      	b.n	8013394 <__assert_func+0x14>
 80133aa:	bf00      	nop
 80133ac:	24000054 	.word	0x24000054
 80133b0:	080146ee 	.word	0x080146ee
 80133b4:	080146c0 	.word	0x080146c0
 80133b8:	080146b3 	.word	0x080146b3

080133bc <_calloc_r>:
 80133bc:	b570      	push	{r4, r5, r6, lr}
 80133be:	fba1 5402 	umull	r5, r4, r1, r2
 80133c2:	b93c      	cbnz	r4, 80133d4 <_calloc_r+0x18>
 80133c4:	4629      	mov	r1, r5
 80133c6:	f7ff f991 	bl	80126ec <_malloc_r>
 80133ca:	4606      	mov	r6, r0
 80133cc:	b928      	cbnz	r0, 80133da <_calloc_r+0x1e>
 80133ce:	2600      	movs	r6, #0
 80133d0:	4630      	mov	r0, r6
 80133d2:	bd70      	pop	{r4, r5, r6, pc}
 80133d4:	220c      	movs	r2, #12
 80133d6:	6002      	str	r2, [r0, #0]
 80133d8:	e7f9      	b.n	80133ce <_calloc_r+0x12>
 80133da:	462a      	mov	r2, r5
 80133dc:	4621      	mov	r1, r4
 80133de:	f7fe fa9c 	bl	801191a <memset>
 80133e2:	e7f5      	b.n	80133d0 <_calloc_r+0x14>

080133e4 <__ascii_mbtowc>:
 80133e4:	b082      	sub	sp, #8
 80133e6:	b901      	cbnz	r1, 80133ea <__ascii_mbtowc+0x6>
 80133e8:	a901      	add	r1, sp, #4
 80133ea:	b142      	cbz	r2, 80133fe <__ascii_mbtowc+0x1a>
 80133ec:	b14b      	cbz	r3, 8013402 <__ascii_mbtowc+0x1e>
 80133ee:	7813      	ldrb	r3, [r2, #0]
 80133f0:	600b      	str	r3, [r1, #0]
 80133f2:	7812      	ldrb	r2, [r2, #0]
 80133f4:	1e10      	subs	r0, r2, #0
 80133f6:	bf18      	it	ne
 80133f8:	2001      	movne	r0, #1
 80133fa:	b002      	add	sp, #8
 80133fc:	4770      	bx	lr
 80133fe:	4610      	mov	r0, r2
 8013400:	e7fb      	b.n	80133fa <__ascii_mbtowc+0x16>
 8013402:	f06f 0001 	mvn.w	r0, #1
 8013406:	e7f8      	b.n	80133fa <__ascii_mbtowc+0x16>

08013408 <_realloc_r>:
 8013408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801340c:	4680      	mov	r8, r0
 801340e:	4615      	mov	r5, r2
 8013410:	460c      	mov	r4, r1
 8013412:	b921      	cbnz	r1, 801341e <_realloc_r+0x16>
 8013414:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013418:	4611      	mov	r1, r2
 801341a:	f7ff b967 	b.w	80126ec <_malloc_r>
 801341e:	b92a      	cbnz	r2, 801342c <_realloc_r+0x24>
 8013420:	f7ff f8f0 	bl	8012604 <_free_r>
 8013424:	2400      	movs	r4, #0
 8013426:	4620      	mov	r0, r4
 8013428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801342c:	f000 f841 	bl	80134b2 <_malloc_usable_size_r>
 8013430:	4285      	cmp	r5, r0
 8013432:	4606      	mov	r6, r0
 8013434:	d802      	bhi.n	801343c <_realloc_r+0x34>
 8013436:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801343a:	d8f4      	bhi.n	8013426 <_realloc_r+0x1e>
 801343c:	4629      	mov	r1, r5
 801343e:	4640      	mov	r0, r8
 8013440:	f7ff f954 	bl	80126ec <_malloc_r>
 8013444:	4607      	mov	r7, r0
 8013446:	2800      	cmp	r0, #0
 8013448:	d0ec      	beq.n	8013424 <_realloc_r+0x1c>
 801344a:	42b5      	cmp	r5, r6
 801344c:	462a      	mov	r2, r5
 801344e:	4621      	mov	r1, r4
 8013450:	bf28      	it	cs
 8013452:	4632      	movcs	r2, r6
 8013454:	f7ff ff86 	bl	8013364 <memcpy>
 8013458:	4621      	mov	r1, r4
 801345a:	4640      	mov	r0, r8
 801345c:	f7ff f8d2 	bl	8012604 <_free_r>
 8013460:	463c      	mov	r4, r7
 8013462:	e7e0      	b.n	8013426 <_realloc_r+0x1e>

08013464 <__ascii_wctomb>:
 8013464:	4603      	mov	r3, r0
 8013466:	4608      	mov	r0, r1
 8013468:	b141      	cbz	r1, 801347c <__ascii_wctomb+0x18>
 801346a:	2aff      	cmp	r2, #255	@ 0xff
 801346c:	d904      	bls.n	8013478 <__ascii_wctomb+0x14>
 801346e:	228a      	movs	r2, #138	@ 0x8a
 8013470:	601a      	str	r2, [r3, #0]
 8013472:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013476:	4770      	bx	lr
 8013478:	700a      	strb	r2, [r1, #0]
 801347a:	2001      	movs	r0, #1
 801347c:	4770      	bx	lr
	...

08013480 <fiprintf>:
 8013480:	b40e      	push	{r1, r2, r3}
 8013482:	b503      	push	{r0, r1, lr}
 8013484:	4601      	mov	r1, r0
 8013486:	ab03      	add	r3, sp, #12
 8013488:	4805      	ldr	r0, [pc, #20]	@ (80134a0 <fiprintf+0x20>)
 801348a:	f853 2b04 	ldr.w	r2, [r3], #4
 801348e:	6800      	ldr	r0, [r0, #0]
 8013490:	9301      	str	r3, [sp, #4]
 8013492:	f000 f83f 	bl	8013514 <_vfiprintf_r>
 8013496:	b002      	add	sp, #8
 8013498:	f85d eb04 	ldr.w	lr, [sp], #4
 801349c:	b003      	add	sp, #12
 801349e:	4770      	bx	lr
 80134a0:	24000054 	.word	0x24000054

080134a4 <abort>:
 80134a4:	b508      	push	{r3, lr}
 80134a6:	2006      	movs	r0, #6
 80134a8:	f000 fa08 	bl	80138bc <raise>
 80134ac:	2001      	movs	r0, #1
 80134ae:	f7f0 fd79 	bl	8003fa4 <_exit>

080134b2 <_malloc_usable_size_r>:
 80134b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134b6:	1f18      	subs	r0, r3, #4
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	bfbc      	itt	lt
 80134bc:	580b      	ldrlt	r3, [r1, r0]
 80134be:	18c0      	addlt	r0, r0, r3
 80134c0:	4770      	bx	lr

080134c2 <__sfputc_r>:
 80134c2:	6893      	ldr	r3, [r2, #8]
 80134c4:	3b01      	subs	r3, #1
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	b410      	push	{r4}
 80134ca:	6093      	str	r3, [r2, #8]
 80134cc:	da08      	bge.n	80134e0 <__sfputc_r+0x1e>
 80134ce:	6994      	ldr	r4, [r2, #24]
 80134d0:	42a3      	cmp	r3, r4
 80134d2:	db01      	blt.n	80134d8 <__sfputc_r+0x16>
 80134d4:	290a      	cmp	r1, #10
 80134d6:	d103      	bne.n	80134e0 <__sfputc_r+0x1e>
 80134d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134dc:	f000 b932 	b.w	8013744 <__swbuf_r>
 80134e0:	6813      	ldr	r3, [r2, #0]
 80134e2:	1c58      	adds	r0, r3, #1
 80134e4:	6010      	str	r0, [r2, #0]
 80134e6:	7019      	strb	r1, [r3, #0]
 80134e8:	4608      	mov	r0, r1
 80134ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134ee:	4770      	bx	lr

080134f0 <__sfputs_r>:
 80134f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134f2:	4606      	mov	r6, r0
 80134f4:	460f      	mov	r7, r1
 80134f6:	4614      	mov	r4, r2
 80134f8:	18d5      	adds	r5, r2, r3
 80134fa:	42ac      	cmp	r4, r5
 80134fc:	d101      	bne.n	8013502 <__sfputs_r+0x12>
 80134fe:	2000      	movs	r0, #0
 8013500:	e007      	b.n	8013512 <__sfputs_r+0x22>
 8013502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013506:	463a      	mov	r2, r7
 8013508:	4630      	mov	r0, r6
 801350a:	f7ff ffda 	bl	80134c2 <__sfputc_r>
 801350e:	1c43      	adds	r3, r0, #1
 8013510:	d1f3      	bne.n	80134fa <__sfputs_r+0xa>
 8013512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013514 <_vfiprintf_r>:
 8013514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013518:	460d      	mov	r5, r1
 801351a:	b09d      	sub	sp, #116	@ 0x74
 801351c:	4614      	mov	r4, r2
 801351e:	4698      	mov	r8, r3
 8013520:	4606      	mov	r6, r0
 8013522:	b118      	cbz	r0, 801352c <_vfiprintf_r+0x18>
 8013524:	6a03      	ldr	r3, [r0, #32]
 8013526:	b90b      	cbnz	r3, 801352c <_vfiprintf_r+0x18>
 8013528:	f7fe f95e 	bl	80117e8 <__sinit>
 801352c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801352e:	07d9      	lsls	r1, r3, #31
 8013530:	d405      	bmi.n	801353e <_vfiprintf_r+0x2a>
 8013532:	89ab      	ldrh	r3, [r5, #12]
 8013534:	059a      	lsls	r2, r3, #22
 8013536:	d402      	bmi.n	801353e <_vfiprintf_r+0x2a>
 8013538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801353a:	f7fe fa7a 	bl	8011a32 <__retarget_lock_acquire_recursive>
 801353e:	89ab      	ldrh	r3, [r5, #12]
 8013540:	071b      	lsls	r3, r3, #28
 8013542:	d501      	bpl.n	8013548 <_vfiprintf_r+0x34>
 8013544:	692b      	ldr	r3, [r5, #16]
 8013546:	b99b      	cbnz	r3, 8013570 <_vfiprintf_r+0x5c>
 8013548:	4629      	mov	r1, r5
 801354a:	4630      	mov	r0, r6
 801354c:	f000 f938 	bl	80137c0 <__swsetup_r>
 8013550:	b170      	cbz	r0, 8013570 <_vfiprintf_r+0x5c>
 8013552:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013554:	07dc      	lsls	r4, r3, #31
 8013556:	d504      	bpl.n	8013562 <_vfiprintf_r+0x4e>
 8013558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801355c:	b01d      	add	sp, #116	@ 0x74
 801355e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013562:	89ab      	ldrh	r3, [r5, #12]
 8013564:	0598      	lsls	r0, r3, #22
 8013566:	d4f7      	bmi.n	8013558 <_vfiprintf_r+0x44>
 8013568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801356a:	f7fe fa63 	bl	8011a34 <__retarget_lock_release_recursive>
 801356e:	e7f3      	b.n	8013558 <_vfiprintf_r+0x44>
 8013570:	2300      	movs	r3, #0
 8013572:	9309      	str	r3, [sp, #36]	@ 0x24
 8013574:	2320      	movs	r3, #32
 8013576:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801357a:	f8cd 800c 	str.w	r8, [sp, #12]
 801357e:	2330      	movs	r3, #48	@ 0x30
 8013580:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013730 <_vfiprintf_r+0x21c>
 8013584:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013588:	f04f 0901 	mov.w	r9, #1
 801358c:	4623      	mov	r3, r4
 801358e:	469a      	mov	sl, r3
 8013590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013594:	b10a      	cbz	r2, 801359a <_vfiprintf_r+0x86>
 8013596:	2a25      	cmp	r2, #37	@ 0x25
 8013598:	d1f9      	bne.n	801358e <_vfiprintf_r+0x7a>
 801359a:	ebba 0b04 	subs.w	fp, sl, r4
 801359e:	d00b      	beq.n	80135b8 <_vfiprintf_r+0xa4>
 80135a0:	465b      	mov	r3, fp
 80135a2:	4622      	mov	r2, r4
 80135a4:	4629      	mov	r1, r5
 80135a6:	4630      	mov	r0, r6
 80135a8:	f7ff ffa2 	bl	80134f0 <__sfputs_r>
 80135ac:	3001      	adds	r0, #1
 80135ae:	f000 80a7 	beq.w	8013700 <_vfiprintf_r+0x1ec>
 80135b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80135b4:	445a      	add	r2, fp
 80135b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80135b8:	f89a 3000 	ldrb.w	r3, [sl]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	f000 809f 	beq.w	8013700 <_vfiprintf_r+0x1ec>
 80135c2:	2300      	movs	r3, #0
 80135c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80135c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80135cc:	f10a 0a01 	add.w	sl, sl, #1
 80135d0:	9304      	str	r3, [sp, #16]
 80135d2:	9307      	str	r3, [sp, #28]
 80135d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80135d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80135da:	4654      	mov	r4, sl
 80135dc:	2205      	movs	r2, #5
 80135de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135e2:	4853      	ldr	r0, [pc, #332]	@ (8013730 <_vfiprintf_r+0x21c>)
 80135e4:	f7ec fe94 	bl	8000310 <memchr>
 80135e8:	9a04      	ldr	r2, [sp, #16]
 80135ea:	b9d8      	cbnz	r0, 8013624 <_vfiprintf_r+0x110>
 80135ec:	06d1      	lsls	r1, r2, #27
 80135ee:	bf44      	itt	mi
 80135f0:	2320      	movmi	r3, #32
 80135f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80135f6:	0713      	lsls	r3, r2, #28
 80135f8:	bf44      	itt	mi
 80135fa:	232b      	movmi	r3, #43	@ 0x2b
 80135fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013600:	f89a 3000 	ldrb.w	r3, [sl]
 8013604:	2b2a      	cmp	r3, #42	@ 0x2a
 8013606:	d015      	beq.n	8013634 <_vfiprintf_r+0x120>
 8013608:	9a07      	ldr	r2, [sp, #28]
 801360a:	4654      	mov	r4, sl
 801360c:	2000      	movs	r0, #0
 801360e:	f04f 0c0a 	mov.w	ip, #10
 8013612:	4621      	mov	r1, r4
 8013614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013618:	3b30      	subs	r3, #48	@ 0x30
 801361a:	2b09      	cmp	r3, #9
 801361c:	d94b      	bls.n	80136b6 <_vfiprintf_r+0x1a2>
 801361e:	b1b0      	cbz	r0, 801364e <_vfiprintf_r+0x13a>
 8013620:	9207      	str	r2, [sp, #28]
 8013622:	e014      	b.n	801364e <_vfiprintf_r+0x13a>
 8013624:	eba0 0308 	sub.w	r3, r0, r8
 8013628:	fa09 f303 	lsl.w	r3, r9, r3
 801362c:	4313      	orrs	r3, r2
 801362e:	9304      	str	r3, [sp, #16]
 8013630:	46a2      	mov	sl, r4
 8013632:	e7d2      	b.n	80135da <_vfiprintf_r+0xc6>
 8013634:	9b03      	ldr	r3, [sp, #12]
 8013636:	1d19      	adds	r1, r3, #4
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	9103      	str	r1, [sp, #12]
 801363c:	2b00      	cmp	r3, #0
 801363e:	bfbb      	ittet	lt
 8013640:	425b      	neglt	r3, r3
 8013642:	f042 0202 	orrlt.w	r2, r2, #2
 8013646:	9307      	strge	r3, [sp, #28]
 8013648:	9307      	strlt	r3, [sp, #28]
 801364a:	bfb8      	it	lt
 801364c:	9204      	strlt	r2, [sp, #16]
 801364e:	7823      	ldrb	r3, [r4, #0]
 8013650:	2b2e      	cmp	r3, #46	@ 0x2e
 8013652:	d10a      	bne.n	801366a <_vfiprintf_r+0x156>
 8013654:	7863      	ldrb	r3, [r4, #1]
 8013656:	2b2a      	cmp	r3, #42	@ 0x2a
 8013658:	d132      	bne.n	80136c0 <_vfiprintf_r+0x1ac>
 801365a:	9b03      	ldr	r3, [sp, #12]
 801365c:	1d1a      	adds	r2, r3, #4
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	9203      	str	r2, [sp, #12]
 8013662:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013666:	3402      	adds	r4, #2
 8013668:	9305      	str	r3, [sp, #20]
 801366a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013740 <_vfiprintf_r+0x22c>
 801366e:	7821      	ldrb	r1, [r4, #0]
 8013670:	2203      	movs	r2, #3
 8013672:	4650      	mov	r0, sl
 8013674:	f7ec fe4c 	bl	8000310 <memchr>
 8013678:	b138      	cbz	r0, 801368a <_vfiprintf_r+0x176>
 801367a:	9b04      	ldr	r3, [sp, #16]
 801367c:	eba0 000a 	sub.w	r0, r0, sl
 8013680:	2240      	movs	r2, #64	@ 0x40
 8013682:	4082      	lsls	r2, r0
 8013684:	4313      	orrs	r3, r2
 8013686:	3401      	adds	r4, #1
 8013688:	9304      	str	r3, [sp, #16]
 801368a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801368e:	4829      	ldr	r0, [pc, #164]	@ (8013734 <_vfiprintf_r+0x220>)
 8013690:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013694:	2206      	movs	r2, #6
 8013696:	f7ec fe3b 	bl	8000310 <memchr>
 801369a:	2800      	cmp	r0, #0
 801369c:	d03f      	beq.n	801371e <_vfiprintf_r+0x20a>
 801369e:	4b26      	ldr	r3, [pc, #152]	@ (8013738 <_vfiprintf_r+0x224>)
 80136a0:	bb1b      	cbnz	r3, 80136ea <_vfiprintf_r+0x1d6>
 80136a2:	9b03      	ldr	r3, [sp, #12]
 80136a4:	3307      	adds	r3, #7
 80136a6:	f023 0307 	bic.w	r3, r3, #7
 80136aa:	3308      	adds	r3, #8
 80136ac:	9303      	str	r3, [sp, #12]
 80136ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136b0:	443b      	add	r3, r7
 80136b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80136b4:	e76a      	b.n	801358c <_vfiprintf_r+0x78>
 80136b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80136ba:	460c      	mov	r4, r1
 80136bc:	2001      	movs	r0, #1
 80136be:	e7a8      	b.n	8013612 <_vfiprintf_r+0xfe>
 80136c0:	2300      	movs	r3, #0
 80136c2:	3401      	adds	r4, #1
 80136c4:	9305      	str	r3, [sp, #20]
 80136c6:	4619      	mov	r1, r3
 80136c8:	f04f 0c0a 	mov.w	ip, #10
 80136cc:	4620      	mov	r0, r4
 80136ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80136d2:	3a30      	subs	r2, #48	@ 0x30
 80136d4:	2a09      	cmp	r2, #9
 80136d6:	d903      	bls.n	80136e0 <_vfiprintf_r+0x1cc>
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d0c6      	beq.n	801366a <_vfiprintf_r+0x156>
 80136dc:	9105      	str	r1, [sp, #20]
 80136de:	e7c4      	b.n	801366a <_vfiprintf_r+0x156>
 80136e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80136e4:	4604      	mov	r4, r0
 80136e6:	2301      	movs	r3, #1
 80136e8:	e7f0      	b.n	80136cc <_vfiprintf_r+0x1b8>
 80136ea:	ab03      	add	r3, sp, #12
 80136ec:	9300      	str	r3, [sp, #0]
 80136ee:	462a      	mov	r2, r5
 80136f0:	4b12      	ldr	r3, [pc, #72]	@ (801373c <_vfiprintf_r+0x228>)
 80136f2:	a904      	add	r1, sp, #16
 80136f4:	4630      	mov	r0, r6
 80136f6:	f7fd fc43 	bl	8010f80 <_printf_float>
 80136fa:	4607      	mov	r7, r0
 80136fc:	1c78      	adds	r0, r7, #1
 80136fe:	d1d6      	bne.n	80136ae <_vfiprintf_r+0x19a>
 8013700:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013702:	07d9      	lsls	r1, r3, #31
 8013704:	d405      	bmi.n	8013712 <_vfiprintf_r+0x1fe>
 8013706:	89ab      	ldrh	r3, [r5, #12]
 8013708:	059a      	lsls	r2, r3, #22
 801370a:	d402      	bmi.n	8013712 <_vfiprintf_r+0x1fe>
 801370c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801370e:	f7fe f991 	bl	8011a34 <__retarget_lock_release_recursive>
 8013712:	89ab      	ldrh	r3, [r5, #12]
 8013714:	065b      	lsls	r3, r3, #25
 8013716:	f53f af1f 	bmi.w	8013558 <_vfiprintf_r+0x44>
 801371a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801371c:	e71e      	b.n	801355c <_vfiprintf_r+0x48>
 801371e:	ab03      	add	r3, sp, #12
 8013720:	9300      	str	r3, [sp, #0]
 8013722:	462a      	mov	r2, r5
 8013724:	4b05      	ldr	r3, [pc, #20]	@ (801373c <_vfiprintf_r+0x228>)
 8013726:	a904      	add	r1, sp, #16
 8013728:	4630      	mov	r0, r6
 801372a:	f7fd feb1 	bl	8011490 <_printf_i>
 801372e:	e7e4      	b.n	80136fa <_vfiprintf_r+0x1e6>
 8013730:	08014698 	.word	0x08014698
 8013734:	080146a2 	.word	0x080146a2
 8013738:	08010f81 	.word	0x08010f81
 801373c:	080134f1 	.word	0x080134f1
 8013740:	0801469e 	.word	0x0801469e

08013744 <__swbuf_r>:
 8013744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013746:	460e      	mov	r6, r1
 8013748:	4614      	mov	r4, r2
 801374a:	4605      	mov	r5, r0
 801374c:	b118      	cbz	r0, 8013756 <__swbuf_r+0x12>
 801374e:	6a03      	ldr	r3, [r0, #32]
 8013750:	b90b      	cbnz	r3, 8013756 <__swbuf_r+0x12>
 8013752:	f7fe f849 	bl	80117e8 <__sinit>
 8013756:	69a3      	ldr	r3, [r4, #24]
 8013758:	60a3      	str	r3, [r4, #8]
 801375a:	89a3      	ldrh	r3, [r4, #12]
 801375c:	071a      	lsls	r2, r3, #28
 801375e:	d501      	bpl.n	8013764 <__swbuf_r+0x20>
 8013760:	6923      	ldr	r3, [r4, #16]
 8013762:	b943      	cbnz	r3, 8013776 <__swbuf_r+0x32>
 8013764:	4621      	mov	r1, r4
 8013766:	4628      	mov	r0, r5
 8013768:	f000 f82a 	bl	80137c0 <__swsetup_r>
 801376c:	b118      	cbz	r0, 8013776 <__swbuf_r+0x32>
 801376e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013772:	4638      	mov	r0, r7
 8013774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013776:	6823      	ldr	r3, [r4, #0]
 8013778:	6922      	ldr	r2, [r4, #16]
 801377a:	1a98      	subs	r0, r3, r2
 801377c:	6963      	ldr	r3, [r4, #20]
 801377e:	b2f6      	uxtb	r6, r6
 8013780:	4283      	cmp	r3, r0
 8013782:	4637      	mov	r7, r6
 8013784:	dc05      	bgt.n	8013792 <__swbuf_r+0x4e>
 8013786:	4621      	mov	r1, r4
 8013788:	4628      	mov	r0, r5
 801378a:	f7ff fd99 	bl	80132c0 <_fflush_r>
 801378e:	2800      	cmp	r0, #0
 8013790:	d1ed      	bne.n	801376e <__swbuf_r+0x2a>
 8013792:	68a3      	ldr	r3, [r4, #8]
 8013794:	3b01      	subs	r3, #1
 8013796:	60a3      	str	r3, [r4, #8]
 8013798:	6823      	ldr	r3, [r4, #0]
 801379a:	1c5a      	adds	r2, r3, #1
 801379c:	6022      	str	r2, [r4, #0]
 801379e:	701e      	strb	r6, [r3, #0]
 80137a0:	6962      	ldr	r2, [r4, #20]
 80137a2:	1c43      	adds	r3, r0, #1
 80137a4:	429a      	cmp	r2, r3
 80137a6:	d004      	beq.n	80137b2 <__swbuf_r+0x6e>
 80137a8:	89a3      	ldrh	r3, [r4, #12]
 80137aa:	07db      	lsls	r3, r3, #31
 80137ac:	d5e1      	bpl.n	8013772 <__swbuf_r+0x2e>
 80137ae:	2e0a      	cmp	r6, #10
 80137b0:	d1df      	bne.n	8013772 <__swbuf_r+0x2e>
 80137b2:	4621      	mov	r1, r4
 80137b4:	4628      	mov	r0, r5
 80137b6:	f7ff fd83 	bl	80132c0 <_fflush_r>
 80137ba:	2800      	cmp	r0, #0
 80137bc:	d0d9      	beq.n	8013772 <__swbuf_r+0x2e>
 80137be:	e7d6      	b.n	801376e <__swbuf_r+0x2a>

080137c0 <__swsetup_r>:
 80137c0:	b538      	push	{r3, r4, r5, lr}
 80137c2:	4b29      	ldr	r3, [pc, #164]	@ (8013868 <__swsetup_r+0xa8>)
 80137c4:	4605      	mov	r5, r0
 80137c6:	6818      	ldr	r0, [r3, #0]
 80137c8:	460c      	mov	r4, r1
 80137ca:	b118      	cbz	r0, 80137d4 <__swsetup_r+0x14>
 80137cc:	6a03      	ldr	r3, [r0, #32]
 80137ce:	b90b      	cbnz	r3, 80137d4 <__swsetup_r+0x14>
 80137d0:	f7fe f80a 	bl	80117e8 <__sinit>
 80137d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137d8:	0719      	lsls	r1, r3, #28
 80137da:	d422      	bmi.n	8013822 <__swsetup_r+0x62>
 80137dc:	06da      	lsls	r2, r3, #27
 80137de:	d407      	bmi.n	80137f0 <__swsetup_r+0x30>
 80137e0:	2209      	movs	r2, #9
 80137e2:	602a      	str	r2, [r5, #0]
 80137e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137e8:	81a3      	strh	r3, [r4, #12]
 80137ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80137ee:	e033      	b.n	8013858 <__swsetup_r+0x98>
 80137f0:	0758      	lsls	r0, r3, #29
 80137f2:	d512      	bpl.n	801381a <__swsetup_r+0x5a>
 80137f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80137f6:	b141      	cbz	r1, 801380a <__swsetup_r+0x4a>
 80137f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80137fc:	4299      	cmp	r1, r3
 80137fe:	d002      	beq.n	8013806 <__swsetup_r+0x46>
 8013800:	4628      	mov	r0, r5
 8013802:	f7fe feff 	bl	8012604 <_free_r>
 8013806:	2300      	movs	r3, #0
 8013808:	6363      	str	r3, [r4, #52]	@ 0x34
 801380a:	89a3      	ldrh	r3, [r4, #12]
 801380c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013810:	81a3      	strh	r3, [r4, #12]
 8013812:	2300      	movs	r3, #0
 8013814:	6063      	str	r3, [r4, #4]
 8013816:	6923      	ldr	r3, [r4, #16]
 8013818:	6023      	str	r3, [r4, #0]
 801381a:	89a3      	ldrh	r3, [r4, #12]
 801381c:	f043 0308 	orr.w	r3, r3, #8
 8013820:	81a3      	strh	r3, [r4, #12]
 8013822:	6923      	ldr	r3, [r4, #16]
 8013824:	b94b      	cbnz	r3, 801383a <__swsetup_r+0x7a>
 8013826:	89a3      	ldrh	r3, [r4, #12]
 8013828:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801382c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013830:	d003      	beq.n	801383a <__swsetup_r+0x7a>
 8013832:	4621      	mov	r1, r4
 8013834:	4628      	mov	r0, r5
 8013836:	f000 f883 	bl	8013940 <__smakebuf_r>
 801383a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801383e:	f013 0201 	ands.w	r2, r3, #1
 8013842:	d00a      	beq.n	801385a <__swsetup_r+0x9a>
 8013844:	2200      	movs	r2, #0
 8013846:	60a2      	str	r2, [r4, #8]
 8013848:	6962      	ldr	r2, [r4, #20]
 801384a:	4252      	negs	r2, r2
 801384c:	61a2      	str	r2, [r4, #24]
 801384e:	6922      	ldr	r2, [r4, #16]
 8013850:	b942      	cbnz	r2, 8013864 <__swsetup_r+0xa4>
 8013852:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013856:	d1c5      	bne.n	80137e4 <__swsetup_r+0x24>
 8013858:	bd38      	pop	{r3, r4, r5, pc}
 801385a:	0799      	lsls	r1, r3, #30
 801385c:	bf58      	it	pl
 801385e:	6962      	ldrpl	r2, [r4, #20]
 8013860:	60a2      	str	r2, [r4, #8]
 8013862:	e7f4      	b.n	801384e <__swsetup_r+0x8e>
 8013864:	2000      	movs	r0, #0
 8013866:	e7f7      	b.n	8013858 <__swsetup_r+0x98>
 8013868:	24000054 	.word	0x24000054

0801386c <_raise_r>:
 801386c:	291f      	cmp	r1, #31
 801386e:	b538      	push	{r3, r4, r5, lr}
 8013870:	4605      	mov	r5, r0
 8013872:	460c      	mov	r4, r1
 8013874:	d904      	bls.n	8013880 <_raise_r+0x14>
 8013876:	2316      	movs	r3, #22
 8013878:	6003      	str	r3, [r0, #0]
 801387a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801387e:	bd38      	pop	{r3, r4, r5, pc}
 8013880:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013882:	b112      	cbz	r2, 801388a <_raise_r+0x1e>
 8013884:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013888:	b94b      	cbnz	r3, 801389e <_raise_r+0x32>
 801388a:	4628      	mov	r0, r5
 801388c:	f000 f830 	bl	80138f0 <_getpid_r>
 8013890:	4622      	mov	r2, r4
 8013892:	4601      	mov	r1, r0
 8013894:	4628      	mov	r0, r5
 8013896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801389a:	f000 b817 	b.w	80138cc <_kill_r>
 801389e:	2b01      	cmp	r3, #1
 80138a0:	d00a      	beq.n	80138b8 <_raise_r+0x4c>
 80138a2:	1c59      	adds	r1, r3, #1
 80138a4:	d103      	bne.n	80138ae <_raise_r+0x42>
 80138a6:	2316      	movs	r3, #22
 80138a8:	6003      	str	r3, [r0, #0]
 80138aa:	2001      	movs	r0, #1
 80138ac:	e7e7      	b.n	801387e <_raise_r+0x12>
 80138ae:	2100      	movs	r1, #0
 80138b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80138b4:	4620      	mov	r0, r4
 80138b6:	4798      	blx	r3
 80138b8:	2000      	movs	r0, #0
 80138ba:	e7e0      	b.n	801387e <_raise_r+0x12>

080138bc <raise>:
 80138bc:	4b02      	ldr	r3, [pc, #8]	@ (80138c8 <raise+0xc>)
 80138be:	4601      	mov	r1, r0
 80138c0:	6818      	ldr	r0, [r3, #0]
 80138c2:	f7ff bfd3 	b.w	801386c <_raise_r>
 80138c6:	bf00      	nop
 80138c8:	24000054 	.word	0x24000054

080138cc <_kill_r>:
 80138cc:	b538      	push	{r3, r4, r5, lr}
 80138ce:	4d07      	ldr	r5, [pc, #28]	@ (80138ec <_kill_r+0x20>)
 80138d0:	2300      	movs	r3, #0
 80138d2:	4604      	mov	r4, r0
 80138d4:	4608      	mov	r0, r1
 80138d6:	4611      	mov	r1, r2
 80138d8:	602b      	str	r3, [r5, #0]
 80138da:	f7f0 fb53 	bl	8003f84 <_kill>
 80138de:	1c43      	adds	r3, r0, #1
 80138e0:	d102      	bne.n	80138e8 <_kill_r+0x1c>
 80138e2:	682b      	ldr	r3, [r5, #0]
 80138e4:	b103      	cbz	r3, 80138e8 <_kill_r+0x1c>
 80138e6:	6023      	str	r3, [r4, #0]
 80138e8:	bd38      	pop	{r3, r4, r5, pc}
 80138ea:	bf00      	nop
 80138ec:	240011ac 	.word	0x240011ac

080138f0 <_getpid_r>:
 80138f0:	f7f0 bb40 	b.w	8003f74 <_getpid>

080138f4 <__swhatbuf_r>:
 80138f4:	b570      	push	{r4, r5, r6, lr}
 80138f6:	460c      	mov	r4, r1
 80138f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138fc:	2900      	cmp	r1, #0
 80138fe:	b096      	sub	sp, #88	@ 0x58
 8013900:	4615      	mov	r5, r2
 8013902:	461e      	mov	r6, r3
 8013904:	da0d      	bge.n	8013922 <__swhatbuf_r+0x2e>
 8013906:	89a3      	ldrh	r3, [r4, #12]
 8013908:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801390c:	f04f 0100 	mov.w	r1, #0
 8013910:	bf14      	ite	ne
 8013912:	2340      	movne	r3, #64	@ 0x40
 8013914:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013918:	2000      	movs	r0, #0
 801391a:	6031      	str	r1, [r6, #0]
 801391c:	602b      	str	r3, [r5, #0]
 801391e:	b016      	add	sp, #88	@ 0x58
 8013920:	bd70      	pop	{r4, r5, r6, pc}
 8013922:	466a      	mov	r2, sp
 8013924:	f000 f848 	bl	80139b8 <_fstat_r>
 8013928:	2800      	cmp	r0, #0
 801392a:	dbec      	blt.n	8013906 <__swhatbuf_r+0x12>
 801392c:	9901      	ldr	r1, [sp, #4]
 801392e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013932:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013936:	4259      	negs	r1, r3
 8013938:	4159      	adcs	r1, r3
 801393a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801393e:	e7eb      	b.n	8013918 <__swhatbuf_r+0x24>

08013940 <__smakebuf_r>:
 8013940:	898b      	ldrh	r3, [r1, #12]
 8013942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013944:	079d      	lsls	r5, r3, #30
 8013946:	4606      	mov	r6, r0
 8013948:	460c      	mov	r4, r1
 801394a:	d507      	bpl.n	801395c <__smakebuf_r+0x1c>
 801394c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013950:	6023      	str	r3, [r4, #0]
 8013952:	6123      	str	r3, [r4, #16]
 8013954:	2301      	movs	r3, #1
 8013956:	6163      	str	r3, [r4, #20]
 8013958:	b003      	add	sp, #12
 801395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801395c:	ab01      	add	r3, sp, #4
 801395e:	466a      	mov	r2, sp
 8013960:	f7ff ffc8 	bl	80138f4 <__swhatbuf_r>
 8013964:	9f00      	ldr	r7, [sp, #0]
 8013966:	4605      	mov	r5, r0
 8013968:	4639      	mov	r1, r7
 801396a:	4630      	mov	r0, r6
 801396c:	f7fe febe 	bl	80126ec <_malloc_r>
 8013970:	b948      	cbnz	r0, 8013986 <__smakebuf_r+0x46>
 8013972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013976:	059a      	lsls	r2, r3, #22
 8013978:	d4ee      	bmi.n	8013958 <__smakebuf_r+0x18>
 801397a:	f023 0303 	bic.w	r3, r3, #3
 801397e:	f043 0302 	orr.w	r3, r3, #2
 8013982:	81a3      	strh	r3, [r4, #12]
 8013984:	e7e2      	b.n	801394c <__smakebuf_r+0xc>
 8013986:	89a3      	ldrh	r3, [r4, #12]
 8013988:	6020      	str	r0, [r4, #0]
 801398a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801398e:	81a3      	strh	r3, [r4, #12]
 8013990:	9b01      	ldr	r3, [sp, #4]
 8013992:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013996:	b15b      	cbz	r3, 80139b0 <__smakebuf_r+0x70>
 8013998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801399c:	4630      	mov	r0, r6
 801399e:	f000 f81d 	bl	80139dc <_isatty_r>
 80139a2:	b128      	cbz	r0, 80139b0 <__smakebuf_r+0x70>
 80139a4:	89a3      	ldrh	r3, [r4, #12]
 80139a6:	f023 0303 	bic.w	r3, r3, #3
 80139aa:	f043 0301 	orr.w	r3, r3, #1
 80139ae:	81a3      	strh	r3, [r4, #12]
 80139b0:	89a3      	ldrh	r3, [r4, #12]
 80139b2:	431d      	orrs	r5, r3
 80139b4:	81a5      	strh	r5, [r4, #12]
 80139b6:	e7cf      	b.n	8013958 <__smakebuf_r+0x18>

080139b8 <_fstat_r>:
 80139b8:	b538      	push	{r3, r4, r5, lr}
 80139ba:	4d07      	ldr	r5, [pc, #28]	@ (80139d8 <_fstat_r+0x20>)
 80139bc:	2300      	movs	r3, #0
 80139be:	4604      	mov	r4, r0
 80139c0:	4608      	mov	r0, r1
 80139c2:	4611      	mov	r1, r2
 80139c4:	602b      	str	r3, [r5, #0]
 80139c6:	f7f0 fb3d 	bl	8004044 <_fstat>
 80139ca:	1c43      	adds	r3, r0, #1
 80139cc:	d102      	bne.n	80139d4 <_fstat_r+0x1c>
 80139ce:	682b      	ldr	r3, [r5, #0]
 80139d0:	b103      	cbz	r3, 80139d4 <_fstat_r+0x1c>
 80139d2:	6023      	str	r3, [r4, #0]
 80139d4:	bd38      	pop	{r3, r4, r5, pc}
 80139d6:	bf00      	nop
 80139d8:	240011ac 	.word	0x240011ac

080139dc <_isatty_r>:
 80139dc:	b538      	push	{r3, r4, r5, lr}
 80139de:	4d06      	ldr	r5, [pc, #24]	@ (80139f8 <_isatty_r+0x1c>)
 80139e0:	2300      	movs	r3, #0
 80139e2:	4604      	mov	r4, r0
 80139e4:	4608      	mov	r0, r1
 80139e6:	602b      	str	r3, [r5, #0]
 80139e8:	f7f0 fb3c 	bl	8004064 <_isatty>
 80139ec:	1c43      	adds	r3, r0, #1
 80139ee:	d102      	bne.n	80139f6 <_isatty_r+0x1a>
 80139f0:	682b      	ldr	r3, [r5, #0]
 80139f2:	b103      	cbz	r3, 80139f6 <_isatty_r+0x1a>
 80139f4:	6023      	str	r3, [r4, #0]
 80139f6:	bd38      	pop	{r3, r4, r5, pc}
 80139f8:	240011ac 	.word	0x240011ac

080139fc <_init>:
 80139fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139fe:	bf00      	nop
 8013a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a02:	bc08      	pop	{r3}
 8013a04:	469e      	mov	lr, r3
 8013a06:	4770      	bx	lr

08013a08 <_fini>:
 8013a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a0a:	bf00      	nop
 8013a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a0e:	bc08      	pop	{r3}
 8013a10:	469e      	mov	lr, r3
 8013a12:	4770      	bx	lr
